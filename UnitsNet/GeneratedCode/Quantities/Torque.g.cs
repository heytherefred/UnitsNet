//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Torque
#else
    public partial struct Torque : IComparable, IComparable<Torque>
#endif
    {
        private readonly double _value;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        public TorqueUnit Unit { get; }

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Torque() : this(0, BaseUnit)
        {
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Torque(double newtonmeters)
        {
            _value = Convert.ToDouble(newtonmeters);
            Unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Torque(double numericValue, TorqueUnit unit)
        {
            _value = numericValue;
            Unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Torque(long newtonmeters) : this(Convert.ToDouble(newtonmeters), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Torque(decimal newtonmeters) : this(Convert.ToDouble(newtonmeters), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Torque;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit => TorqueUnit.NewtonMeter;

        /// <summary>
        ///     All units of measurement for the Torque quantity.
        /// </summary>
        public static TorqueUnit[] Units { get; } = Enum.GetValues(typeof(TorqueUnit)).Cast<TorqueUnit>().ToArray();
        /// <summary>
        ///     Get Torque in KilogramForceCentimeters.
        /// </summary>
        public double KilogramForceCentimeters => As(TorqueUnit.KilogramForceCentimeter);
        /// <summary>
        ///     Get Torque in KilogramForceMeters.
        /// </summary>
        public double KilogramForceMeters => As(TorqueUnit.KilogramForceMeter);
        /// <summary>
        ///     Get Torque in KilogramForceMillimeters.
        /// </summary>
        public double KilogramForceMillimeters => As(TorqueUnit.KilogramForceMillimeter);
        /// <summary>
        ///     Get Torque in KilonewtonCentimeters.
        /// </summary>
        public double KilonewtonCentimeters => As(TorqueUnit.KilonewtonCentimeter);
        /// <summary>
        ///     Get Torque in KilonewtonMeters.
        /// </summary>
        public double KilonewtonMeters => As(TorqueUnit.KilonewtonMeter);
        /// <summary>
        ///     Get Torque in KilonewtonMillimeters.
        /// </summary>
        public double KilonewtonMillimeters => As(TorqueUnit.KilonewtonMillimeter);
        /// <summary>
        ///     Get Torque in KilopoundForceFeet.
        /// </summary>
        public double KilopoundForceFeet => As(TorqueUnit.KilopoundForceFoot);
        /// <summary>
        ///     Get Torque in KilopoundForceInches.
        /// </summary>
        public double KilopoundForceInches => As(TorqueUnit.KilopoundForceInch);
        /// <summary>
        ///     Get Torque in MeganewtonCentimeters.
        /// </summary>
        public double MeganewtonCentimeters => As(TorqueUnit.MeganewtonCentimeter);
        /// <summary>
        ///     Get Torque in MeganewtonMeters.
        /// </summary>
        public double MeganewtonMeters => As(TorqueUnit.MeganewtonMeter);
        /// <summary>
        ///     Get Torque in MeganewtonMillimeters.
        /// </summary>
        public double MeganewtonMillimeters => As(TorqueUnit.MeganewtonMillimeter);
        /// <summary>
        ///     Get Torque in MegapoundForceFeet.
        /// </summary>
        public double MegapoundForceFeet => As(TorqueUnit.MegapoundForceFoot);
        /// <summary>
        ///     Get Torque in MegapoundForceInches.
        /// </summary>
        public double MegapoundForceInches => As(TorqueUnit.MegapoundForceInch);
        /// <summary>
        ///     Get Torque in NewtonCentimeters.
        /// </summary>
        public double NewtonCentimeters => As(TorqueUnit.NewtonCentimeter);
        /// <summary>
        ///     Get Torque in NewtonMeters.
        /// </summary>
        public double NewtonMeters => As(TorqueUnit.NewtonMeter);
        /// <summary>
        ///     Get Torque in NewtonMillimeters.
        /// </summary>
        public double NewtonMillimeters => As(TorqueUnit.NewtonMillimeter);
        /// <summary>
        ///     Get Torque in PoundForceFeet.
        /// </summary>
        public double PoundForceFeet => As(TorqueUnit.PoundForceFoot);
        /// <summary>
        ///     Get Torque in PoundForceInches.
        /// </summary>
        public double PoundForceInches => As(TorqueUnit.PoundForceInch);
        /// <summary>
        ///     Get Torque in TonneForceCentimeters.
        /// </summary>
        public double TonneForceCentimeters => As(TorqueUnit.TonneForceCentimeter);
        /// <summary>
        ///     Get Torque in TonneForceMeters.
        /// </summary>
        public double TonneForceMeters => As(TorqueUnit.TonneForceMeter);
        /// <summary>
        ///     Get Torque in TonneForceMillimeters.
        /// </summary>
        public double TonneForceMillimeters => As(TorqueUnit.TonneForceMillimeter);

        #endregion

        #region Static

        public static Torque Zero => new Torque(0, BaseUnit);

        /// <summary>
        ///     Get Torque from KilogramForceCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceCentimeters(double kilogramforcecentimeters)
#else
        public static Torque FromKilogramForceCentimeters(QuantityValue kilogramforcecentimeters)
#endif
        {
            double value = (double) kilogramforcecentimeters;
            return new Torque(value, TorqueUnit.KilogramForceCentimeter);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceMeters(double kilogramforcemeters)
#else
        public static Torque FromKilogramForceMeters(QuantityValue kilogramforcemeters)
#endif
        {
            double value = (double) kilogramforcemeters;
            return new Torque(value, TorqueUnit.KilogramForceMeter);
        }

        /// <summary>
        ///     Get Torque from KilogramForceMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilogramForceMillimeters(double kilogramforcemillimeters)
#else
        public static Torque FromKilogramForceMillimeters(QuantityValue kilogramforcemillimeters)
#endif
        {
            double value = (double) kilogramforcemillimeters;
            return new Torque(value, TorqueUnit.KilogramForceMillimeter);
        }

        /// <summary>
        ///     Get Torque from KilonewtonCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonCentimeters(double kilonewtoncentimeters)
#else
        public static Torque FromKilonewtonCentimeters(QuantityValue kilonewtoncentimeters)
#endif
        {
            double value = (double) kilonewtoncentimeters;
            return new Torque(value, TorqueUnit.KilonewtonCentimeter);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonMeters(double kilonewtonmeters)
#else
        public static Torque FromKilonewtonMeters(QuantityValue kilonewtonmeters)
#endif
        {
            double value = (double) kilonewtonmeters;
            return new Torque(value, TorqueUnit.KilonewtonMeter);
        }

        /// <summary>
        ///     Get Torque from KilonewtonMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilonewtonMillimeters(double kilonewtonmillimeters)
#else
        public static Torque FromKilonewtonMillimeters(QuantityValue kilonewtonmillimeters)
#endif
        {
            double value = (double) kilonewtonmillimeters;
            return new Torque(value, TorqueUnit.KilonewtonMillimeter);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilopoundForceFeet(double kilopoundforcefeet)
#else
        public static Torque FromKilopoundForceFeet(QuantityValue kilopoundforcefeet)
#endif
        {
            double value = (double) kilopoundforcefeet;
            return new Torque(value, TorqueUnit.KilopoundForceFoot);
        }

        /// <summary>
        ///     Get Torque from KilopoundForceInches.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromKilopoundForceInches(double kilopoundforceinches)
#else
        public static Torque FromKilopoundForceInches(QuantityValue kilopoundforceinches)
#endif
        {
            double value = (double) kilopoundforceinches;
            return new Torque(value, TorqueUnit.KilopoundForceInch);
        }

        /// <summary>
        ///     Get Torque from MeganewtonCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonCentimeters(double meganewtoncentimeters)
#else
        public static Torque FromMeganewtonCentimeters(QuantityValue meganewtoncentimeters)
#endif
        {
            double value = (double) meganewtoncentimeters;
            return new Torque(value, TorqueUnit.MeganewtonCentimeter);
        }

        /// <summary>
        ///     Get Torque from MeganewtonMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonMeters(double meganewtonmeters)
#else
        public static Torque FromMeganewtonMeters(QuantityValue meganewtonmeters)
#endif
        {
            double value = (double) meganewtonmeters;
            return new Torque(value, TorqueUnit.MeganewtonMeter);
        }

        /// <summary>
        ///     Get Torque from MeganewtonMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMeganewtonMillimeters(double meganewtonmillimeters)
#else
        public static Torque FromMeganewtonMillimeters(QuantityValue meganewtonmillimeters)
#endif
        {
            double value = (double) meganewtonmillimeters;
            return new Torque(value, TorqueUnit.MeganewtonMillimeter);
        }

        /// <summary>
        ///     Get Torque from MegapoundForceFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMegapoundForceFeet(double megapoundforcefeet)
#else
        public static Torque FromMegapoundForceFeet(QuantityValue megapoundforcefeet)
#endif
        {
            double value = (double) megapoundforcefeet;
            return new Torque(value, TorqueUnit.MegapoundForceFoot);
        }

        /// <summary>
        ///     Get Torque from MegapoundForceInches.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromMegapoundForceInches(double megapoundforceinches)
#else
        public static Torque FromMegapoundForceInches(QuantityValue megapoundforceinches)
#endif
        {
            double value = (double) megapoundforceinches;
            return new Torque(value, TorqueUnit.MegapoundForceInch);
        }

        /// <summary>
        ///     Get Torque from NewtonCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonCentimeters(double newtoncentimeters)
#else
        public static Torque FromNewtonCentimeters(QuantityValue newtoncentimeters)
#endif
        {
            double value = (double) newtoncentimeters;
            return new Torque(value, TorqueUnit.NewtonCentimeter);
        }

        /// <summary>
        ///     Get Torque from NewtonMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonMeters(double newtonmeters)
#else
        public static Torque FromNewtonMeters(QuantityValue newtonmeters)
#endif
        {
            double value = (double) newtonmeters;
            return new Torque(value, TorqueUnit.NewtonMeter);
        }

        /// <summary>
        ///     Get Torque from NewtonMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromNewtonMillimeters(double newtonmillimeters)
#else
        public static Torque FromNewtonMillimeters(QuantityValue newtonmillimeters)
#endif
        {
            double value = (double) newtonmillimeters;
            return new Torque(value, TorqueUnit.NewtonMillimeter);
        }

        /// <summary>
        ///     Get Torque from PoundForceFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromPoundForceFeet(double poundforcefeet)
#else
        public static Torque FromPoundForceFeet(QuantityValue poundforcefeet)
#endif
        {
            double value = (double) poundforcefeet;
            return new Torque(value, TorqueUnit.PoundForceFoot);
        }

        /// <summary>
        ///     Get Torque from PoundForceInches.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromPoundForceInches(double poundforceinches)
#else
        public static Torque FromPoundForceInches(QuantityValue poundforceinches)
#endif
        {
            double value = (double) poundforceinches;
            return new Torque(value, TorqueUnit.PoundForceInch);
        }

        /// <summary>
        ///     Get Torque from TonneForceCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceCentimeters(double tonneforcecentimeters)
#else
        public static Torque FromTonneForceCentimeters(QuantityValue tonneforcecentimeters)
#endif
        {
            double value = (double) tonneforcecentimeters;
            return new Torque(value, TorqueUnit.TonneForceCentimeter);
        }

        /// <summary>
        ///     Get Torque from TonneForceMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceMeters(double tonneforcemeters)
#else
        public static Torque FromTonneForceMeters(QuantityValue tonneforcemeters)
#endif
        {
            double value = (double) tonneforcemeters;
            return new Torque(value, TorqueUnit.TonneForceMeter);
        }

        /// <summary>
        ///     Get Torque from TonneForceMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Torque FromTonneForceMillimeters(double tonneforcemillimeters)
#else
        public static Torque FromTonneForceMillimeters(QuantityValue tonneforcemillimeters)
#endif
        {
            double value = (double) tonneforcemillimeters;
            return new Torque(value, TorqueUnit.TonneForceMillimeter);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceCentimeters.
        /// </summary>
        public static Torque? FromKilogramForceCentimeters(QuantityValue? kilogramforcecentimeters)
        {
            if (kilogramforcecentimeters.HasValue)
            {
                return FromKilogramForceCentimeters(kilogramforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMeters.
        /// </summary>
        public static Torque? FromKilogramForceMeters(QuantityValue? kilogramforcemeters)
        {
            if (kilogramforcemeters.HasValue)
            {
                return FromKilogramForceMeters(kilogramforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilogramForceMillimeters.
        /// </summary>
        public static Torque? FromKilogramForceMillimeters(QuantityValue? kilogramforcemillimeters)
        {
            if (kilogramforcemillimeters.HasValue)
            {
                return FromKilogramForceMillimeters(kilogramforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonCentimeters.
        /// </summary>
        public static Torque? FromKilonewtonCentimeters(QuantityValue? kilonewtoncentimeters)
        {
            if (kilonewtoncentimeters.HasValue)
            {
                return FromKilonewtonCentimeters(kilonewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMeters.
        /// </summary>
        public static Torque? FromKilonewtonMeters(QuantityValue? kilonewtonmeters)
        {
            if (kilonewtonmeters.HasValue)
            {
                return FromKilonewtonMeters(kilonewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilonewtonMillimeters.
        /// </summary>
        public static Torque? FromKilonewtonMillimeters(QuantityValue? kilonewtonmillimeters)
        {
            if (kilonewtonmillimeters.HasValue)
            {
                return FromKilonewtonMillimeters(kilonewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceFeet.
        /// </summary>
        public static Torque? FromKilopoundForceFeet(QuantityValue? kilopoundforcefeet)
        {
            if (kilopoundforcefeet.HasValue)
            {
                return FromKilopoundForceFeet(kilopoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable KilopoundForceInches.
        /// </summary>
        public static Torque? FromKilopoundForceInches(QuantityValue? kilopoundforceinches)
        {
            if (kilopoundforceinches.HasValue)
            {
                return FromKilopoundForceInches(kilopoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable MeganewtonCentimeters.
        /// </summary>
        public static Torque? FromMeganewtonCentimeters(QuantityValue? meganewtoncentimeters)
        {
            if (meganewtoncentimeters.HasValue)
            {
                return FromMeganewtonCentimeters(meganewtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable MeganewtonMeters.
        /// </summary>
        public static Torque? FromMeganewtonMeters(QuantityValue? meganewtonmeters)
        {
            if (meganewtonmeters.HasValue)
            {
                return FromMeganewtonMeters(meganewtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable MeganewtonMillimeters.
        /// </summary>
        public static Torque? FromMeganewtonMillimeters(QuantityValue? meganewtonmillimeters)
        {
            if (meganewtonmillimeters.HasValue)
            {
                return FromMeganewtonMillimeters(meganewtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable MegapoundForceFeet.
        /// </summary>
        public static Torque? FromMegapoundForceFeet(QuantityValue? megapoundforcefeet)
        {
            if (megapoundforcefeet.HasValue)
            {
                return FromMegapoundForceFeet(megapoundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable MegapoundForceInches.
        /// </summary>
        public static Torque? FromMegapoundForceInches(QuantityValue? megapoundforceinches)
        {
            if (megapoundforceinches.HasValue)
            {
                return FromMegapoundForceInches(megapoundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonCentimeters.
        /// </summary>
        public static Torque? FromNewtonCentimeters(QuantityValue? newtoncentimeters)
        {
            if (newtoncentimeters.HasValue)
            {
                return FromNewtonCentimeters(newtoncentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMeters.
        /// </summary>
        public static Torque? FromNewtonMeters(QuantityValue? newtonmeters)
        {
            if (newtonmeters.HasValue)
            {
                return FromNewtonMeters(newtonmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable NewtonMillimeters.
        /// </summary>
        public static Torque? FromNewtonMillimeters(QuantityValue? newtonmillimeters)
        {
            if (newtonmillimeters.HasValue)
            {
                return FromNewtonMillimeters(newtonmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceFeet.
        /// </summary>
        public static Torque? FromPoundForceFeet(QuantityValue? poundforcefeet)
        {
            if (poundforcefeet.HasValue)
            {
                return FromPoundForceFeet(poundforcefeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable PoundForceInches.
        /// </summary>
        public static Torque? FromPoundForceInches(QuantityValue? poundforceinches)
        {
            if (poundforceinches.HasValue)
            {
                return FromPoundForceInches(poundforceinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceCentimeters.
        /// </summary>
        public static Torque? FromTonneForceCentimeters(QuantityValue? tonneforcecentimeters)
        {
            if (tonneforcecentimeters.HasValue)
            {
                return FromTonneForceCentimeters(tonneforcecentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMeters.
        /// </summary>
        public static Torque? FromTonneForceMeters(QuantityValue? tonneforcemeters)
        {
            if (tonneforcemeters.HasValue)
            {
                return FromTonneForceMeters(tonneforcemeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Torque from nullable TonneForceMillimeters.
        /// </summary>
        public static Torque? FromTonneForceMillimeters(QuantityValue? tonneforcemillimeters)
        {
            if (tonneforcemillimeters.HasValue)
            {
                return FromTonneForceMillimeters(tonneforcemillimeters.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Torque From(double value, TorqueUnit fromUnit)
#else
        public static Torque From(QuantityValue value, TorqueUnit fromUnit)
#endif
        {
            return new Torque((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque? From(QuantityValue? value, TorqueUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Torque((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(TorqueUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          TorqueUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Torque operator -(Torque right)
        {
            return new Torque(-right.Value, right.Unit);
        }

        public static Torque operator +(Torque left, Torque right)
        {
            return new Torque(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Torque operator -(Torque left, Torque right)
        {
            return new Torque(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Torque operator *(double left, Torque right)
        {
            return new Torque(left * right.Value, right.Unit);
        }

        public static Torque operator *(Torque left, double right)
        {
            return new Torque(left.Value * right, left.Unit);
        }

        public static Torque operator /(Torque left, double right)
        {
            return new Torque(left.Value / right, left.Unit);
        }

        public static double operator /(Torque left, Torque right)
        {
            return left.NewtonMeters / right.NewtonMeters;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Torque)) throw new ArgumentException("Expected type Torque.", "obj");
            return CompareTo((Torque) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Torque other)
        {
            return AsBaseUnitNewtonMeters().CompareTo(other.AsBaseUnitNewtonMeters());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Torque left, Torque right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Torque left, Torque right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Torque left, Torque right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Torque left, Torque right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Torque left, Torque right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Torque left, Torque right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitNewtonMeters().Equals(((Torque) obj).AsBaseUnitNewtonMeters());
        }

        /// <summary>
        ///     Compare equality to another Torque by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Torque other, Torque maxError)
        {
            return Math.Abs(AsBaseUnitNewtonMeters() - other.AsBaseUnitNewtonMeters()) <= maxError.AsBaseUnitNewtonMeters();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(TorqueUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitNewtonMeters();

            switch (unit)
            {
                case TorqueUnit.KilogramForceCentimeter: return baseUnitValue*10.1971619222242;
                case TorqueUnit.KilogramForceMeter: return baseUnitValue*0.101971619222242;
                case TorqueUnit.KilogramForceMillimeter: return baseUnitValue*101.971619222242;
                case TorqueUnit.KilonewtonCentimeter: return (baseUnitValue*100) / 1e3d;
                case TorqueUnit.KilonewtonMeter: return (baseUnitValue) / 1e3d;
                case TorqueUnit.KilonewtonMillimeter: return (baseUnitValue*1000) / 1e3d;
                case TorqueUnit.KilopoundForceFoot: return (baseUnitValue*0.737562085483396) / 1e3d;
                case TorqueUnit.KilopoundForceInch: return (baseUnitValue*8.85074502580075) / 1e3d;
                case TorqueUnit.MeganewtonCentimeter: return (baseUnitValue*100) / 1e6d;
                case TorqueUnit.MeganewtonMeter: return (baseUnitValue) / 1e6d;
                case TorqueUnit.MeganewtonMillimeter: return (baseUnitValue*1000) / 1e6d;
                case TorqueUnit.MegapoundForceFoot: return (baseUnitValue*0.737562085483396) / 1e6d;
                case TorqueUnit.MegapoundForceInch: return (baseUnitValue*8.85074502580075) / 1e6d;
                case TorqueUnit.NewtonCentimeter: return baseUnitValue*100;
                case TorqueUnit.NewtonMeter: return baseUnitValue;
                case TorqueUnit.NewtonMillimeter: return baseUnitValue*1000;
                case TorqueUnit.PoundForceFoot: return baseUnitValue*0.737562085483396;
                case TorqueUnit.PoundForceInch: return baseUnitValue*8.85074502580075;
                case TorqueUnit.TonneForceCentimeter: return baseUnitValue*0.0101971619222242;
                case TorqueUnit.TonneForceMeter: return baseUnitValue*0.000101971619222242;
                case TorqueUnit.TonneForceMillimeter: return baseUnitValue*0.101971619222242;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Torque, TorqueUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    TorqueUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromNewtonMeters(x.NewtonMeters + y.NewtonMeters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Torque result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Torque result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Torque);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static TorqueUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static TorqueUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<TorqueUnit>(str.Trim());

            if (unit == TorqueUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized TorqueUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is NewtonMeter
        /// </summary>
        public static TorqueUnit ToStringDefaultUnit { get; set; } = TorqueUnit.NewtonMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(TorqueUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          TorqueUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            TorqueUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            TorqueUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Torque
        /// </summary>
        public static Torque MaxValue => new Torque(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Torque
        /// </summary>
        public static Torque MinValue => new Torque(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitNewtonMeters()
        {
			if (Unit == TorqueUnit.NewtonMeter) { return _value; }

            switch (Unit)
            {
                case TorqueUnit.KilogramForceCentimeter: return _value*0.0980665019960652;
                case TorqueUnit.KilogramForceMeter: return _value*9.80665019960652;
                case TorqueUnit.KilogramForceMillimeter: return _value*0.00980665019960652;
                case TorqueUnit.KilonewtonCentimeter: return (_value*0.01) * 1e3d;
                case TorqueUnit.KilonewtonMeter: return (_value) * 1e3d;
                case TorqueUnit.KilonewtonMillimeter: return (_value*0.001) * 1e3d;
                case TorqueUnit.KilopoundForceFoot: return (_value*1.3558180656) * 1e3d;
                case TorqueUnit.KilopoundForceInch: return (_value*0.1129848388) * 1e3d;
                case TorqueUnit.MeganewtonCentimeter: return (_value*0.01) * 1e6d;
                case TorqueUnit.MeganewtonMeter: return (_value) * 1e6d;
                case TorqueUnit.MeganewtonMillimeter: return (_value*0.001) * 1e6d;
                case TorqueUnit.MegapoundForceFoot: return (_value*1.3558180656) * 1e6d;
                case TorqueUnit.MegapoundForceInch: return (_value*0.1129848388) * 1e6d;
                case TorqueUnit.NewtonCentimeter: return _value*0.01;
                case TorqueUnit.NewtonMeter: return _value;
                case TorqueUnit.NewtonMillimeter: return _value*0.001;
                case TorqueUnit.PoundForceFoot: return _value*1.3558180656;
                case TorqueUnit.PoundForceInch: return _value*0.1129848388;
                case TorqueUnit.TonneForceCentimeter: return _value*98.0665019960652;
                case TorqueUnit.TonneForceMeter: return _value*9806.65019960653;
                case TorqueUnit.TonneForceMillimeter: return _value*9.80665019960652;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(TorqueUnit unit) => Convert.ToDouble(As(unit));
	}
}
