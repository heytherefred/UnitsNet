//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Power
#else
    public partial struct Power : IComparable, IComparable<Power>
#endif
    {
        private readonly decimal _value;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public decimal Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        public PowerUnit Unit { get; }

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Power() : this(0, BaseUnit)
        {
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Power(double watts)
        {
            _value = Convert.ToDecimal(watts);
            Unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Power(decimal numericValue, PowerUnit unit)
        {
            _value = numericValue;
            Unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Power(long watts) : this(Convert.ToDecimal(watts), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Power(decimal watts) : this(Convert.ToDecimal(watts), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Power;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static PowerUnit BaseUnit => PowerUnit.Watt;

        /// <summary>
        ///     All units of measurement for the Power quantity.
        /// </summary>
        public static PowerUnit[] Units { get; } = Enum.GetValues(typeof(PowerUnit)).Cast<PowerUnit>().ToArray();
        /// <summary>
        ///     Get Power in BoilerHorsepower.
        /// </summary>
        public double BoilerHorsepower => As(PowerUnit.BoilerHorsepower);
        /// <summary>
        ///     Get Power in BritishThermalUnitsPerHour.
        /// </summary>
        public double BritishThermalUnitsPerHour => As(PowerUnit.BritishThermalUnitPerHour);
        /// <summary>
        ///     Get Power in ElectricalHorsepower.
        /// </summary>
        public double ElectricalHorsepower => As(PowerUnit.ElectricalHorsepower);
        /// <summary>
        ///     Get Power in Femtowatts.
        /// </summary>
        public double Femtowatts => As(PowerUnit.Femtowatt);
        /// <summary>
        ///     Get Power in Gigawatts.
        /// </summary>
        public double Gigawatts => As(PowerUnit.Gigawatt);
        /// <summary>
        ///     Get Power in HydraulicHorsepower.
        /// </summary>
        public double HydraulicHorsepower => As(PowerUnit.HydraulicHorsepower);
        /// <summary>
        ///     Get Power in KilobritishThermalUnitsPerHour.
        /// </summary>
        public double KilobritishThermalUnitsPerHour => As(PowerUnit.KilobritishThermalUnitPerHour);
        /// <summary>
        ///     Get Power in Kilowatts.
        /// </summary>
        public double Kilowatts => As(PowerUnit.Kilowatt);
        /// <summary>
        ///     Get Power in MechanicalHorsepower.
        /// </summary>
        public double MechanicalHorsepower => As(PowerUnit.MechanicalHorsepower);
        /// <summary>
        ///     Get Power in Megawatts.
        /// </summary>
        public double Megawatts => As(PowerUnit.Megawatt);
        /// <summary>
        ///     Get Power in MetricHorsepower.
        /// </summary>
        public double MetricHorsepower => As(PowerUnit.MetricHorsepower);
        /// <summary>
        ///     Get Power in Microwatts.
        /// </summary>
        public double Microwatts => As(PowerUnit.Microwatt);
        /// <summary>
        ///     Get Power in Milliwatts.
        /// </summary>
        public double Milliwatts => As(PowerUnit.Milliwatt);
        /// <summary>
        ///     Get Power in Nanowatts.
        /// </summary>
        public double Nanowatts => As(PowerUnit.Nanowatt);
        /// <summary>
        ///     Get Power in Petawatts.
        /// </summary>
        public double Petawatts => As(PowerUnit.Petawatt);
        /// <summary>
        ///     Get Power in Picowatts.
        /// </summary>
        public double Picowatts => As(PowerUnit.Picowatt);
        /// <summary>
        ///     Get Power in Terawatts.
        /// </summary>
        public double Terawatts => As(PowerUnit.Terawatt);
        /// <summary>
        ///     Get Power in Watts.
        /// </summary>
        public double Watts => As(PowerUnit.Watt);

        #endregion

        #region Static

        public static Power Zero => new Power(0, BaseUnit);

        /// <summary>
        ///     Get Power from BoilerHorsepower.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromBoilerHorsepower(double boilerhorsepower)
#else
        public static Power FromBoilerHorsepower(QuantityValueDecimal boilerhorsepower)
#endif
        {
            decimal value = (decimal) boilerhorsepower;
            return new Power(value, PowerUnit.BoilerHorsepower);
        }

        /// <summary>
        ///     Get Power from BritishThermalUnitsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromBritishThermalUnitsPerHour(double britishthermalunitsperhour)
#else
        public static Power FromBritishThermalUnitsPerHour(QuantityValueDecimal britishthermalunitsperhour)
#endif
        {
            decimal value = (decimal) britishthermalunitsperhour;
            return new Power(value, PowerUnit.BritishThermalUnitPerHour);
        }

        /// <summary>
        ///     Get Power from ElectricalHorsepower.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromElectricalHorsepower(double electricalhorsepower)
#else
        public static Power FromElectricalHorsepower(QuantityValueDecimal electricalhorsepower)
#endif
        {
            decimal value = (decimal) electricalhorsepower;
            return new Power(value, PowerUnit.ElectricalHorsepower);
        }

        /// <summary>
        ///     Get Power from Femtowatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromFemtowatts(double femtowatts)
#else
        public static Power FromFemtowatts(QuantityValueDecimal femtowatts)
#endif
        {
            decimal value = (decimal) femtowatts;
            return new Power(value, PowerUnit.Femtowatt);
        }

        /// <summary>
        ///     Get Power from Gigawatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromGigawatts(double gigawatts)
#else
        public static Power FromGigawatts(QuantityValueDecimal gigawatts)
#endif
        {
            decimal value = (decimal) gigawatts;
            return new Power(value, PowerUnit.Gigawatt);
        }

        /// <summary>
        ///     Get Power from HydraulicHorsepower.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromHydraulicHorsepower(double hydraulichorsepower)
#else
        public static Power FromHydraulicHorsepower(QuantityValueDecimal hydraulichorsepower)
#endif
        {
            decimal value = (decimal) hydraulichorsepower;
            return new Power(value, PowerUnit.HydraulicHorsepower);
        }

        /// <summary>
        ///     Get Power from KilobritishThermalUnitsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromKilobritishThermalUnitsPerHour(double kilobritishthermalunitsperhour)
#else
        public static Power FromKilobritishThermalUnitsPerHour(QuantityValueDecimal kilobritishthermalunitsperhour)
#endif
        {
            decimal value = (decimal) kilobritishthermalunitsperhour;
            return new Power(value, PowerUnit.KilobritishThermalUnitPerHour);
        }

        /// <summary>
        ///     Get Power from Kilowatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromKilowatts(double kilowatts)
#else
        public static Power FromKilowatts(QuantityValueDecimal kilowatts)
#endif
        {
            decimal value = (decimal) kilowatts;
            return new Power(value, PowerUnit.Kilowatt);
        }

        /// <summary>
        ///     Get Power from MechanicalHorsepower.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMechanicalHorsepower(double mechanicalhorsepower)
#else
        public static Power FromMechanicalHorsepower(QuantityValueDecimal mechanicalhorsepower)
#endif
        {
            decimal value = (decimal) mechanicalhorsepower;
            return new Power(value, PowerUnit.MechanicalHorsepower);
        }

        /// <summary>
        ///     Get Power from Megawatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMegawatts(double megawatts)
#else
        public static Power FromMegawatts(QuantityValueDecimal megawatts)
#endif
        {
            decimal value = (decimal) megawatts;
            return new Power(value, PowerUnit.Megawatt);
        }

        /// <summary>
        ///     Get Power from MetricHorsepower.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMetricHorsepower(double metrichorsepower)
#else
        public static Power FromMetricHorsepower(QuantityValueDecimal metrichorsepower)
#endif
        {
            decimal value = (decimal) metrichorsepower;
            return new Power(value, PowerUnit.MetricHorsepower);
        }

        /// <summary>
        ///     Get Power from Microwatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMicrowatts(double microwatts)
#else
        public static Power FromMicrowatts(QuantityValueDecimal microwatts)
#endif
        {
            decimal value = (decimal) microwatts;
            return new Power(value, PowerUnit.Microwatt);
        }

        /// <summary>
        ///     Get Power from Milliwatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromMilliwatts(double milliwatts)
#else
        public static Power FromMilliwatts(QuantityValueDecimal milliwatts)
#endif
        {
            decimal value = (decimal) milliwatts;
            return new Power(value, PowerUnit.Milliwatt);
        }

        /// <summary>
        ///     Get Power from Nanowatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromNanowatts(double nanowatts)
#else
        public static Power FromNanowatts(QuantityValueDecimal nanowatts)
#endif
        {
            decimal value = (decimal) nanowatts;
            return new Power(value, PowerUnit.Nanowatt);
        }

        /// <summary>
        ///     Get Power from Petawatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromPetawatts(double petawatts)
#else
        public static Power FromPetawatts(QuantityValueDecimal petawatts)
#endif
        {
            decimal value = (decimal) petawatts;
            return new Power(value, PowerUnit.Petawatt);
        }

        /// <summary>
        ///     Get Power from Picowatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromPicowatts(double picowatts)
#else
        public static Power FromPicowatts(QuantityValueDecimal picowatts)
#endif
        {
            decimal value = (decimal) picowatts;
            return new Power(value, PowerUnit.Picowatt);
        }

        /// <summary>
        ///     Get Power from Terawatts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromTerawatts(double terawatts)
#else
        public static Power FromTerawatts(QuantityValueDecimal terawatts)
#endif
        {
            decimal value = (decimal) terawatts;
            return new Power(value, PowerUnit.Terawatt);
        }

        /// <summary>
        ///     Get Power from Watts.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Power FromWatts(double watts)
#else
        public static Power FromWatts(QuantityValueDecimal watts)
#endif
        {
            decimal value = (decimal) watts;
            return new Power(value, PowerUnit.Watt);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Power from nullable BoilerHorsepower.
        /// </summary>
        public static Power? FromBoilerHorsepower(QuantityValueDecimal? boilerhorsepower)
        {
            if (boilerhorsepower.HasValue)
            {
                return FromBoilerHorsepower(boilerhorsepower.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable BritishThermalUnitsPerHour.
        /// </summary>
        public static Power? FromBritishThermalUnitsPerHour(QuantityValueDecimal? britishthermalunitsperhour)
        {
            if (britishthermalunitsperhour.HasValue)
            {
                return FromBritishThermalUnitsPerHour(britishthermalunitsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable ElectricalHorsepower.
        /// </summary>
        public static Power? FromElectricalHorsepower(QuantityValueDecimal? electricalhorsepower)
        {
            if (electricalhorsepower.HasValue)
            {
                return FromElectricalHorsepower(electricalhorsepower.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Femtowatts.
        /// </summary>
        public static Power? FromFemtowatts(QuantityValueDecimal? femtowatts)
        {
            if (femtowatts.HasValue)
            {
                return FromFemtowatts(femtowatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Gigawatts.
        /// </summary>
        public static Power? FromGigawatts(QuantityValueDecimal? gigawatts)
        {
            if (gigawatts.HasValue)
            {
                return FromGigawatts(gigawatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable HydraulicHorsepower.
        /// </summary>
        public static Power? FromHydraulicHorsepower(QuantityValueDecimal? hydraulichorsepower)
        {
            if (hydraulichorsepower.HasValue)
            {
                return FromHydraulicHorsepower(hydraulichorsepower.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable KilobritishThermalUnitsPerHour.
        /// </summary>
        public static Power? FromKilobritishThermalUnitsPerHour(QuantityValueDecimal? kilobritishthermalunitsperhour)
        {
            if (kilobritishthermalunitsperhour.HasValue)
            {
                return FromKilobritishThermalUnitsPerHour(kilobritishthermalunitsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Kilowatts.
        /// </summary>
        public static Power? FromKilowatts(QuantityValueDecimal? kilowatts)
        {
            if (kilowatts.HasValue)
            {
                return FromKilowatts(kilowatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable MechanicalHorsepower.
        /// </summary>
        public static Power? FromMechanicalHorsepower(QuantityValueDecimal? mechanicalhorsepower)
        {
            if (mechanicalhorsepower.HasValue)
            {
                return FromMechanicalHorsepower(mechanicalhorsepower.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Megawatts.
        /// </summary>
        public static Power? FromMegawatts(QuantityValueDecimal? megawatts)
        {
            if (megawatts.HasValue)
            {
                return FromMegawatts(megawatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable MetricHorsepower.
        /// </summary>
        public static Power? FromMetricHorsepower(QuantityValueDecimal? metrichorsepower)
        {
            if (metrichorsepower.HasValue)
            {
                return FromMetricHorsepower(metrichorsepower.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Microwatts.
        /// </summary>
        public static Power? FromMicrowatts(QuantityValueDecimal? microwatts)
        {
            if (microwatts.HasValue)
            {
                return FromMicrowatts(microwatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Milliwatts.
        /// </summary>
        public static Power? FromMilliwatts(QuantityValueDecimal? milliwatts)
        {
            if (milliwatts.HasValue)
            {
                return FromMilliwatts(milliwatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Nanowatts.
        /// </summary>
        public static Power? FromNanowatts(QuantityValueDecimal? nanowatts)
        {
            if (nanowatts.HasValue)
            {
                return FromNanowatts(nanowatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Petawatts.
        /// </summary>
        public static Power? FromPetawatts(QuantityValueDecimal? petawatts)
        {
            if (petawatts.HasValue)
            {
                return FromPetawatts(petawatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Picowatts.
        /// </summary>
        public static Power? FromPicowatts(QuantityValueDecimal? picowatts)
        {
            if (picowatts.HasValue)
            {
                return FromPicowatts(picowatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Terawatts.
        /// </summary>
        public static Power? FromTerawatts(QuantityValueDecimal? terawatts)
        {
            if (terawatts.HasValue)
            {
                return FromTerawatts(terawatts.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Power from nullable Watts.
        /// </summary>
        public static Power? FromWatts(QuantityValueDecimal? watts)
        {
            if (watts.HasValue)
            {
                return FromWatts(watts.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Power From(double value, PowerUnit fromUnit)
#else
        public static Power From(QuantityValueDecimal value, PowerUnit fromUnit)
#endif
        {
            return new Power((decimal)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
        public static Power? From(QuantityValueDecimal? value, PowerUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Power((decimal)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(PowerUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          PowerUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Power operator -(Power right)
        {
            return new Power(-right.Value, right.Unit);
        }

        public static Power operator +(Power left, Power right)
        {
            return new Power(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Power operator -(Power left, Power right)
        {
            return new Power(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Power operator *(decimal left, Power right)
        {
            return new Power(left * right.Value, right.Unit);
        }

        public static Power operator *(Power left, decimal right)
        {
            return new Power(left.Value * right, left.Unit);
        }

        public static Power operator /(Power left, decimal right)
        {
            return new Power(left.Value / right, left.Unit);
        }

        public static double operator /(Power left, Power right)
        {
            return left.Watts / right.Watts;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Power)) throw new ArgumentException("Expected type Power.", "obj");
            return CompareTo((Power) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Power other)
        {
            return AsBaseUnitWatts().CompareTo(other.AsBaseUnitWatts());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Power left, Power right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Power left, Power right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Power left, Power right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Power left, Power right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        public static bool operator ==(Power left, Power right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        public static bool operator !=(Power left, Power right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitWatts().Equals(((Power) obj).AsBaseUnitWatts());
        }

        /// <summary>
        ///     Compare equality to another Power by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Power other, Power maxError)
        {
            return Math.Abs(AsBaseUnitWatts() - other.AsBaseUnitWatts()) <= maxError.AsBaseUnitWatts();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            decimal baseUnitValue = AsBaseUnitWatts();

            switch (unit)
            {
                case PowerUnit.BoilerHorsepower: return Convert.ToDouble(baseUnitValue/9812.5m);
                case PowerUnit.BritishThermalUnitPerHour: return Convert.ToDouble(baseUnitValue/0.293071m);
                case PowerUnit.ElectricalHorsepower: return Convert.ToDouble(baseUnitValue/746m);
                case PowerUnit.Femtowatt: return Convert.ToDouble((baseUnitValue) / 1e-15m);
                case PowerUnit.Gigawatt: return Convert.ToDouble((baseUnitValue) / 1e9m);
                case PowerUnit.HydraulicHorsepower: return Convert.ToDouble(baseUnitValue/745.69988145m);
                case PowerUnit.KilobritishThermalUnitPerHour: return Convert.ToDouble((baseUnitValue/0.293071m) / 1e3m);
                case PowerUnit.Kilowatt: return Convert.ToDouble((baseUnitValue) / 1e3m);
                case PowerUnit.MechanicalHorsepower: return Convert.ToDouble(baseUnitValue/745.69m);
                case PowerUnit.Megawatt: return Convert.ToDouble((baseUnitValue) / 1e6m);
                case PowerUnit.MetricHorsepower: return Convert.ToDouble(baseUnitValue/735.49875m);
                case PowerUnit.Microwatt: return Convert.ToDouble((baseUnitValue) / 1e-6m);
                case PowerUnit.Milliwatt: return Convert.ToDouble((baseUnitValue) / 1e-3m);
                case PowerUnit.Nanowatt: return Convert.ToDouble((baseUnitValue) / 1e-9m);
                case PowerUnit.Petawatt: return Convert.ToDouble((baseUnitValue) / 1e15m);
                case PowerUnit.Picowatt: return Convert.ToDouble((baseUnitValue) / 1e-12m);
                case PowerUnit.Terawatt: return Convert.ToDouble((baseUnitValue) / 1e12m);
                case PowerUnit.Watt: return Convert.ToDouble(baseUnitValue);

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Power Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Power Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Power, PowerUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    PowerUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromWatts(x.Watts + y.Watts));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Power result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Power result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Power);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static PowerUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static PowerUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<PowerUnit>(str.Trim());

            if (unit == PowerUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized PowerUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is Watt
        /// </summary>
        public static PowerUnit ToStringDefaultUnit { get; set; } = PowerUnit.Watt;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(PowerUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          PowerUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            PowerUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            PowerUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Power
        /// </summary>
        public static Power MaxValue => new Power(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Power
        /// </summary>
        public static Power MinValue => new Power(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnitWatts()
        {
			if (Unit == PowerUnit.Watt) { return _value; }

            switch (Unit)
            {
                case PowerUnit.BoilerHorsepower: return Convert.ToDecimal(_value*9812.5m);
                case PowerUnit.BritishThermalUnitPerHour: return Convert.ToDecimal(_value*0.293071m);
                case PowerUnit.ElectricalHorsepower: return Convert.ToDecimal(_value*746m);
                case PowerUnit.Femtowatt: return Convert.ToDecimal((_value) * 1e-15m);
                case PowerUnit.Gigawatt: return Convert.ToDecimal((_value) * 1e9m);
                case PowerUnit.HydraulicHorsepower: return Convert.ToDecimal(_value*745.69988145m);
                case PowerUnit.KilobritishThermalUnitPerHour: return Convert.ToDecimal((_value*0.293071m) * 1e3m);
                case PowerUnit.Kilowatt: return Convert.ToDecimal((_value) * 1e3m);
                case PowerUnit.MechanicalHorsepower: return Convert.ToDecimal(_value*745.69m);
                case PowerUnit.Megawatt: return Convert.ToDecimal((_value) * 1e6m);
                case PowerUnit.MetricHorsepower: return Convert.ToDecimal(_value*735.49875m);
                case PowerUnit.Microwatt: return Convert.ToDecimal((_value) * 1e-6m);
                case PowerUnit.Milliwatt: return Convert.ToDecimal((_value) * 1e-3m);
                case PowerUnit.Nanowatt: return Convert.ToDecimal((_value) * 1e-9m);
                case PowerUnit.Petawatt: return Convert.ToDecimal((_value) * 1e15m);
                case PowerUnit.Picowatt: return Convert.ToDecimal((_value) * 1e-12m);
                case PowerUnit.Terawatt: return Convert.ToDecimal((_value) * 1e12m);
                case PowerUnit.Watt: return Convert.ToDecimal(_value);
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private decimal AsBaseNumericType(PowerUnit unit) => Convert.ToDecimal(As(unit));
	}
}
