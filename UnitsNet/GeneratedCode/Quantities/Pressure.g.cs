//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Pressure
#else
    public partial struct Pressure : IComparable, IComparable<Pressure>
#endif
    {
        private readonly double _value;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        public PressureUnit Unit { get; }

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Pressure() : this(0, BaseUnit)
        {
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Pressure(double pascals)
        {
            _value = Convert.ToDouble(pascals);
            Unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Pressure(double numericValue, PressureUnit unit)
        {
            _value = numericValue;
            Unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Pressure(long pascals) : this(Convert.ToDouble(pascals), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Pressure(decimal pascals) : this(Convert.ToDouble(pascals), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Pressure;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit => PressureUnit.Pascal;

        /// <summary>
        ///     All units of measurement for the Pressure quantity.
        /// </summary>
        public static PressureUnit[] Units { get; } = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().ToArray();
        /// <summary>
        ///     Get Pressure in Atmospheres.
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);
        /// <summary>
        ///     Get Pressure in Bars.
        /// </summary>
        public double Bars => As(PressureUnit.Bar);
        /// <summary>
        ///     Get Pressure in Centibars.
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);
        /// <summary>
        ///     Get Pressure in Decapascals.
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);
        /// <summary>
        ///     Get Pressure in Decibars.
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);
        /// <summary>
        ///     Get Pressure in FeetOfHead.
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);
        /// <summary>
        ///     Get Pressure in Gigapascals.
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);
        /// <summary>
        ///     Get Pressure in Hectopascals.
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);
        /// <summary>
        ///     Get Pressure in InchesOfMercury.
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);
        /// <summary>
        ///     Get Pressure in Kilobars.
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);
        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareCentimeter.
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);
        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMeter.
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);
        /// <summary>
        ///     Get Pressure in KilogramsForcePerSquareMillimeter.
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);
        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareCentimeter.
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);
        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMeter.
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);
        /// <summary>
        ///     Get Pressure in KilonewtonsPerSquareMillimeter.
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);
        /// <summary>
        ///     Get Pressure in Kilopascals.
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);
        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareFoot.
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);
        /// <summary>
        ///     Get Pressure in KilopoundsForcePerSquareInch.
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);
        /// <summary>
        ///     Get Pressure in Megabars.
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);
        /// <summary>
        ///     Get Pressure in Megapascals.
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);
        /// <summary>
        ///     Get Pressure in MetersOfHead.
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);
        /// <summary>
        ///     Get Pressure in Micropascals.
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);
        /// <summary>
        ///     Get Pressure in Millibars.
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);
        /// <summary>
        ///     Get Pressure in MillimetersOfMercury.
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);
        /// <summary>
        ///     Get Pressure in NewtonsPerSquareCentimeter.
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);
        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMeter.
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);
        /// <summary>
        ///     Get Pressure in NewtonsPerSquareMillimeter.
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);
        /// <summary>
        ///     Get Pressure in Pascals.
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);
        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareFoot.
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);
        /// <summary>
        ///     Get Pressure in PoundsForcePerSquareInch.
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);
        /// <summary>
        ///     Get Pressure in Psi.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #215, please use PoundForcePerSquareInch instead")]
        public double Psi => As(PressureUnit.Psi);
        /// <summary>
        ///     Get Pressure in TechnicalAtmospheres.
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);
        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareCentimeter.
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);
        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMeter.
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);
        /// <summary>
        ///     Get Pressure in TonnesForcePerSquareMillimeter.
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);
        /// <summary>
        ///     Get Pressure in Torrs.
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static

        public static Pressure Zero => new Pressure(0, BaseUnit);

        /// <summary>
        ///     Get Pressure from Atmospheres.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromAtmospheres(double atmospheres)
#else
        public static Pressure FromAtmospheres(QuantityValue atmospheres)
#endif
        {
            double value = (double) atmospheres;
            return new Pressure(value, PressureUnit.Atmosphere);
        }

        /// <summary>
        ///     Get Pressure from Bars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromBars(double bars)
#else
        public static Pressure FromBars(QuantityValue bars)
#endif
        {
            double value = (double) bars;
            return new Pressure(value, PressureUnit.Bar);
        }

        /// <summary>
        ///     Get Pressure from Centibars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromCentibars(double centibars)
#else
        public static Pressure FromCentibars(QuantityValue centibars)
#endif
        {
            double value = (double) centibars;
            return new Pressure(value, PressureUnit.Centibar);
        }

        /// <summary>
        ///     Get Pressure from Decapascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecapascals(double decapascals)
#else
        public static Pressure FromDecapascals(QuantityValue decapascals)
#endif
        {
            double value = (double) decapascals;
            return new Pressure(value, PressureUnit.Decapascal);
        }

        /// <summary>
        ///     Get Pressure from Decibars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromDecibars(double decibars)
#else
        public static Pressure FromDecibars(QuantityValue decibars)
#endif
        {
            double value = (double) decibars;
            return new Pressure(value, PressureUnit.Decibar);
        }

        /// <summary>
        ///     Get Pressure from FeetOfHead.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromFeetOfHead(double feetofhead)
#else
        public static Pressure FromFeetOfHead(QuantityValue feetofhead)
#endif
        {
            double value = (double) feetofhead;
            return new Pressure(value, PressureUnit.FootOfHead);
        }

        /// <summary>
        ///     Get Pressure from Gigapascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromGigapascals(double gigapascals)
#else
        public static Pressure FromGigapascals(QuantityValue gigapascals)
#endif
        {
            double value = (double) gigapascals;
            return new Pressure(value, PressureUnit.Gigapascal);
        }

        /// <summary>
        ///     Get Pressure from Hectopascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromHectopascals(double hectopascals)
#else
        public static Pressure FromHectopascals(QuantityValue hectopascals)
#endif
        {
            double value = (double) hectopascals;
            return new Pressure(value, PressureUnit.Hectopascal);
        }

        /// <summary>
        ///     Get Pressure from InchesOfMercury.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromInchesOfMercury(double inchesofmercury)
#else
        public static Pressure FromInchesOfMercury(QuantityValue inchesofmercury)
#endif
        {
            double value = (double) inchesofmercury;
            return new Pressure(value, PressureUnit.InchOfMercury);
        }

        /// <summary>
        ///     Get Pressure from Kilobars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilobars(double kilobars)
#else
        public static Pressure FromKilobars(QuantityValue kilobars)
#endif
        {
            double value = (double) kilobars;
            return new Pressure(value, PressureUnit.Kilobar);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter)
#else
        public static Pressure FromKilogramsForcePerSquareCentimeter(QuantityValue kilogramsforcepersquarecentimeter)
#endif
        {
            double value = (double) kilogramsforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter)
#else
        public static Pressure FromKilogramsForcePerSquareMeter(QuantityValue kilogramsforcepersquaremeter)
#endif
        {
            double value = (double) kilogramsforcepersquaremeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from KilogramsForcePerSquareMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter)
#else
        public static Pressure FromKilogramsForcePerSquareMillimeter(QuantityValue kilogramsforcepersquaremillimeter)
#endif
        {
            double value = (double) kilogramsforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter)
#else
        public static Pressure FromKilonewtonsPerSquareCentimeter(QuantityValue kilonewtonspersquarecentimeter)
#endif
        {
            double value = (double) kilonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter)
#else
        public static Pressure FromKilonewtonsPerSquareMeter(QuantityValue kilonewtonspersquaremeter)
#endif
        {
            double value = (double) kilonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from KilonewtonsPerSquareMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter)
#else
        public static Pressure FromKilonewtonsPerSquareMillimeter(QuantityValue kilonewtonspersquaremillimeter)
#endif
        {
            double value = (double) kilonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Kilopascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopascals(double kilopascals)
#else
        public static Pressure FromKilopascals(QuantityValue kilopascals)
#endif
        {
            double value = (double) kilopascals;
            return new Pressure(value, PressureUnit.Kilopascal);
        }

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareFoot.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot)
#else
        public static Pressure FromKilopoundsForcePerSquareFoot(QuantityValue kilopoundsforcepersquarefoot)
#endif
        {
            double value = (double) kilopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Get Pressure from KilopoundsForcePerSquareInch.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch)
#else
        public static Pressure FromKilopoundsForcePerSquareInch(QuantityValue kilopoundsforcepersquareinch)
#endif
        {
            double value = (double) kilopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareInch);
        }

        /// <summary>
        ///     Get Pressure from Megabars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegabars(double megabars)
#else
        public static Pressure FromMegabars(QuantityValue megabars)
#endif
        {
            double value = (double) megabars;
            return new Pressure(value, PressureUnit.Megabar);
        }

        /// <summary>
        ///     Get Pressure from Megapascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMegapascals(double megapascals)
#else
        public static Pressure FromMegapascals(QuantityValue megapascals)
#endif
        {
            double value = (double) megapascals;
            return new Pressure(value, PressureUnit.Megapascal);
        }

        /// <summary>
        ///     Get Pressure from MetersOfHead.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMetersOfHead(double metersofhead)
#else
        public static Pressure FromMetersOfHead(QuantityValue metersofhead)
#endif
        {
            double value = (double) metersofhead;
            return new Pressure(value, PressureUnit.MeterOfHead);
        }

        /// <summary>
        ///     Get Pressure from Micropascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMicropascals(double micropascals)
#else
        public static Pressure FromMicropascals(QuantityValue micropascals)
#endif
        {
            double value = (double) micropascals;
            return new Pressure(value, PressureUnit.Micropascal);
        }

        /// <summary>
        ///     Get Pressure from Millibars.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillibars(double millibars)
#else
        public static Pressure FromMillibars(QuantityValue millibars)
#endif
        {
            double value = (double) millibars;
            return new Pressure(value, PressureUnit.Millibar);
        }

        /// <summary>
        ///     Get Pressure from MillimetersOfMercury.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury)
#else
        public static Pressure FromMillimetersOfMercury(QuantityValue millimetersofmercury)
#endif
        {
            double value = (double) millimetersofmercury;
            return new Pressure(value, PressureUnit.MillimeterOfMercury);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter)
#else
        public static Pressure FromNewtonsPerSquareCentimeter(QuantityValue newtonspersquarecentimeter)
#endif
        {
            double value = (double) newtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter)
#else
        public static Pressure FromNewtonsPerSquareMeter(QuantityValue newtonspersquaremeter)
#endif
        {
            double value = (double) newtonspersquaremeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from NewtonsPerSquareMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter)
#else
        public static Pressure FromNewtonsPerSquareMillimeter(QuantityValue newtonspersquaremillimeter)
#endif
        {
            double value = (double) newtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Pascals.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPascals(double pascals)
#else
        public static Pressure FromPascals(QuantityValue pascals)
#endif
        {
            double value = (double) pascals;
            return new Pressure(value, PressureUnit.Pascal);
        }

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareFoot.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot)
#else
        public static Pressure FromPoundsForcePerSquareFoot(QuantityValue poundsforcepersquarefoot)
#endif
        {
            double value = (double) poundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Get Pressure from PoundsForcePerSquareInch.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch)
#else
        public static Pressure FromPoundsForcePerSquareInch(QuantityValue poundsforcepersquareinch)
#endif
        {
            double value = (double) poundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PoundForcePerSquareInch);
        }

        /// <summary>
        ///     Get Pressure from Psi.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromPsi(double psi)
#else
        public static Pressure FromPsi(QuantityValue psi)
#endif
        {
            double value = (double) psi;
            return new Pressure(value, PressureUnit.Psi);
        }

        /// <summary>
        ///     Get Pressure from TechnicalAtmospheres.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres)
#else
        public static Pressure FromTechnicalAtmospheres(QuantityValue technicalatmospheres)
#endif
        {
            double value = (double) technicalatmospheres;
            return new Pressure(value, PressureUnit.TechnicalAtmosphere);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter)
#else
        public static Pressure FromTonnesForcePerSquareCentimeter(QuantityValue tonnesforcepersquarecentimeter)
#endif
        {
            double value = (double) tonnesforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter)
#else
        public static Pressure FromTonnesForcePerSquareMeter(QuantityValue tonnesforcepersquaremeter)
#endif
        {
            double value = (double) tonnesforcepersquaremeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMeter);
        }

        /// <summary>
        ///     Get Pressure from TonnesForcePerSquareMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter)
#else
        public static Pressure FromTonnesForcePerSquareMillimeter(QuantityValue tonnesforcepersquaremillimeter)
#endif
        {
            double value = (double) tonnesforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Get Pressure from Torrs.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Pressure FromTorrs(double torrs)
#else
        public static Pressure FromTorrs(QuantityValue torrs)
#endif
        {
            double value = (double) torrs;
            return new Pressure(value, PressureUnit.Torr);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Pressure from nullable Atmospheres.
        /// </summary>
        public static Pressure? FromAtmospheres(QuantityValue? atmospheres)
        {
            if (atmospheres.HasValue)
            {
                return FromAtmospheres(atmospheres.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Bars.
        /// </summary>
        public static Pressure? FromBars(QuantityValue? bars)
        {
            if (bars.HasValue)
            {
                return FromBars(bars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Centibars.
        /// </summary>
        public static Pressure? FromCentibars(QuantityValue? centibars)
        {
            if (centibars.HasValue)
            {
                return FromCentibars(centibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Decapascals.
        /// </summary>
        public static Pressure? FromDecapascals(QuantityValue? decapascals)
        {
            if (decapascals.HasValue)
            {
                return FromDecapascals(decapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Decibars.
        /// </summary>
        public static Pressure? FromDecibars(QuantityValue? decibars)
        {
            if (decibars.HasValue)
            {
                return FromDecibars(decibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable FeetOfHead.
        /// </summary>
        public static Pressure? FromFeetOfHead(QuantityValue? feetofhead)
        {
            if (feetofhead.HasValue)
            {
                return FromFeetOfHead(feetofhead.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Gigapascals.
        /// </summary>
        public static Pressure? FromGigapascals(QuantityValue? gigapascals)
        {
            if (gigapascals.HasValue)
            {
                return FromGigapascals(gigapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Hectopascals.
        /// </summary>
        public static Pressure? FromHectopascals(QuantityValue? hectopascals)
        {
            if (hectopascals.HasValue)
            {
                return FromHectopascals(hectopascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable InchesOfMercury.
        /// </summary>
        public static Pressure? FromInchesOfMercury(QuantityValue? inchesofmercury)
        {
            if (inchesofmercury.HasValue)
            {
                return FromInchesOfMercury(inchesofmercury.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Kilobars.
        /// </summary>
        public static Pressure? FromKilobars(QuantityValue? kilobars)
        {
            if (kilobars.HasValue)
            {
                return FromKilobars(kilobars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilogramsForcePerSquareCentimeter.
        /// </summary>
        public static Pressure? FromKilogramsForcePerSquareCentimeter(QuantityValue? kilogramsforcepersquarecentimeter)
        {
            if (kilogramsforcepersquarecentimeter.HasValue)
            {
                return FromKilogramsForcePerSquareCentimeter(kilogramsforcepersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilogramsForcePerSquareMeter.
        /// </summary>
        public static Pressure? FromKilogramsForcePerSquareMeter(QuantityValue? kilogramsforcepersquaremeter)
        {
            if (kilogramsforcepersquaremeter.HasValue)
            {
                return FromKilogramsForcePerSquareMeter(kilogramsforcepersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilogramsForcePerSquareMillimeter.
        /// </summary>
        public static Pressure? FromKilogramsForcePerSquareMillimeter(QuantityValue? kilogramsforcepersquaremillimeter)
        {
            if (kilogramsforcepersquaremillimeter.HasValue)
            {
                return FromKilogramsForcePerSquareMillimeter(kilogramsforcepersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilonewtonsPerSquareCentimeter.
        /// </summary>
        public static Pressure? FromKilonewtonsPerSquareCentimeter(QuantityValue? kilonewtonspersquarecentimeter)
        {
            if (kilonewtonspersquarecentimeter.HasValue)
            {
                return FromKilonewtonsPerSquareCentimeter(kilonewtonspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilonewtonsPerSquareMeter.
        /// </summary>
        public static Pressure? FromKilonewtonsPerSquareMeter(QuantityValue? kilonewtonspersquaremeter)
        {
            if (kilonewtonspersquaremeter.HasValue)
            {
                return FromKilonewtonsPerSquareMeter(kilonewtonspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilonewtonsPerSquareMillimeter.
        /// </summary>
        public static Pressure? FromKilonewtonsPerSquareMillimeter(QuantityValue? kilonewtonspersquaremillimeter)
        {
            if (kilonewtonspersquaremillimeter.HasValue)
            {
                return FromKilonewtonsPerSquareMillimeter(kilonewtonspersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Kilopascals.
        /// </summary>
        public static Pressure? FromKilopascals(QuantityValue? kilopascals)
        {
            if (kilopascals.HasValue)
            {
                return FromKilopascals(kilopascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilopoundsForcePerSquareFoot.
        /// </summary>
        public static Pressure? FromKilopoundsForcePerSquareFoot(QuantityValue? kilopoundsforcepersquarefoot)
        {
            if (kilopoundsforcepersquarefoot.HasValue)
            {
                return FromKilopoundsForcePerSquareFoot(kilopoundsforcepersquarefoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable KilopoundsForcePerSquareInch.
        /// </summary>
        public static Pressure? FromKilopoundsForcePerSquareInch(QuantityValue? kilopoundsforcepersquareinch)
        {
            if (kilopoundsforcepersquareinch.HasValue)
            {
                return FromKilopoundsForcePerSquareInch(kilopoundsforcepersquareinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Megabars.
        /// </summary>
        public static Pressure? FromMegabars(QuantityValue? megabars)
        {
            if (megabars.HasValue)
            {
                return FromMegabars(megabars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Megapascals.
        /// </summary>
        public static Pressure? FromMegapascals(QuantityValue? megapascals)
        {
            if (megapascals.HasValue)
            {
                return FromMegapascals(megapascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable MetersOfHead.
        /// </summary>
        public static Pressure? FromMetersOfHead(QuantityValue? metersofhead)
        {
            if (metersofhead.HasValue)
            {
                return FromMetersOfHead(metersofhead.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Micropascals.
        /// </summary>
        public static Pressure? FromMicropascals(QuantityValue? micropascals)
        {
            if (micropascals.HasValue)
            {
                return FromMicropascals(micropascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Millibars.
        /// </summary>
        public static Pressure? FromMillibars(QuantityValue? millibars)
        {
            if (millibars.HasValue)
            {
                return FromMillibars(millibars.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable MillimetersOfMercury.
        /// </summary>
        public static Pressure? FromMillimetersOfMercury(QuantityValue? millimetersofmercury)
        {
            if (millimetersofmercury.HasValue)
            {
                return FromMillimetersOfMercury(millimetersofmercury.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable NewtonsPerSquareCentimeter.
        /// </summary>
        public static Pressure? FromNewtonsPerSquareCentimeter(QuantityValue? newtonspersquarecentimeter)
        {
            if (newtonspersquarecentimeter.HasValue)
            {
                return FromNewtonsPerSquareCentimeter(newtonspersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable NewtonsPerSquareMeter.
        /// </summary>
        public static Pressure? FromNewtonsPerSquareMeter(QuantityValue? newtonspersquaremeter)
        {
            if (newtonspersquaremeter.HasValue)
            {
                return FromNewtonsPerSquareMeter(newtonspersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable NewtonsPerSquareMillimeter.
        /// </summary>
        public static Pressure? FromNewtonsPerSquareMillimeter(QuantityValue? newtonspersquaremillimeter)
        {
            if (newtonspersquaremillimeter.HasValue)
            {
                return FromNewtonsPerSquareMillimeter(newtonspersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Pascals.
        /// </summary>
        public static Pressure? FromPascals(QuantityValue? pascals)
        {
            if (pascals.HasValue)
            {
                return FromPascals(pascals.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable PoundsForcePerSquareFoot.
        /// </summary>
        public static Pressure? FromPoundsForcePerSquareFoot(QuantityValue? poundsforcepersquarefoot)
        {
            if (poundsforcepersquarefoot.HasValue)
            {
                return FromPoundsForcePerSquareFoot(poundsforcepersquarefoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable PoundsForcePerSquareInch.
        /// </summary>
        public static Pressure? FromPoundsForcePerSquareInch(QuantityValue? poundsforcepersquareinch)
        {
            if (poundsforcepersquareinch.HasValue)
            {
                return FromPoundsForcePerSquareInch(poundsforcepersquareinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Psi.
        /// </summary>
        public static Pressure? FromPsi(QuantityValue? psi)
        {
            if (psi.HasValue)
            {
                return FromPsi(psi.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable TechnicalAtmospheres.
        /// </summary>
        public static Pressure? FromTechnicalAtmospheres(QuantityValue? technicalatmospheres)
        {
            if (technicalatmospheres.HasValue)
            {
                return FromTechnicalAtmospheres(technicalatmospheres.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable TonnesForcePerSquareCentimeter.
        /// </summary>
        public static Pressure? FromTonnesForcePerSquareCentimeter(QuantityValue? tonnesforcepersquarecentimeter)
        {
            if (tonnesforcepersquarecentimeter.HasValue)
            {
                return FromTonnesForcePerSquareCentimeter(tonnesforcepersquarecentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable TonnesForcePerSquareMeter.
        /// </summary>
        public static Pressure? FromTonnesForcePerSquareMeter(QuantityValue? tonnesforcepersquaremeter)
        {
            if (tonnesforcepersquaremeter.HasValue)
            {
                return FromTonnesForcePerSquareMeter(tonnesforcepersquaremeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable TonnesForcePerSquareMillimeter.
        /// </summary>
        public static Pressure? FromTonnesForcePerSquareMillimeter(QuantityValue? tonnesforcepersquaremillimeter)
        {
            if (tonnesforcepersquaremillimeter.HasValue)
            {
                return FromTonnesForcePerSquareMillimeter(tonnesforcepersquaremillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Pressure from nullable Torrs.
        /// </summary>
        public static Pressure? FromTorrs(QuantityValue? torrs)
        {
            if (torrs.HasValue)
            {
                return FromTorrs(torrs.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Pressure From(double value, PressureUnit fromUnit)
#else
        public static Pressure From(QuantityValue value, PressureUnit fromUnit)
#endif
        {
            return new Pressure((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        public static Pressure? From(QuantityValue? value, PressureUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Pressure((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          PressureUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Pressure operator -(Pressure right)
        {
            return new Pressure(-right.Value, right.Unit);
        }

        public static Pressure operator +(Pressure left, Pressure right)
        {
            return new Pressure(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Pressure operator -(Pressure left, Pressure right)
        {
            return new Pressure(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Pressure operator *(double left, Pressure right)
        {
            return new Pressure(left * right.Value, right.Unit);
        }

        public static Pressure operator *(Pressure left, double right)
        {
            return new Pressure(left.Value * right, left.Unit);
        }

        public static Pressure operator /(Pressure left, double right)
        {
            return new Pressure(left.Value / right, left.Unit);
        }

        public static double operator /(Pressure left, Pressure right)
        {
            return left.Pascals / right.Pascals;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Pressure)) throw new ArgumentException("Expected type Pressure.", "obj");
            return CompareTo((Pressure) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Pressure other)
        {
            return AsBaseUnitPascals().CompareTo(other.AsBaseUnitPascals());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Pressure left, Pressure right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Pressure left, Pressure right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Pressure left, Pressure right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Pressure left, Pressure right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Pressure left, Pressure right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Pressure left, Pressure right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitPascals().Equals(((Pressure) obj).AsBaseUnitPascals());
        }

        /// <summary>
        ///     Compare equality to another Pressure by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Pressure other, Pressure maxError)
        {
            return Math.Abs(AsBaseUnitPascals() - other.AsBaseUnitPascals()) <= maxError.AsBaseUnitPascals();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitPascals();

            switch (unit)
            {
                case PressureUnit.Atmosphere: return baseUnitValue/(1.01325*1e5);
                case PressureUnit.Bar: return baseUnitValue/1e5;
                case PressureUnit.Centibar: return (baseUnitValue/1e5) / 1e-2d;
                case PressureUnit.Decapascal: return (baseUnitValue) / 1e1d;
                case PressureUnit.Decibar: return (baseUnitValue/1e5) / 1e-1d;
                case PressureUnit.FootOfHead: return baseUnitValue*0.000334552565551;
                case PressureUnit.Gigapascal: return (baseUnitValue) / 1e9d;
                case PressureUnit.Hectopascal: return (baseUnitValue) / 1e2d;
                case PressureUnit.InchOfMercury: return baseUnitValue*2.95299830714159e-4;
                case PressureUnit.Kilobar: return (baseUnitValue/1e5) / 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return baseUnitValue/(9.80665*1e4);
                case PressureUnit.KilogramForcePerSquareMeter: return baseUnitValue*0.101971619222242;
                case PressureUnit.KilogramForcePerSquareMillimeter: return baseUnitValue*1.01971619222242E-07;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (baseUnitValue/1e4) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (baseUnitValue/1e6) / 1e3d;
                case PressureUnit.Kilopascal: return (baseUnitValue) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (baseUnitValue*0.020885432426709) / 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (baseUnitValue*0.000145037737730209) / 1e3d;
                case PressureUnit.Megabar: return (baseUnitValue/1e5) / 1e6d;
                case PressureUnit.Megapascal: return (baseUnitValue) / 1e6d;
                case PressureUnit.MeterOfHead: return baseUnitValue*0.0001019977334;
                case PressureUnit.Micropascal: return (baseUnitValue) / 1e-6d;
                case PressureUnit.Millibar: return (baseUnitValue/1e5) / 1e-3d;
                case PressureUnit.MillimeterOfMercury: return baseUnitValue*7.50061561302643e-3;
                case PressureUnit.NewtonPerSquareCentimeter: return baseUnitValue/1e4;
                case PressureUnit.NewtonPerSquareMeter: return baseUnitValue;
                case PressureUnit.NewtonPerSquareMillimeter: return baseUnitValue/1e6;
                case PressureUnit.Pascal: return baseUnitValue;
                case PressureUnit.PoundForcePerSquareFoot: return baseUnitValue*0.020885432426709;
                case PressureUnit.PoundForcePerSquareInch: return baseUnitValue*0.000145037737730209;
                case PressureUnit.Psi: return baseUnitValue/(6.89464975179*1e3);
                case PressureUnit.TechnicalAtmosphere: return baseUnitValue/(9.80680592331*1e4);
                case PressureUnit.TonneForcePerSquareCentimeter: return baseUnitValue*1.01971619222242E-08;
                case PressureUnit.TonneForcePerSquareMeter: return baseUnitValue*0.000101971619222242;
                case PressureUnit.TonneForcePerSquareMillimeter: return baseUnitValue*1.01971619222242E-10;
                case PressureUnit.Torr: return baseUnitValue/(1.3332266752*1e2);

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Pressure, PressureUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    PressureUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromPascals(x.Pascals + y.Pascals));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Pressure result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Pressure result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Pressure);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static PressureUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static PressureUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<PressureUnit>(str.Trim());

            if (unit == PressureUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized PressureUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is Pascal
        /// </summary>
        public static PressureUnit ToStringDefaultUnit { get; set; } = PressureUnit.Pascal;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(PressureUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          PressureUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            PressureUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            PressureUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Pressure
        /// </summary>
        public static Pressure MaxValue => new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Pressure
        /// </summary>
        public static Pressure MinValue => new Pressure(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitPascals()
        {
			if (Unit == PressureUnit.Pascal) { return _value; }

            switch (Unit)
            {
                case PressureUnit.Atmosphere: return _value*1.01325*1e5;
                case PressureUnit.Bar: return _value*1e5;
                case PressureUnit.Centibar: return (_value*1e5) * 1e-2d;
                case PressureUnit.Decapascal: return (_value) * 1e1d;
                case PressureUnit.Decibar: return (_value*1e5) * 1e-1d;
                case PressureUnit.FootOfHead: return _value*2989.0669;
                case PressureUnit.Gigapascal: return (_value) * 1e9d;
                case PressureUnit.Hectopascal: return (_value) * 1e2d;
                case PressureUnit.InchOfMercury: return _value/2.95299830714159e-4;
                case PressureUnit.Kilobar: return (_value*1e5) * 1e3d;
                case PressureUnit.KilogramForcePerSquareCentimeter: return _value*9.80665*1e4;
                case PressureUnit.KilogramForcePerSquareMeter: return _value*9.80665019960652;
                case PressureUnit.KilogramForcePerSquareMillimeter: return _value*9806650.19960652;
                case PressureUnit.KilonewtonPerSquareCentimeter: return (_value*1e4) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMeter: return (_value) * 1e3d;
                case PressureUnit.KilonewtonPerSquareMillimeter: return (_value*1e6) * 1e3d;
                case PressureUnit.Kilopascal: return (_value) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareFoot: return (_value*47.8802631216372) * 1e3d;
                case PressureUnit.KilopoundForcePerSquareInch: return (_value*6894.75729316836) * 1e3d;
                case PressureUnit.Megabar: return (_value*1e5) * 1e6d;
                case PressureUnit.Megapascal: return (_value) * 1e6d;
                case PressureUnit.MeterOfHead: return _value*9804.139432;
                case PressureUnit.Micropascal: return (_value) * 1e-6d;
                case PressureUnit.Millibar: return (_value*1e5) * 1e-3d;
                case PressureUnit.MillimeterOfMercury: return _value/7.50061561302643e-3;
                case PressureUnit.NewtonPerSquareCentimeter: return _value*1e4;
                case PressureUnit.NewtonPerSquareMeter: return _value;
                case PressureUnit.NewtonPerSquareMillimeter: return _value*1e6;
                case PressureUnit.Pascal: return _value;
                case PressureUnit.PoundForcePerSquareFoot: return _value*47.8802631216372;
                case PressureUnit.PoundForcePerSquareInch: return _value*6894.75729316836;
                case PressureUnit.Psi: return _value*6.89464975179*1e3;
                case PressureUnit.TechnicalAtmosphere: return _value*9.80680592331*1e4;
                case PressureUnit.TonneForcePerSquareCentimeter: return _value*98066501.9960652;
                case PressureUnit.TonneForcePerSquareMeter: return _value*9806.65019960653;
                case PressureUnit.TonneForcePerSquareMillimeter: return _value*9806650199.60653;
                case PressureUnit.Torr: return _value*1.3332266752*1e2;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(PressureUnit unit) => Convert.ToDouble(As(unit));
	}
}
