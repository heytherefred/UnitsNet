//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Density
#else
    public partial struct Density : IComparable, IComparable<Density>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DensityUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public DensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Density()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Density(double kilogramspercubicmeter)
        {
            _value = Convert.ToDouble(kilogramspercubicmeter);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Density(double numericValue, DensityUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit KilogramPerCubicMeter.
        /// </summary>
        /// <param name="kilogramspercubicmeter">Value assuming base unit KilogramPerCubicMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Density(long kilogramspercubicmeter) : this(Convert.ToDouble(kilogramspercubicmeter), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit KilogramPerCubicMeter.
        /// </summary>
        /// <param name="kilogramspercubicmeter">Value assuming base unit KilogramPerCubicMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Density(decimal kilogramspercubicmeter) : this(Convert.ToDouble(kilogramspercubicmeter), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Density;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit => DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        ///     All units of measurement for the Density quantity.
        /// </summary>
        public static DensityUnit[] Units { get; } = Enum.GetValues(typeof(DensityUnit)).Cast<DensityUnit>().ToArray();
        /// <summary>
        ///     Get Density in CentigramsPerDeciLiter.
        /// </summary>
        public double CentigramsPerDeciLiter => As(DensityUnit.CentigramPerDeciliter);
        /// <summary>
        ///     Get Density in CentigramsPerLiter.
        /// </summary>
        public double CentigramsPerLiter => As(DensityUnit.CentigramPerLiter);
        /// <summary>
        ///     Get Density in CentigramsPerMilliliter.
        /// </summary>
        public double CentigramsPerMilliliter => As(DensityUnit.CentigramPerMilliliter);
        /// <summary>
        ///     Get Density in DecigramsPerDeciLiter.
        /// </summary>
        public double DecigramsPerDeciLiter => As(DensityUnit.DecigramPerDeciliter);
        /// <summary>
        ///     Get Density in DecigramsPerLiter.
        /// </summary>
        public double DecigramsPerLiter => As(DensityUnit.DecigramPerLiter);
        /// <summary>
        ///     Get Density in DecigramsPerMilliliter.
        /// </summary>
        public double DecigramsPerMilliliter => As(DensityUnit.DecigramPerMilliliter);
        /// <summary>
        ///     Get Density in GramsPerCubicCentimeter.
        /// </summary>
        public double GramsPerCubicCentimeter => As(DensityUnit.GramPerCubicCentimeter);
        /// <summary>
        ///     Get Density in GramsPerCubicMeter.
        /// </summary>
        public double GramsPerCubicMeter => As(DensityUnit.GramPerCubicMeter);
        /// <summary>
        ///     Get Density in GramsPerCubicMillimeter.
        /// </summary>
        public double GramsPerCubicMillimeter => As(DensityUnit.GramPerCubicMillimeter);
        /// <summary>
        ///     Get Density in GramsPerDeciLiter.
        /// </summary>
        public double GramsPerDeciLiter => As(DensityUnit.GramPerDeciliter);
        /// <summary>
        ///     Get Density in GramsPerLiter.
        /// </summary>
        public double GramsPerLiter => As(DensityUnit.GramPerLiter);
        /// <summary>
        ///     Get Density in GramsPerMilliliter.
        /// </summary>
        public double GramsPerMilliliter => As(DensityUnit.GramPerMilliliter);
        /// <summary>
        ///     Get Density in KilogramsPerCubicCentimeter.
        /// </summary>
        public double KilogramsPerCubicCentimeter => As(DensityUnit.KilogramPerCubicCentimeter);
        /// <summary>
        ///     Get Density in KilogramsPerCubicMeter.
        /// </summary>
        public double KilogramsPerCubicMeter => As(DensityUnit.KilogramPerCubicMeter);
        /// <summary>
        ///     Get Density in KilogramsPerCubicMillimeter.
        /// </summary>
        public double KilogramsPerCubicMillimeter => As(DensityUnit.KilogramPerCubicMillimeter);
        /// <summary>
        ///     Get Density in KilopoundsPerCubicFoot.
        /// </summary>
        public double KilopoundsPerCubicFoot => As(DensityUnit.KilopoundPerCubicFoot);
        /// <summary>
        ///     Get Density in KilopoundsPerCubicInch.
        /// </summary>
        public double KilopoundsPerCubicInch => As(DensityUnit.KilopoundPerCubicInch);
        /// <summary>
        ///     Get Density in MicrogramsPerDeciLiter.
        /// </summary>
        public double MicrogramsPerDeciLiter => As(DensityUnit.MicrogramPerDeciliter);
        /// <summary>
        ///     Get Density in MicrogramsPerLiter.
        /// </summary>
        public double MicrogramsPerLiter => As(DensityUnit.MicrogramPerLiter);
        /// <summary>
        ///     Get Density in MicrogramsPerMilliliter.
        /// </summary>
        public double MicrogramsPerMilliliter => As(DensityUnit.MicrogramPerMilliliter);
        /// <summary>
        ///     Get Density in MilligramsPerDeciLiter.
        /// </summary>
        public double MilligramsPerDeciLiter => As(DensityUnit.MilligramPerDeciliter);
        /// <summary>
        ///     Get Density in MilligramsPerLiter.
        /// </summary>
        public double MilligramsPerLiter => As(DensityUnit.MilligramPerLiter);
        /// <summary>
        ///     Get Density in MilligramsPerMilliliter.
        /// </summary>
        public double MilligramsPerMilliliter => As(DensityUnit.MilligramPerMilliliter);
        /// <summary>
        ///     Get Density in NanogramsPerDeciLiter.
        /// </summary>
        public double NanogramsPerDeciLiter => As(DensityUnit.NanogramPerDeciliter);
        /// <summary>
        ///     Get Density in NanogramsPerLiter.
        /// </summary>
        public double NanogramsPerLiter => As(DensityUnit.NanogramPerLiter);
        /// <summary>
        ///     Get Density in NanogramsPerMilliliter.
        /// </summary>
        public double NanogramsPerMilliliter => As(DensityUnit.NanogramPerMilliliter);
        /// <summary>
        ///     Get Density in PicogramsPerDeciLiter.
        /// </summary>
        public double PicogramsPerDeciLiter => As(DensityUnit.PicogramPerDeciliter);
        /// <summary>
        ///     Get Density in PicogramsPerLiter.
        /// </summary>
        public double PicogramsPerLiter => As(DensityUnit.PicogramPerLiter);
        /// <summary>
        ///     Get Density in PicogramsPerMilliliter.
        /// </summary>
        public double PicogramsPerMilliliter => As(DensityUnit.PicogramPerMilliliter);
        /// <summary>
        ///     Get Density in PoundsPerCubicFoot.
        /// </summary>
        public double PoundsPerCubicFoot => As(DensityUnit.PoundPerCubicFoot);
        /// <summary>
        ///     Get Density in PoundsPerCubicInch.
        /// </summary>
        public double PoundsPerCubicInch => As(DensityUnit.PoundPerCubicInch);
        /// <summary>
        ///     Get Density in SlugsPerCubicFoot.
        /// </summary>
        public double SlugsPerCubicFoot => As(DensityUnit.SlugPerCubicFoot);
        /// <summary>
        ///     Get Density in TonnesPerCubicCentimeter.
        /// </summary>
        public double TonnesPerCubicCentimeter => As(DensityUnit.TonnePerCubicCentimeter);
        /// <summary>
        ///     Get Density in TonnesPerCubicMeter.
        /// </summary>
        public double TonnesPerCubicMeter => As(DensityUnit.TonnePerCubicMeter);
        /// <summary>
        ///     Get Density in TonnesPerCubicMillimeter.
        /// </summary>
        public double TonnesPerCubicMillimeter => As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static

        public static Density Zero => new Density(0, BaseUnit);

        /// <summary>
        ///     Get Density from CentigramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerDeciLiter(double centigramsperdeciliter)
#else
        public static Density FromCentigramsPerDeciLiter(QuantityValue centigramsperdeciliter)
#endif
        {
            double value = (double) centigramsperdeciliter;
            return new Density(value, DensityUnit.CentigramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from CentigramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerLiter(double centigramsperliter)
#else
        public static Density FromCentigramsPerLiter(QuantityValue centigramsperliter)
#endif
        {
            double value = (double) centigramsperliter;
            return new Density(value, DensityUnit.CentigramPerLiter);
        }

        /// <summary>
        ///     Get Density from CentigramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromCentigramsPerMilliliter(double centigramspermilliliter)
#else
        public static Density FromCentigramsPerMilliliter(QuantityValue centigramspermilliliter)
#endif
        {
            double value = (double) centigramspermilliliter;
            return new Density(value, DensityUnit.CentigramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerDeciLiter(double decigramsperdeciliter)
#else
        public static Density FromDecigramsPerDeciLiter(QuantityValue decigramsperdeciliter)
#endif
        {
            double value = (double) decigramsperdeciliter;
            return new Density(value, DensityUnit.DecigramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerLiter(double decigramsperliter)
#else
        public static Density FromDecigramsPerLiter(QuantityValue decigramsperliter)
#endif
        {
            double value = (double) decigramsperliter;
            return new Density(value, DensityUnit.DecigramPerLiter);
        }

        /// <summary>
        ///     Get Density from DecigramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromDecigramsPerMilliliter(double decigramspermilliliter)
#else
        public static Density FromDecigramsPerMilliliter(QuantityValue decigramspermilliliter)
#endif
        {
            double value = (double) decigramspermilliliter;
            return new Density(value, DensityUnit.DecigramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicCentimeter(double gramspercubiccentimeter)
#else
        public static Density FromGramsPerCubicCentimeter(QuantityValue gramspercubiccentimeter)
#endif
        {
            double value = (double) gramspercubiccentimeter;
            return new Density(value, DensityUnit.GramPerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMeter(double gramspercubicmeter)
#else
        public static Density FromGramsPerCubicMeter(QuantityValue gramspercubicmeter)
#endif
        {
            double value = (double) gramspercubicmeter;
            return new Density(value, DensityUnit.GramPerCubicMeter);
        }

        /// <summary>
        ///     Get Density from GramsPerCubicMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerCubicMillimeter(double gramspercubicmillimeter)
#else
        public static Density FromGramsPerCubicMillimeter(QuantityValue gramspercubicmillimeter)
#endif
        {
            double value = (double) gramspercubicmillimeter;
            return new Density(value, DensityUnit.GramPerCubicMillimeter);
        }

        /// <summary>
        ///     Get Density from GramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerDeciLiter(double gramsperdeciliter)
#else
        public static Density FromGramsPerDeciLiter(QuantityValue gramsperdeciliter)
#endif
        {
            double value = (double) gramsperdeciliter;
            return new Density(value, DensityUnit.GramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from GramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerLiter(double gramsperliter)
#else
        public static Density FromGramsPerLiter(QuantityValue gramsperliter)
#endif
        {
            double value = (double) gramsperliter;
            return new Density(value, DensityUnit.GramPerLiter);
        }

        /// <summary>
        ///     Get Density from GramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromGramsPerMilliliter(double gramspermilliliter)
#else
        public static Density FromGramsPerMilliliter(QuantityValue gramspermilliliter)
#endif
        {
            double value = (double) gramspermilliliter;
            return new Density(value, DensityUnit.GramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter)
#else
        public static Density FromKilogramsPerCubicCentimeter(QuantityValue kilogramspercubiccentimeter)
#endif
        {
            double value = (double) kilogramspercubiccentimeter;
            return new Density(value, DensityUnit.KilogramPerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMeter(double kilogramspercubicmeter)
#else
        public static Density FromKilogramsPerCubicMeter(QuantityValue kilogramspercubicmeter)
#endif
        {
            double value = (double) kilogramspercubicmeter;
            return new Density(value, DensityUnit.KilogramPerCubicMeter);
        }

        /// <summary>
        ///     Get Density from KilogramsPerCubicMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter)
#else
        public static Density FromKilogramsPerCubicMillimeter(QuantityValue kilogramspercubicmillimeter)
#endif
        {
            double value = (double) kilogramspercubicmillimeter;
            return new Density(value, DensityUnit.KilogramPerCubicMillimeter);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicFoot.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot)
#else
        public static Density FromKilopoundsPerCubicFoot(QuantityValue kilopoundspercubicfoot)
#endif
        {
            double value = (double) kilopoundspercubicfoot;
            return new Density(value, DensityUnit.KilopoundPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from KilopoundsPerCubicInch.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromKilopoundsPerCubicInch(double kilopoundspercubicinch)
#else
        public static Density FromKilopoundsPerCubicInch(QuantityValue kilopoundspercubicinch)
#endif
        {
            double value = (double) kilopoundspercubicinch;
            return new Density(value, DensityUnit.KilopoundPerCubicInch);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerDeciLiter(double microgramsperdeciliter)
#else
        public static Density FromMicrogramsPerDeciLiter(QuantityValue microgramsperdeciliter)
#endif
        {
            double value = (double) microgramsperdeciliter;
            return new Density(value, DensityUnit.MicrogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerLiter(double microgramsperliter)
#else
        public static Density FromMicrogramsPerLiter(QuantityValue microgramsperliter)
#endif
        {
            double value = (double) microgramsperliter;
            return new Density(value, DensityUnit.MicrogramPerLiter);
        }

        /// <summary>
        ///     Get Density from MicrogramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMicrogramsPerMilliliter(double microgramspermilliliter)
#else
        public static Density FromMicrogramsPerMilliliter(QuantityValue microgramspermilliliter)
#endif
        {
            double value = (double) microgramspermilliliter;
            return new Density(value, DensityUnit.MicrogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerDeciLiter(double milligramsperdeciliter)
#else
        public static Density FromMilligramsPerDeciLiter(QuantityValue milligramsperdeciliter)
#endif
        {
            double value = (double) milligramsperdeciliter;
            return new Density(value, DensityUnit.MilligramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerLiter(double milligramsperliter)
#else
        public static Density FromMilligramsPerLiter(QuantityValue milligramsperliter)
#endif
        {
            double value = (double) milligramsperliter;
            return new Density(value, DensityUnit.MilligramPerLiter);
        }

        /// <summary>
        ///     Get Density from MilligramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromMilligramsPerMilliliter(double milligramspermilliliter)
#else
        public static Density FromMilligramsPerMilliliter(QuantityValue milligramspermilliliter)
#endif
        {
            double value = (double) milligramspermilliliter;
            return new Density(value, DensityUnit.MilligramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerDeciLiter(double nanogramsperdeciliter)
#else
        public static Density FromNanogramsPerDeciLiter(QuantityValue nanogramsperdeciliter)
#endif
        {
            double value = (double) nanogramsperdeciliter;
            return new Density(value, DensityUnit.NanogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerLiter(double nanogramsperliter)
#else
        public static Density FromNanogramsPerLiter(QuantityValue nanogramsperliter)
#endif
        {
            double value = (double) nanogramsperliter;
            return new Density(value, DensityUnit.NanogramPerLiter);
        }

        /// <summary>
        ///     Get Density from NanogramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromNanogramsPerMilliliter(double nanogramspermilliliter)
#else
        public static Density FromNanogramsPerMilliliter(QuantityValue nanogramspermilliliter)
#endif
        {
            double value = (double) nanogramspermilliliter;
            return new Density(value, DensityUnit.NanogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerDeciLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerDeciLiter(double picogramsperdeciliter)
#else
        public static Density FromPicogramsPerDeciLiter(QuantityValue picogramsperdeciliter)
#endif
        {
            double value = (double) picogramsperdeciliter;
            return new Density(value, DensityUnit.PicogramPerDeciliter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerLiter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerLiter(double picogramsperliter)
#else
        public static Density FromPicogramsPerLiter(QuantityValue picogramsperliter)
#endif
        {
            double value = (double) picogramsperliter;
            return new Density(value, DensityUnit.PicogramPerLiter);
        }

        /// <summary>
        ///     Get Density from PicogramsPerMilliliter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPicogramsPerMilliliter(double picogramspermilliliter)
#else
        public static Density FromPicogramsPerMilliliter(QuantityValue picogramspermilliliter)
#endif
        {
            double value = (double) picogramspermilliliter;
            return new Density(value, DensityUnit.PicogramPerMilliliter);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicFoot.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicFoot(double poundspercubicfoot)
#else
        public static Density FromPoundsPerCubicFoot(QuantityValue poundspercubicfoot)
#endif
        {
            double value = (double) poundspercubicfoot;
            return new Density(value, DensityUnit.PoundPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from PoundsPerCubicInch.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromPoundsPerCubicInch(double poundspercubicinch)
#else
        public static Density FromPoundsPerCubicInch(QuantityValue poundspercubicinch)
#endif
        {
            double value = (double) poundspercubicinch;
            return new Density(value, DensityUnit.PoundPerCubicInch);
        }

        /// <summary>
        ///     Get Density from SlugsPerCubicFoot.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromSlugsPerCubicFoot(double slugspercubicfoot)
#else
        public static Density FromSlugsPerCubicFoot(QuantityValue slugspercubicfoot)
#endif
        {
            double value = (double) slugspercubicfoot;
            return new Density(value, DensityUnit.SlugPerCubicFoot);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicCentimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter)
#else
        public static Density FromTonnesPerCubicCentimeter(QuantityValue tonnespercubiccentimeter)
#endif
        {
            double value = (double) tonnespercubiccentimeter;
            return new Density(value, DensityUnit.TonnePerCubicCentimeter);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMeter(double tonnespercubicmeter)
#else
        public static Density FromTonnesPerCubicMeter(QuantityValue tonnespercubicmeter)
#endif
        {
            double value = (double) tonnespercubicmeter;
            return new Density(value, DensityUnit.TonnePerCubicMeter);
        }

        /// <summary>
        ///     Get Density from TonnesPerCubicMillimeter.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Density FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter)
#else
        public static Density FromTonnesPerCubicMillimeter(QuantityValue tonnespercubicmillimeter)
#endif
        {
            double value = (double) tonnespercubicmillimeter;
            return new Density(value, DensityUnit.TonnePerCubicMillimeter);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerDeciLiter.
        /// </summary>
        public static Density? FromCentigramsPerDeciLiter(QuantityValue? centigramsperdeciliter)
        {
            if (centigramsperdeciliter.HasValue)
            {
                return FromCentigramsPerDeciLiter(centigramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerLiter.
        /// </summary>
        public static Density? FromCentigramsPerLiter(QuantityValue? centigramsperliter)
        {
            if (centigramsperliter.HasValue)
            {
                return FromCentigramsPerLiter(centigramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable CentigramsPerMilliliter.
        /// </summary>
        public static Density? FromCentigramsPerMilliliter(QuantityValue? centigramspermilliliter)
        {
            if (centigramspermilliliter.HasValue)
            {
                return FromCentigramsPerMilliliter(centigramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerDeciLiter.
        /// </summary>
        public static Density? FromDecigramsPerDeciLiter(QuantityValue? decigramsperdeciliter)
        {
            if (decigramsperdeciliter.HasValue)
            {
                return FromDecigramsPerDeciLiter(decigramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerLiter.
        /// </summary>
        public static Density? FromDecigramsPerLiter(QuantityValue? decigramsperliter)
        {
            if (decigramsperliter.HasValue)
            {
                return FromDecigramsPerLiter(decigramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable DecigramsPerMilliliter.
        /// </summary>
        public static Density? FromDecigramsPerMilliliter(QuantityValue? decigramspermilliliter)
        {
            if (decigramspermilliliter.HasValue)
            {
                return FromDecigramsPerMilliliter(decigramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromGramsPerCubicCentimeter(QuantityValue? gramspercubiccentimeter)
        {
            if (gramspercubiccentimeter.HasValue)
            {
                return FromGramsPerCubicCentimeter(gramspercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMeter.
        /// </summary>
        public static Density? FromGramsPerCubicMeter(QuantityValue? gramspercubicmeter)
        {
            if (gramspercubicmeter.HasValue)
            {
                return FromGramsPerCubicMeter(gramspercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromGramsPerCubicMillimeter(QuantityValue? gramspercubicmillimeter)
        {
            if (gramspercubicmillimeter.HasValue)
            {
                return FromGramsPerCubicMillimeter(gramspercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerDeciLiter.
        /// </summary>
        public static Density? FromGramsPerDeciLiter(QuantityValue? gramsperdeciliter)
        {
            if (gramsperdeciliter.HasValue)
            {
                return FromGramsPerDeciLiter(gramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerLiter.
        /// </summary>
        public static Density? FromGramsPerLiter(QuantityValue? gramsperliter)
        {
            if (gramsperliter.HasValue)
            {
                return FromGramsPerLiter(gramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable GramsPerMilliliter.
        /// </summary>
        public static Density? FromGramsPerMilliliter(QuantityValue? gramspermilliliter)
        {
            if (gramspermilliliter.HasValue)
            {
                return FromGramsPerMilliliter(gramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicCentimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicCentimeter(QuantityValue? kilogramspercubiccentimeter)
        {
            if (kilogramspercubiccentimeter.HasValue)
            {
                return FromKilogramsPerCubicCentimeter(kilogramspercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMeter(QuantityValue? kilogramspercubicmeter)
        {
            if (kilogramspercubicmeter.HasValue)
            {
                return FromKilogramsPerCubicMeter(kilogramspercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilogramsPerCubicMillimeter.
        /// </summary>
        public static Density? FromKilogramsPerCubicMillimeter(QuantityValue? kilogramspercubicmillimeter)
        {
            if (kilogramspercubicmillimeter.HasValue)
            {
                return FromKilogramsPerCubicMillimeter(kilogramspercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicFoot.
        /// </summary>
        public static Density? FromKilopoundsPerCubicFoot(QuantityValue? kilopoundspercubicfoot)
        {
            if (kilopoundspercubicfoot.HasValue)
            {
                return FromKilopoundsPerCubicFoot(kilopoundspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable KilopoundsPerCubicInch.
        /// </summary>
        public static Density? FromKilopoundsPerCubicInch(QuantityValue? kilopoundspercubicinch)
        {
            if (kilopoundspercubicinch.HasValue)
            {
                return FromKilopoundsPerCubicInch(kilopoundspercubicinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerDeciLiter.
        /// </summary>
        public static Density? FromMicrogramsPerDeciLiter(QuantityValue? microgramsperdeciliter)
        {
            if (microgramsperdeciliter.HasValue)
            {
                return FromMicrogramsPerDeciLiter(microgramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerLiter.
        /// </summary>
        public static Density? FromMicrogramsPerLiter(QuantityValue? microgramsperliter)
        {
            if (microgramsperliter.HasValue)
            {
                return FromMicrogramsPerLiter(microgramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MicrogramsPerMilliliter.
        /// </summary>
        public static Density? FromMicrogramsPerMilliliter(QuantityValue? microgramspermilliliter)
        {
            if (microgramspermilliliter.HasValue)
            {
                return FromMicrogramsPerMilliliter(microgramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerDeciLiter.
        /// </summary>
        public static Density? FromMilligramsPerDeciLiter(QuantityValue? milligramsperdeciliter)
        {
            if (milligramsperdeciliter.HasValue)
            {
                return FromMilligramsPerDeciLiter(milligramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerLiter.
        /// </summary>
        public static Density? FromMilligramsPerLiter(QuantityValue? milligramsperliter)
        {
            if (milligramsperliter.HasValue)
            {
                return FromMilligramsPerLiter(milligramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable MilligramsPerMilliliter.
        /// </summary>
        public static Density? FromMilligramsPerMilliliter(QuantityValue? milligramspermilliliter)
        {
            if (milligramspermilliliter.HasValue)
            {
                return FromMilligramsPerMilliliter(milligramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerDeciLiter.
        /// </summary>
        public static Density? FromNanogramsPerDeciLiter(QuantityValue? nanogramsperdeciliter)
        {
            if (nanogramsperdeciliter.HasValue)
            {
                return FromNanogramsPerDeciLiter(nanogramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerLiter.
        /// </summary>
        public static Density? FromNanogramsPerLiter(QuantityValue? nanogramsperliter)
        {
            if (nanogramsperliter.HasValue)
            {
                return FromNanogramsPerLiter(nanogramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable NanogramsPerMilliliter.
        /// </summary>
        public static Density? FromNanogramsPerMilliliter(QuantityValue? nanogramspermilliliter)
        {
            if (nanogramspermilliliter.HasValue)
            {
                return FromNanogramsPerMilliliter(nanogramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerDeciLiter.
        /// </summary>
        public static Density? FromPicogramsPerDeciLiter(QuantityValue? picogramsperdeciliter)
        {
            if (picogramsperdeciliter.HasValue)
            {
                return FromPicogramsPerDeciLiter(picogramsperdeciliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerLiter.
        /// </summary>
        public static Density? FromPicogramsPerLiter(QuantityValue? picogramsperliter)
        {
            if (picogramsperliter.HasValue)
            {
                return FromPicogramsPerLiter(picogramsperliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PicogramsPerMilliliter.
        /// </summary>
        public static Density? FromPicogramsPerMilliliter(QuantityValue? picogramspermilliliter)
        {
            if (picogramspermilliliter.HasValue)
            {
                return FromPicogramsPerMilliliter(picogramspermilliliter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicFoot.
        /// </summary>
        public static Density? FromPoundsPerCubicFoot(QuantityValue? poundspercubicfoot)
        {
            if (poundspercubicfoot.HasValue)
            {
                return FromPoundsPerCubicFoot(poundspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable PoundsPerCubicInch.
        /// </summary>
        public static Density? FromPoundsPerCubicInch(QuantityValue? poundspercubicinch)
        {
            if (poundspercubicinch.HasValue)
            {
                return FromPoundsPerCubicInch(poundspercubicinch.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable SlugsPerCubicFoot.
        /// </summary>
        public static Density? FromSlugsPerCubicFoot(QuantityValue? slugspercubicfoot)
        {
            if (slugspercubicfoot.HasValue)
            {
                return FromSlugsPerCubicFoot(slugspercubicfoot.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicCentimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicCentimeter(QuantityValue? tonnespercubiccentimeter)
        {
            if (tonnespercubiccentimeter.HasValue)
            {
                return FromTonnesPerCubicCentimeter(tonnespercubiccentimeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMeter(QuantityValue? tonnespercubicmeter)
        {
            if (tonnespercubicmeter.HasValue)
            {
                return FromTonnesPerCubicMeter(tonnespercubicmeter.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Density from nullable TonnesPerCubicMillimeter.
        /// </summary>
        public static Density? FromTonnesPerCubicMillimeter(QuantityValue? tonnespercubicmillimeter)
        {
            if (tonnespercubicmillimeter.HasValue)
            {
                return FromTonnesPerCubicMillimeter(tonnespercubicmillimeter.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Density From(double value, DensityUnit fromUnit)
#else
        public static Density From(QuantityValue value, DensityUnit fromUnit)
#endif
        {
            return new Density((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density? From(QuantityValue? value, DensityUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Density((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(DensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          DensityUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Density operator -(Density right)
        {
            return new Density(-right.Value, right.Unit);
        }

        public static Density operator +(Density left, Density right)
        {
            return new Density(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Density operator -(Density left, Density right)
        {
            return new Density(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Density operator *(double left, Density right)
        {
            return new Density(left * right.Value, right.Unit);
        }

        public static Density operator *(Density left, double right)
        {
            return new Density(left.Value * right, left.Unit);
        }

        public static Density operator /(Density left, double right)
        {
            return new Density(left.Value / right, left.Unit);
        }

        public static double operator /(Density left, Density right)
        {
            return left.KilogramsPerCubicMeter / right.KilogramsPerCubicMeter;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Density)) throw new ArgumentException("Expected type Density.", "obj");
            return CompareTo((Density) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Density other)
        {
            return AsBaseUnitKilogramsPerCubicMeter().CompareTo(other.AsBaseUnitKilogramsPerCubicMeter());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Density left, Density right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Density left, Density right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Density left, Density right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Density left, Density right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Density left, Density right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitKilogramsPerCubicMeter().Equals(((Density) obj).AsBaseUnitKilogramsPerCubicMeter());
        }

        /// <summary>
        ///     Compare equality to another Density by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Density other, Density maxError)
        {
            return Math.Abs(AsBaseUnitKilogramsPerCubicMeter() - other.AsBaseUnitKilogramsPerCubicMeter()) <= maxError.AsBaseUnitKilogramsPerCubicMeter();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(DensityUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitKilogramsPerCubicMeter();

            switch (unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-2d;
                case DensityUnit.CentigramPerLiter: return (baseUnitValue*1) / 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (baseUnitValue*1e-1) / 1e-1d;
                case DensityUnit.DecigramPerLiter: return (baseUnitValue*1) / 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (baseUnitValue*1e-3) / 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return baseUnitValue*1e-3;
                case DensityUnit.GramPerCubicMeter: return baseUnitValue*1e3;
                case DensityUnit.GramPerCubicMillimeter: return baseUnitValue*1e-6;
                case DensityUnit.GramPerDeciliter: return baseUnitValue*1e-1;
                case DensityUnit.GramPerLiter: return baseUnitValue*1;
                case DensityUnit.GramPerMilliliter: return baseUnitValue*1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (baseUnitValue*1e-3) / 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (baseUnitValue*1e3) / 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (baseUnitValue*1e-6) / 1e3d;
                case DensityUnit.KilopoundPerCubicFoot: return (baseUnitValue*0.062427961) / 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (baseUnitValue*3.6127298147753e-5) / 1e3d;
                case DensityUnit.MicrogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (baseUnitValue*1) / 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-6d;
                case DensityUnit.MilligramPerDeciliter: return (baseUnitValue*1e-1) / 1e-3d;
                case DensityUnit.MilligramPerLiter: return (baseUnitValue*1) / 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (baseUnitValue*1e-3) / 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-9d;
                case DensityUnit.NanogramPerLiter: return (baseUnitValue*1) / 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (baseUnitValue*1e-1) / 1e-12d;
                case DensityUnit.PicogramPerLiter: return (baseUnitValue*1) / 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (baseUnitValue*1e-3) / 1e-12d;
                case DensityUnit.PoundPerCubicFoot: return baseUnitValue*0.062427961;
                case DensityUnit.PoundPerCubicInch: return baseUnitValue*3.6127298147753e-5;
                case DensityUnit.SlugPerCubicFoot: return baseUnitValue*0.00194032033;
                case DensityUnit.TonnePerCubicCentimeter: return baseUnitValue*1e-9;
                case DensityUnit.TonnePerCubicMeter: return baseUnitValue*0.001;
                case DensityUnit.TonnePerCubicMillimeter: return baseUnitValue*1e-12;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Density, DensityUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    DensityUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromKilogramsPerCubicMeter(x.KilogramsPerCubicMeter + y.KilogramsPerCubicMeter));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Density result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Density result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Density);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static DensityUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static DensityUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<DensityUnit>(str.Trim());

            if (unit == DensityUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized DensityUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is KilogramPerCubicMeter
        /// </summary>
        public static DensityUnit ToStringDefaultUnit { get; set; } = DensityUnit.KilogramPerCubicMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(DensityUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          DensityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            DensityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            DensityUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Density
        /// </summary>
        public static Density MaxValue => new Density(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Density
        /// </summary>
        public static Density MinValue => new Density(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitKilogramsPerCubicMeter()
        {
			if (Unit == DensityUnit.KilogramPerCubicMeter) { return _value; }

            switch (Unit)
            {
                case DensityUnit.CentigramPerDeciliter: return (_value/1e-1) * 1e-2d;
                case DensityUnit.CentigramPerLiter: return (_value/1) * 1e-2d;
                case DensityUnit.CentigramPerMilliliter: return (_value/1e-3) * 1e-2d;
                case DensityUnit.DecigramPerDeciliter: return (_value/1e-1) * 1e-1d;
                case DensityUnit.DecigramPerLiter: return (_value/1) * 1e-1d;
                case DensityUnit.DecigramPerMilliliter: return (_value/1e-3) * 1e-1d;
                case DensityUnit.GramPerCubicCentimeter: return _value/1e-3;
                case DensityUnit.GramPerCubicMeter: return _value/1e3;
                case DensityUnit.GramPerCubicMillimeter: return _value/1e-6;
                case DensityUnit.GramPerDeciliter: return _value/1e-1;
                case DensityUnit.GramPerLiter: return _value/1;
                case DensityUnit.GramPerMilliliter: return _value/1e-3;
                case DensityUnit.KilogramPerCubicCentimeter: return (_value/1e-3) * 1e3d;
                case DensityUnit.KilogramPerCubicMeter: return (_value/1e3) * 1e3d;
                case DensityUnit.KilogramPerCubicMillimeter: return (_value/1e-6) * 1e3d;
                case DensityUnit.KilopoundPerCubicFoot: return (_value/0.062427961) * 1e3d;
                case DensityUnit.KilopoundPerCubicInch: return (_value/3.6127298147753e-5) * 1e3d;
                case DensityUnit.MicrogramPerDeciliter: return (_value/1e-1) * 1e-6d;
                case DensityUnit.MicrogramPerLiter: return (_value/1) * 1e-6d;
                case DensityUnit.MicrogramPerMilliliter: return (_value/1e-3) * 1e-6d;
                case DensityUnit.MilligramPerDeciliter: return (_value/1e-1) * 1e-3d;
                case DensityUnit.MilligramPerLiter: return (_value/1) * 1e-3d;
                case DensityUnit.MilligramPerMilliliter: return (_value/1e-3) * 1e-3d;
                case DensityUnit.NanogramPerDeciliter: return (_value/1e-1) * 1e-9d;
                case DensityUnit.NanogramPerLiter: return (_value/1) * 1e-9d;
                case DensityUnit.NanogramPerMilliliter: return (_value/1e-3) * 1e-9d;
                case DensityUnit.PicogramPerDeciliter: return (_value/1e-1) * 1e-12d;
                case DensityUnit.PicogramPerLiter: return (_value/1) * 1e-12d;
                case DensityUnit.PicogramPerMilliliter: return (_value/1e-3) * 1e-12d;
                case DensityUnit.PoundPerCubicFoot: return _value/0.062427961;
                case DensityUnit.PoundPerCubicInch: return _value/3.6127298147753e-5;
                case DensityUnit.SlugPerCubicFoot: return _value*515.378818;
                case DensityUnit.TonnePerCubicCentimeter: return _value/1e-9;
                case DensityUnit.TonnePerCubicMeter: return _value/0.001;
                case DensityUnit.TonnePerCubicMillimeter: return _value/1e-12;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(DensityUnit unit) => Convert.ToDouble(As(unit));
	}
}
