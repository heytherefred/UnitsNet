//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Volume
#else
    public partial struct Volume : IComparable, IComparable<Volume>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Volume()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Volume(double cubicmeters)
        {
            _value = Convert.ToDouble(cubicmeters);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Volume(double numericValue, VolumeUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeter.
        /// </summary>
        /// <param name="cubicmeters">Value assuming base unit CubicMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Volume(long cubicmeters) : this(Convert.ToDouble(cubicmeters), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit CubicMeter.
        /// </summary>
        /// <param name="cubicmeters">Value assuming base unit CubicMeter.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Volume(decimal cubicmeters) : this(Convert.ToDouble(cubicmeters), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Volume;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit => VolumeUnit.CubicMeter;

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static VolumeUnit[] Units { get; } = Enum.GetValues(typeof(VolumeUnit)).Cast<VolumeUnit>().ToArray();
        /// <summary>
        ///     Get Volume in AuTablespoons.
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);
        /// <summary>
        ///     Get Volume in Centiliters.
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);
        /// <summary>
        ///     Get Volume in CubicCentimeters.
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);
        /// <summary>
        ///     Get Volume in CubicDecimeters.
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);
        /// <summary>
        ///     Get Volume in CubicFeet.
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);
        /// <summary>
        ///     Get Volume in CubicInches.
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);
        /// <summary>
        ///     Get Volume in CubicKilometers.
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);
        /// <summary>
        ///     Get Volume in CubicMeters.
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);
        /// <summary>
        ///     Get Volume in CubicMicrometers.
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);
        /// <summary>
        ///     Get Volume in CubicMiles.
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);
        /// <summary>
        ///     Get Volume in CubicMillimeters.
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);
        /// <summary>
        ///     Get Volume in CubicYards.
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);
        /// <summary>
        ///     Get Volume in Deciliters.
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);
        /// <summary>
        ///     Get Volume in HectocubicFeet.
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);
        /// <summary>
        ///     Get Volume in HectocubicMeters.
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);
        /// <summary>
        ///     Get Volume in Hectoliters.
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);
        /// <summary>
        ///     Get Volume in ImperialBeerBarrels.
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);
        /// <summary>
        ///     Get Volume in ImperialGallons.
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);
        /// <summary>
        ///     Get Volume in ImperialOunces.
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);
        /// <summary>
        ///     Get Volume in KilocubicFeet.
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);
        /// <summary>
        ///     Get Volume in KilocubicMeters.
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);
        /// <summary>
        ///     Get Volume in KiloimperialGallons.
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);
        /// <summary>
        ///     Get Volume in KilousGallons.
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);
        /// <summary>
        ///     Get Volume in Liters.
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);
        /// <summary>
        ///     Get Volume in MegacubicFeet.
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);
        /// <summary>
        ///     Get Volume in MegaimperialGallons.
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);
        /// <summary>
        ///     Get Volume in MegausGallons.
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);
        /// <summary>
        ///     Get Volume in MetricCups.
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);
        /// <summary>
        ///     Get Volume in MetricTeaspoons.
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);
        /// <summary>
        ///     Get Volume in Microliters.
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);
        /// <summary>
        ///     Get Volume in Milliliters.
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);
        /// <summary>
        ///     Get Volume in OilBarrels.
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);
        /// <summary>
        ///     Get Volume in Tablespoons.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #134, please use UsTablespoon instead")]
        public double Tablespoons => As(VolumeUnit.Tablespoon);
        /// <summary>
        ///     Get Volume in Teaspoons.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #134, please use UsTeaspoon instead")]
        public double Teaspoons => As(VolumeUnit.Teaspoon);
        /// <summary>
        ///     Get Volume in UkTablespoons.
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);
        /// <summary>
        ///     Get Volume in UsBeerBarrels.
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);
        /// <summary>
        ///     Get Volume in UsCustomaryCups.
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);
        /// <summary>
        ///     Get Volume in UsGallons.
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);
        /// <summary>
        ///     Get Volume in UsLegalCups.
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);
        /// <summary>
        ///     Get Volume in UsOunces.
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);
        /// <summary>
        ///     Get Volume in UsTablespoons.
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);
        /// <summary>
        ///     Get Volume in UsTeaspoons.
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static

        public static Volume Zero => new Volume(0, BaseUnit);

        /// <summary>
        ///     Get Volume from AuTablespoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromAuTablespoons(double autablespoons)
#else
        public static Volume FromAuTablespoons(QuantityValue autablespoons)
#endif
        {
            double value = (double) autablespoons;
            return new Volume(value, VolumeUnit.AuTablespoon);
        }

        /// <summary>
        ///     Get Volume from Centiliters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCentiliters(double centiliters)
#else
        public static Volume FromCentiliters(QuantityValue centiliters)
#endif
        {
            double value = (double) centiliters;
            return new Volume(value, VolumeUnit.Centiliter);
        }

        /// <summary>
        ///     Get Volume from CubicCentimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicCentimeters(double cubiccentimeters)
#else
        public static Volume FromCubicCentimeters(QuantityValue cubiccentimeters)
#endif
        {
            double value = (double) cubiccentimeters;
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }

        /// <summary>
        ///     Get Volume from CubicDecimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicDecimeters(double cubicdecimeters)
#else
        public static Volume FromCubicDecimeters(QuantityValue cubicdecimeters)
#endif
        {
            double value = (double) cubicdecimeters;
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }

        /// <summary>
        ///     Get Volume from CubicFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicFeet(double cubicfeet)
#else
        public static Volume FromCubicFeet(QuantityValue cubicfeet)
#endif
        {
            double value = (double) cubicfeet;
            return new Volume(value, VolumeUnit.CubicFoot);
        }

        /// <summary>
        ///     Get Volume from CubicInches.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicInches(double cubicinches)
#else
        public static Volume FromCubicInches(QuantityValue cubicinches)
#endif
        {
            double value = (double) cubicinches;
            return new Volume(value, VolumeUnit.CubicInch);
        }

        /// <summary>
        ///     Get Volume from CubicKilometers.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicKilometers(double cubickilometers)
#else
        public static Volume FromCubicKilometers(QuantityValue cubickilometers)
#endif
        {
            double value = (double) cubickilometers;
            return new Volume(value, VolumeUnit.CubicKilometer);
        }

        /// <summary>
        ///     Get Volume from CubicMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMeters(double cubicmeters)
#else
        public static Volume FromCubicMeters(QuantityValue cubicmeters)
#endif
        {
            double value = (double) cubicmeters;
            return new Volume(value, VolumeUnit.CubicMeter);
        }

        /// <summary>
        ///     Get Volume from CubicMicrometers.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMicrometers(double cubicmicrometers)
#else
        public static Volume FromCubicMicrometers(QuantityValue cubicmicrometers)
#endif
        {
            double value = (double) cubicmicrometers;
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }

        /// <summary>
        ///     Get Volume from CubicMiles.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMiles(double cubicmiles)
#else
        public static Volume FromCubicMiles(QuantityValue cubicmiles)
#endif
        {
            double value = (double) cubicmiles;
            return new Volume(value, VolumeUnit.CubicMile);
        }

        /// <summary>
        ///     Get Volume from CubicMillimeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicMillimeters(double cubicmillimeters)
#else
        public static Volume FromCubicMillimeters(QuantityValue cubicmillimeters)
#endif
        {
            double value = (double) cubicmillimeters;
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }

        /// <summary>
        ///     Get Volume from CubicYards.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromCubicYards(double cubicyards)
#else
        public static Volume FromCubicYards(QuantityValue cubicyards)
#endif
        {
            double value = (double) cubicyards;
            return new Volume(value, VolumeUnit.CubicYard);
        }

        /// <summary>
        ///     Get Volume from Deciliters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromDeciliters(double deciliters)
#else
        public static Volume FromDeciliters(QuantityValue deciliters)
#endif
        {
            double value = (double) deciliters;
            return new Volume(value, VolumeUnit.Deciliter);
        }

        /// <summary>
        ///     Get Volume from HectocubicFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicFeet(double hectocubicfeet)
#else
        public static Volume FromHectocubicFeet(QuantityValue hectocubicfeet)
#endif
        {
            double value = (double) hectocubicfeet;
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }

        /// <summary>
        ///     Get Volume from HectocubicMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectocubicMeters(double hectocubicmeters)
#else
        public static Volume FromHectocubicMeters(QuantityValue hectocubicmeters)
#endif
        {
            double value = (double) hectocubicmeters;
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }

        /// <summary>
        ///     Get Volume from Hectoliters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromHectoliters(double hectoliters)
#else
        public static Volume FromHectoliters(QuantityValue hectoliters)
#endif
        {
            double value = (double) hectoliters;
            return new Volume(value, VolumeUnit.Hectoliter);
        }

        /// <summary>
        ///     Get Volume from ImperialBeerBarrels.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels)
#else
        public static Volume FromImperialBeerBarrels(QuantityValue imperialbeerbarrels)
#endif
        {
            double value = (double) imperialbeerbarrels;
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }

        /// <summary>
        ///     Get Volume from ImperialGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialGallons(double imperialgallons)
#else
        public static Volume FromImperialGallons(QuantityValue imperialgallons)
#endif
        {
            double value = (double) imperialgallons;
            return new Volume(value, VolumeUnit.ImperialGallon);
        }

        /// <summary>
        ///     Get Volume from ImperialOunces.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromImperialOunces(double imperialounces)
#else
        public static Volume FromImperialOunces(QuantityValue imperialounces)
#endif
        {
            double value = (double) imperialounces;
            return new Volume(value, VolumeUnit.ImperialOunce);
        }

        /// <summary>
        ///     Get Volume from KilocubicFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicFeet(double kilocubicfeet)
#else
        public static Volume FromKilocubicFeet(QuantityValue kilocubicfeet)
#endif
        {
            double value = (double) kilocubicfeet;
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }

        /// <summary>
        ///     Get Volume from KilocubicMeters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilocubicMeters(double kilocubicmeters)
#else
        public static Volume FromKilocubicMeters(QuantityValue kilocubicmeters)
#endif
        {
            double value = (double) kilocubicmeters;
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }

        /// <summary>
        ///     Get Volume from KiloimperialGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKiloimperialGallons(double kiloimperialgallons)
#else
        public static Volume FromKiloimperialGallons(QuantityValue kiloimperialgallons)
#endif
        {
            double value = (double) kiloimperialgallons;
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }

        /// <summary>
        ///     Get Volume from KilousGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromKilousGallons(double kilousgallons)
#else
        public static Volume FromKilousGallons(QuantityValue kilousgallons)
#endif
        {
            double value = (double) kilousgallons;
            return new Volume(value, VolumeUnit.KilousGallon);
        }

        /// <summary>
        ///     Get Volume from Liters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromLiters(double liters)
#else
        public static Volume FromLiters(QuantityValue liters)
#endif
        {
            double value = (double) liters;
            return new Volume(value, VolumeUnit.Liter);
        }

        /// <summary>
        ///     Get Volume from MegacubicFeet.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegacubicFeet(double megacubicfeet)
#else
        public static Volume FromMegacubicFeet(QuantityValue megacubicfeet)
#endif
        {
            double value = (double) megacubicfeet;
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }

        /// <summary>
        ///     Get Volume from MegaimperialGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegaimperialGallons(double megaimperialgallons)
#else
        public static Volume FromMegaimperialGallons(QuantityValue megaimperialgallons)
#endif
        {
            double value = (double) megaimperialgallons;
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }

        /// <summary>
        ///     Get Volume from MegausGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMegausGallons(double megausgallons)
#else
        public static Volume FromMegausGallons(QuantityValue megausgallons)
#endif
        {
            double value = (double) megausgallons;
            return new Volume(value, VolumeUnit.MegausGallon);
        }

        /// <summary>
        ///     Get Volume from MetricCups.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricCups(double metriccups)
#else
        public static Volume FromMetricCups(QuantityValue metriccups)
#endif
        {
            double value = (double) metriccups;
            return new Volume(value, VolumeUnit.MetricCup);
        }

        /// <summary>
        ///     Get Volume from MetricTeaspoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMetricTeaspoons(double metricteaspoons)
#else
        public static Volume FromMetricTeaspoons(QuantityValue metricteaspoons)
#endif
        {
            double value = (double) metricteaspoons;
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }

        /// <summary>
        ///     Get Volume from Microliters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMicroliters(double microliters)
#else
        public static Volume FromMicroliters(QuantityValue microliters)
#endif
        {
            double value = (double) microliters;
            return new Volume(value, VolumeUnit.Microliter);
        }

        /// <summary>
        ///     Get Volume from Milliliters.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromMilliliters(double milliliters)
#else
        public static Volume FromMilliliters(QuantityValue milliliters)
#endif
        {
            double value = (double) milliliters;
            return new Volume(value, VolumeUnit.Milliliter);
        }

        /// <summary>
        ///     Get Volume from OilBarrels.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromOilBarrels(double oilbarrels)
#else
        public static Volume FromOilBarrels(QuantityValue oilbarrels)
#endif
        {
            double value = (double) oilbarrels;
            return new Volume(value, VolumeUnit.OilBarrel);
        }

        /// <summary>
        ///     Get Volume from Tablespoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromTablespoons(double tablespoons)
#else
        public static Volume FromTablespoons(QuantityValue tablespoons)
#endif
        {
            double value = (double) tablespoons;
            return new Volume(value, VolumeUnit.Tablespoon);
        }

        /// <summary>
        ///     Get Volume from Teaspoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromTeaspoons(double teaspoons)
#else
        public static Volume FromTeaspoons(QuantityValue teaspoons)
#endif
        {
            double value = (double) teaspoons;
            return new Volume(value, VolumeUnit.Teaspoon);
        }

        /// <summary>
        ///     Get Volume from UkTablespoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUkTablespoons(double uktablespoons)
#else
        public static Volume FromUkTablespoons(QuantityValue uktablespoons)
#endif
        {
            double value = (double) uktablespoons;
            return new Volume(value, VolumeUnit.UkTablespoon);
        }

        /// <summary>
        ///     Get Volume from UsBeerBarrels.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsBeerBarrels(double usbeerbarrels)
#else
        public static Volume FromUsBeerBarrels(QuantityValue usbeerbarrels)
#endif
        {
            double value = (double) usbeerbarrels;
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }

        /// <summary>
        ///     Get Volume from UsCustomaryCups.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsCustomaryCups(double uscustomarycups)
#else
        public static Volume FromUsCustomaryCups(QuantityValue uscustomarycups)
#endif
        {
            double value = (double) uscustomarycups;
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }

        /// <summary>
        ///     Get Volume from UsGallons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsGallons(double usgallons)
#else
        public static Volume FromUsGallons(QuantityValue usgallons)
#endif
        {
            double value = (double) usgallons;
            return new Volume(value, VolumeUnit.UsGallon);
        }

        /// <summary>
        ///     Get Volume from UsLegalCups.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsLegalCups(double uslegalcups)
#else
        public static Volume FromUsLegalCups(QuantityValue uslegalcups)
#endif
        {
            double value = (double) uslegalcups;
            return new Volume(value, VolumeUnit.UsLegalCup);
        }

        /// <summary>
        ///     Get Volume from UsOunces.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsOunces(double usounces)
#else
        public static Volume FromUsOunces(QuantityValue usounces)
#endif
        {
            double value = (double) usounces;
            return new Volume(value, VolumeUnit.UsOunce);
        }

        /// <summary>
        ///     Get Volume from UsTablespoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTablespoons(double ustablespoons)
#else
        public static Volume FromUsTablespoons(QuantityValue ustablespoons)
#endif
        {
            double value = (double) ustablespoons;
            return new Volume(value, VolumeUnit.UsTablespoon);
        }

        /// <summary>
        ///     Get Volume from UsTeaspoons.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Volume FromUsTeaspoons(double usteaspoons)
#else
        public static Volume FromUsTeaspoons(QuantityValue usteaspoons)
#endif
        {
            double value = (double) usteaspoons;
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Volume from nullable AuTablespoons.
        /// </summary>
        public static Volume? FromAuTablespoons(QuantityValue? autablespoons)
        {
            if (autablespoons.HasValue)
            {
                return FromAuTablespoons(autablespoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Centiliters.
        /// </summary>
        public static Volume? FromCentiliters(QuantityValue? centiliters)
        {
            if (centiliters.HasValue)
            {
                return FromCentiliters(centiliters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicCentimeters.
        /// </summary>
        public static Volume? FromCubicCentimeters(QuantityValue? cubiccentimeters)
        {
            if (cubiccentimeters.HasValue)
            {
                return FromCubicCentimeters(cubiccentimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicDecimeters.
        /// </summary>
        public static Volume? FromCubicDecimeters(QuantityValue? cubicdecimeters)
        {
            if (cubicdecimeters.HasValue)
            {
                return FromCubicDecimeters(cubicdecimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicFeet.
        /// </summary>
        public static Volume? FromCubicFeet(QuantityValue? cubicfeet)
        {
            if (cubicfeet.HasValue)
            {
                return FromCubicFeet(cubicfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicInches.
        /// </summary>
        public static Volume? FromCubicInches(QuantityValue? cubicinches)
        {
            if (cubicinches.HasValue)
            {
                return FromCubicInches(cubicinches.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicKilometers.
        /// </summary>
        public static Volume? FromCubicKilometers(QuantityValue? cubickilometers)
        {
            if (cubickilometers.HasValue)
            {
                return FromCubicKilometers(cubickilometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMeters.
        /// </summary>
        public static Volume? FromCubicMeters(QuantityValue? cubicmeters)
        {
            if (cubicmeters.HasValue)
            {
                return FromCubicMeters(cubicmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMicrometers.
        /// </summary>
        public static Volume? FromCubicMicrometers(QuantityValue? cubicmicrometers)
        {
            if (cubicmicrometers.HasValue)
            {
                return FromCubicMicrometers(cubicmicrometers.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMiles.
        /// </summary>
        public static Volume? FromCubicMiles(QuantityValue? cubicmiles)
        {
            if (cubicmiles.HasValue)
            {
                return FromCubicMiles(cubicmiles.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicMillimeters.
        /// </summary>
        public static Volume? FromCubicMillimeters(QuantityValue? cubicmillimeters)
        {
            if (cubicmillimeters.HasValue)
            {
                return FromCubicMillimeters(cubicmillimeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable CubicYards.
        /// </summary>
        public static Volume? FromCubicYards(QuantityValue? cubicyards)
        {
            if (cubicyards.HasValue)
            {
                return FromCubicYards(cubicyards.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Deciliters.
        /// </summary>
        public static Volume? FromDeciliters(QuantityValue? deciliters)
        {
            if (deciliters.HasValue)
            {
                return FromDeciliters(deciliters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable HectocubicFeet.
        /// </summary>
        public static Volume? FromHectocubicFeet(QuantityValue? hectocubicfeet)
        {
            if (hectocubicfeet.HasValue)
            {
                return FromHectocubicFeet(hectocubicfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable HectocubicMeters.
        /// </summary>
        public static Volume? FromHectocubicMeters(QuantityValue? hectocubicmeters)
        {
            if (hectocubicmeters.HasValue)
            {
                return FromHectocubicMeters(hectocubicmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Hectoliters.
        /// </summary>
        public static Volume? FromHectoliters(QuantityValue? hectoliters)
        {
            if (hectoliters.HasValue)
            {
                return FromHectoliters(hectoliters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialBeerBarrels.
        /// </summary>
        public static Volume? FromImperialBeerBarrels(QuantityValue? imperialbeerbarrels)
        {
            if (imperialbeerbarrels.HasValue)
            {
                return FromImperialBeerBarrels(imperialbeerbarrels.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialGallons.
        /// </summary>
        public static Volume? FromImperialGallons(QuantityValue? imperialgallons)
        {
            if (imperialgallons.HasValue)
            {
                return FromImperialGallons(imperialgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable ImperialOunces.
        /// </summary>
        public static Volume? FromImperialOunces(QuantityValue? imperialounces)
        {
            if (imperialounces.HasValue)
            {
                return FromImperialOunces(imperialounces.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilocubicFeet.
        /// </summary>
        public static Volume? FromKilocubicFeet(QuantityValue? kilocubicfeet)
        {
            if (kilocubicfeet.HasValue)
            {
                return FromKilocubicFeet(kilocubicfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilocubicMeters.
        /// </summary>
        public static Volume? FromKilocubicMeters(QuantityValue? kilocubicmeters)
        {
            if (kilocubicmeters.HasValue)
            {
                return FromKilocubicMeters(kilocubicmeters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable KiloimperialGallons.
        /// </summary>
        public static Volume? FromKiloimperialGallons(QuantityValue? kiloimperialgallons)
        {
            if (kiloimperialgallons.HasValue)
            {
                return FromKiloimperialGallons(kiloimperialgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable KilousGallons.
        /// </summary>
        public static Volume? FromKilousGallons(QuantityValue? kilousgallons)
        {
            if (kilousgallons.HasValue)
            {
                return FromKilousGallons(kilousgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Liters.
        /// </summary>
        public static Volume? FromLiters(QuantityValue? liters)
        {
            if (liters.HasValue)
            {
                return FromLiters(liters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegacubicFeet.
        /// </summary>
        public static Volume? FromMegacubicFeet(QuantityValue? megacubicfeet)
        {
            if (megacubicfeet.HasValue)
            {
                return FromMegacubicFeet(megacubicfeet.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegaimperialGallons.
        /// </summary>
        public static Volume? FromMegaimperialGallons(QuantityValue? megaimperialgallons)
        {
            if (megaimperialgallons.HasValue)
            {
                return FromMegaimperialGallons(megaimperialgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable MegausGallons.
        /// </summary>
        public static Volume? FromMegausGallons(QuantityValue? megausgallons)
        {
            if (megausgallons.HasValue)
            {
                return FromMegausGallons(megausgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable MetricCups.
        /// </summary>
        public static Volume? FromMetricCups(QuantityValue? metriccups)
        {
            if (metriccups.HasValue)
            {
                return FromMetricCups(metriccups.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable MetricTeaspoons.
        /// </summary>
        public static Volume? FromMetricTeaspoons(QuantityValue? metricteaspoons)
        {
            if (metricteaspoons.HasValue)
            {
                return FromMetricTeaspoons(metricteaspoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Microliters.
        /// </summary>
        public static Volume? FromMicroliters(QuantityValue? microliters)
        {
            if (microliters.HasValue)
            {
                return FromMicroliters(microliters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Milliliters.
        /// </summary>
        public static Volume? FromMilliliters(QuantityValue? milliliters)
        {
            if (milliliters.HasValue)
            {
                return FromMilliliters(milliliters.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable OilBarrels.
        /// </summary>
        public static Volume? FromOilBarrels(QuantityValue? oilbarrels)
        {
            if (oilbarrels.HasValue)
            {
                return FromOilBarrels(oilbarrels.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Tablespoons.
        /// </summary>
        public static Volume? FromTablespoons(QuantityValue? tablespoons)
        {
            if (tablespoons.HasValue)
            {
                return FromTablespoons(tablespoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable Teaspoons.
        /// </summary>
        public static Volume? FromTeaspoons(QuantityValue? teaspoons)
        {
            if (teaspoons.HasValue)
            {
                return FromTeaspoons(teaspoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UkTablespoons.
        /// </summary>
        public static Volume? FromUkTablespoons(QuantityValue? uktablespoons)
        {
            if (uktablespoons.HasValue)
            {
                return FromUkTablespoons(uktablespoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsBeerBarrels.
        /// </summary>
        public static Volume? FromUsBeerBarrels(QuantityValue? usbeerbarrels)
        {
            if (usbeerbarrels.HasValue)
            {
                return FromUsBeerBarrels(usbeerbarrels.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsCustomaryCups.
        /// </summary>
        public static Volume? FromUsCustomaryCups(QuantityValue? uscustomarycups)
        {
            if (uscustomarycups.HasValue)
            {
                return FromUsCustomaryCups(uscustomarycups.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsGallons.
        /// </summary>
        public static Volume? FromUsGallons(QuantityValue? usgallons)
        {
            if (usgallons.HasValue)
            {
                return FromUsGallons(usgallons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsLegalCups.
        /// </summary>
        public static Volume? FromUsLegalCups(QuantityValue? uslegalcups)
        {
            if (uslegalcups.HasValue)
            {
                return FromUsLegalCups(uslegalcups.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsOunces.
        /// </summary>
        public static Volume? FromUsOunces(QuantityValue? usounces)
        {
            if (usounces.HasValue)
            {
                return FromUsOunces(usounces.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsTablespoons.
        /// </summary>
        public static Volume? FromUsTablespoons(QuantityValue? ustablespoons)
        {
            if (ustablespoons.HasValue)
            {
                return FromUsTablespoons(ustablespoons.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Volume from nullable UsTeaspoons.
        /// </summary>
        public static Volume? FromUsTeaspoons(QuantityValue? usteaspoons)
        {
            if (usteaspoons.HasValue)
            {
                return FromUsTeaspoons(usteaspoons.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Volume From(double value, VolumeUnit fromUnit)
#else
        public static Volume From(QuantityValue value, VolumeUnit fromUnit)
#endif
        {
            return new Volume((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume? From(QuantityValue? value, VolumeUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Volume((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          VolumeUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Volume operator -(Volume right)
        {
            return new Volume(-right.Value, right.Unit);
        }

        public static Volume operator +(Volume left, Volume right)
        {
            return new Volume(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Volume operator -(Volume left, Volume right)
        {
            return new Volume(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Volume operator *(double left, Volume right)
        {
            return new Volume(left * right.Value, right.Unit);
        }

        public static Volume operator *(Volume left, double right)
        {
            return new Volume(left.Value * right, left.Unit);
        }

        public static Volume operator /(Volume left, double right)
        {
            return new Volume(left.Value / right, left.Unit);
        }

        public static double operator /(Volume left, Volume right)
        {
            return left.CubicMeters / right.CubicMeters;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Volume)) throw new ArgumentException("Expected type Volume.", "obj");
            return CompareTo((Volume) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Volume other)
        {
            return AsBaseUnitCubicMeters().CompareTo(other.AsBaseUnitCubicMeters());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Volume left, Volume right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Volume left, Volume right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Volume left, Volume right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Volume left, Volume right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Volume left, Volume right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Volume left, Volume right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitCubicMeters().Equals(((Volume) obj).AsBaseUnitCubicMeters());
        }

        /// <summary>
        ///     Compare equality to another Volume by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Volume other, Volume maxError)
        {
            return Math.Abs(AsBaseUnitCubicMeters() - other.AsBaseUnitCubicMeters()) <= maxError.AsBaseUnitCubicMeters();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitCubicMeters();

            switch (unit)
            {
                case VolumeUnit.AuTablespoon: return baseUnitValue/2e-5;
                case VolumeUnit.Centiliter: return (baseUnitValue*1e3) / 1e-2d;
                case VolumeUnit.CubicCentimeter: return baseUnitValue*1e6;
                case VolumeUnit.CubicDecimeter: return baseUnitValue*1e3;
                case VolumeUnit.CubicFoot: return baseUnitValue/0.0283168;
                case VolumeUnit.CubicInch: return baseUnitValue/(1.6387*1e-5);
                case VolumeUnit.CubicKilometer: return baseUnitValue/1e9;
                case VolumeUnit.CubicMeter: return baseUnitValue;
                case VolumeUnit.CubicMicrometer: return baseUnitValue*1e18;
                case VolumeUnit.CubicMile: return baseUnitValue/(4.16818183*1e9);
                case VolumeUnit.CubicMillimeter: return baseUnitValue*1e9;
                case VolumeUnit.CubicYard: return baseUnitValue/0.764554858;
                case VolumeUnit.Deciliter: return (baseUnitValue*1e3) / 1e-1d;
                case VolumeUnit.HectocubicFoot: return (baseUnitValue/0.0283168) / 1e2d;
                case VolumeUnit.HectocubicMeter: return (baseUnitValue) / 1e2d;
                case VolumeUnit.Hectoliter: return (baseUnitValue*1e3) / 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return baseUnitValue/0.16365924;
                case VolumeUnit.ImperialGallon: return baseUnitValue/0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return baseUnitValue/2.8413062499962901241875439064617e-5;
                case VolumeUnit.KilocubicFoot: return (baseUnitValue/0.0283168) / 1e3d;
                case VolumeUnit.KilocubicMeter: return (baseUnitValue) / 1e3d;
                case VolumeUnit.KiloimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e3d;
                case VolumeUnit.KilousGallon: return (baseUnitValue/0.00378541) / 1e3d;
                case VolumeUnit.Liter: return baseUnitValue*1e3;
                case VolumeUnit.MegacubicFoot: return (baseUnitValue/0.0283168) / 1e6d;
                case VolumeUnit.MegaimperialGallon: return (baseUnitValue/0.00454609000000181429905810072407) / 1e6d;
                case VolumeUnit.MegausGallon: return (baseUnitValue/0.00378541) / 1e6d;
                case VolumeUnit.MetricCup: return baseUnitValue/0.00025;
                case VolumeUnit.MetricTeaspoon: return baseUnitValue/0.5e-5;
                case VolumeUnit.Microliter: return (baseUnitValue*1e3) / 1e-6d;
                case VolumeUnit.Milliliter: return (baseUnitValue*1e3) / 1e-3d;
                case VolumeUnit.OilBarrel: return baseUnitValue/0.158987294928;
                case VolumeUnit.Tablespoon: return baseUnitValue/1.478676478125e-5;
                case VolumeUnit.Teaspoon: return baseUnitValue/4.92892159375e-6;
                case VolumeUnit.UkTablespoon: return baseUnitValue/1.5e-5;
                case VolumeUnit.UsBeerBarrel: return baseUnitValue/0.1173477658;
                case VolumeUnit.UsCustomaryCup: return baseUnitValue/0.0002365882365;
                case VolumeUnit.UsGallon: return baseUnitValue/0.00378541;
                case VolumeUnit.UsLegalCup: return baseUnitValue/0.00024;
                case VolumeUnit.UsOunce: return baseUnitValue/2.957352956253760505068307980135e-5;
                case VolumeUnit.UsTablespoon: return baseUnitValue/1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return baseUnitValue/4.92892159375e-6;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Volume, VolumeUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    VolumeUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromCubicMeters(x.CubicMeters + y.CubicMeters));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Volume result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Volume);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static VolumeUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static VolumeUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<VolumeUnit>(str.Trim());

            if (unit == VolumeUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized VolumeUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is CubicMeter
        /// </summary>
        public static VolumeUnit ToStringDefaultUnit { get; set; } = VolumeUnit.CubicMeter;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(VolumeUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          VolumeUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            VolumeUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            VolumeUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Volume
        /// </summary>
        public static Volume MaxValue => new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume
        /// </summary>
        public static Volume MinValue => new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitCubicMeters()
        {
			if (Unit == VolumeUnit.CubicMeter) { return _value; }

            switch (Unit)
            {
                case VolumeUnit.AuTablespoon: return _value*2e-5;
                case VolumeUnit.Centiliter: return (_value/1e3) * 1e-2d;
                case VolumeUnit.CubicCentimeter: return _value/1e6;
                case VolumeUnit.CubicDecimeter: return _value/1e3;
                case VolumeUnit.CubicFoot: return _value*0.0283168;
                case VolumeUnit.CubicInch: return _value*1.6387*1e-5;
                case VolumeUnit.CubicKilometer: return _value*1e9;
                case VolumeUnit.CubicMeter: return _value;
                case VolumeUnit.CubicMicrometer: return _value/1e18;
                case VolumeUnit.CubicMile: return _value*4.16818183*1e9;
                case VolumeUnit.CubicMillimeter: return _value/1e9;
                case VolumeUnit.CubicYard: return _value*0.764554858;
                case VolumeUnit.Deciliter: return (_value/1e3) * 1e-1d;
                case VolumeUnit.HectocubicFoot: return (_value*0.0283168) * 1e2d;
                case VolumeUnit.HectocubicMeter: return (_value) * 1e2d;
                case VolumeUnit.Hectoliter: return (_value/1e3) * 1e2d;
                case VolumeUnit.ImperialBeerBarrel: return _value*0.16365924;
                case VolumeUnit.ImperialGallon: return _value*0.00454609000000181429905810072407;
                case VolumeUnit.ImperialOunce: return _value*2.8413062499962901241875439064617e-5;
                case VolumeUnit.KilocubicFoot: return (_value*0.0283168) * 1e3d;
                case VolumeUnit.KilocubicMeter: return (_value) * 1e3d;
                case VolumeUnit.KiloimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e3d;
                case VolumeUnit.KilousGallon: return (_value*0.00378541) * 1e3d;
                case VolumeUnit.Liter: return _value/1e3;
                case VolumeUnit.MegacubicFoot: return (_value*0.0283168) * 1e6d;
                case VolumeUnit.MegaimperialGallon: return (_value*0.00454609000000181429905810072407) * 1e6d;
                case VolumeUnit.MegausGallon: return (_value*0.00378541) * 1e6d;
                case VolumeUnit.MetricCup: return _value*0.00025;
                case VolumeUnit.MetricTeaspoon: return _value*0.5e-5;
                case VolumeUnit.Microliter: return (_value/1e3) * 1e-6d;
                case VolumeUnit.Milliliter: return (_value/1e3) * 1e-3d;
                case VolumeUnit.OilBarrel: return _value*0.158987294928;
                case VolumeUnit.Tablespoon: return _value*1.478676478125e-5;
                case VolumeUnit.Teaspoon: return _value*4.92892159375e-6;
                case VolumeUnit.UkTablespoon: return _value*1.5e-5;
                case VolumeUnit.UsBeerBarrel: return _value*0.1173477658;
                case VolumeUnit.UsCustomaryCup: return _value*0.0002365882365;
                case VolumeUnit.UsGallon: return _value*0.00378541;
                case VolumeUnit.UsLegalCup: return _value*0.00024;
                case VolumeUnit.UsOunce: return _value*2.957352956253760505068307980135e-5;
                case VolumeUnit.UsTablespoon: return _value*1.478676478125e-5;
                case VolumeUnit.UsTeaspoon: return _value*4.92892159375e-6;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(VolumeUnit unit) => Convert.ToDouble(As(unit));
	}
}
