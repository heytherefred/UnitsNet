//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In computing and telecommunications, a unit of information is the capacity of some standard data storage system or communication channel, used to measure the capacities of other systems and channels. In information theory, units of information are also used to measure the information contents or entropy of random variables.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Information
#else
    public partial struct Information : IComparable, IComparable<Information>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly InformationUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public decimal Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public InformationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Information()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Information(double bits)
        {
            _value = Convert.ToDecimal(bits);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Information(decimal numericValue, InformationUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit Bit.
        /// </summary>
        /// <param name="bits">Value assuming base unit Bit.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Information(long bits) : this(Convert.ToDecimal(bits), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit Bit.
        /// </summary>
        /// <param name="bits">Value assuming base unit Bit.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Information(decimal bits) : this(Convert.ToDecimal(bits), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Information;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static InformationUnit BaseUnit => InformationUnit.Bit;

        /// <summary>
        ///     All units of measurement for the Information quantity.
        /// </summary>
        public static InformationUnit[] Units { get; } = Enum.GetValues(typeof(InformationUnit)).Cast<InformationUnit>().ToArray();
        /// <summary>
        ///     Get Information in Bits.
        /// </summary>
        public double Bits => As(InformationUnit.Bit);
        /// <summary>
        ///     Get Information in Bytes.
        /// </summary>
        public double Bytes => As(InformationUnit.Byte);
        /// <summary>
        ///     Get Information in Exabits.
        /// </summary>
        public double Exabits => As(InformationUnit.Exabit);
        /// <summary>
        ///     Get Information in Exabytes.
        /// </summary>
        public double Exabytes => As(InformationUnit.Exabyte);
        /// <summary>
        ///     Get Information in Exbibits.
        /// </summary>
        public double Exbibits => As(InformationUnit.Exbibit);
        /// <summary>
        ///     Get Information in Exbibytes.
        /// </summary>
        public double Exbibytes => As(InformationUnit.Exbibyte);
        /// <summary>
        ///     Get Information in Gibibits.
        /// </summary>
        public double Gibibits => As(InformationUnit.Gibibit);
        /// <summary>
        ///     Get Information in Gibibytes.
        /// </summary>
        public double Gibibytes => As(InformationUnit.Gibibyte);
        /// <summary>
        ///     Get Information in Gigabits.
        /// </summary>
        public double Gigabits => As(InformationUnit.Gigabit);
        /// <summary>
        ///     Get Information in Gigabytes.
        /// </summary>
        public double Gigabytes => As(InformationUnit.Gigabyte);
        /// <summary>
        ///     Get Information in Kibibits.
        /// </summary>
        public double Kibibits => As(InformationUnit.Kibibit);
        /// <summary>
        ///     Get Information in Kibibytes.
        /// </summary>
        public double Kibibytes => As(InformationUnit.Kibibyte);
        /// <summary>
        ///     Get Information in Kilobits.
        /// </summary>
        public double Kilobits => As(InformationUnit.Kilobit);
        /// <summary>
        ///     Get Information in Kilobytes.
        /// </summary>
        public double Kilobytes => As(InformationUnit.Kilobyte);
        /// <summary>
        ///     Get Information in Mebibits.
        /// </summary>
        public double Mebibits => As(InformationUnit.Mebibit);
        /// <summary>
        ///     Get Information in Mebibytes.
        /// </summary>
        public double Mebibytes => As(InformationUnit.Mebibyte);
        /// <summary>
        ///     Get Information in Megabits.
        /// </summary>
        public double Megabits => As(InformationUnit.Megabit);
        /// <summary>
        ///     Get Information in Megabytes.
        /// </summary>
        public double Megabytes => As(InformationUnit.Megabyte);
        /// <summary>
        ///     Get Information in Pebibits.
        /// </summary>
        public double Pebibits => As(InformationUnit.Pebibit);
        /// <summary>
        ///     Get Information in Pebibytes.
        /// </summary>
        public double Pebibytes => As(InformationUnit.Pebibyte);
        /// <summary>
        ///     Get Information in Petabits.
        /// </summary>
        public double Petabits => As(InformationUnit.Petabit);
        /// <summary>
        ///     Get Information in Petabytes.
        /// </summary>
        public double Petabytes => As(InformationUnit.Petabyte);
        /// <summary>
        ///     Get Information in Tebibits.
        /// </summary>
        public double Tebibits => As(InformationUnit.Tebibit);
        /// <summary>
        ///     Get Information in Tebibytes.
        /// </summary>
        public double Tebibytes => As(InformationUnit.Tebibyte);
        /// <summary>
        ///     Get Information in Terabits.
        /// </summary>
        public double Terabits => As(InformationUnit.Terabit);
        /// <summary>
        ///     Get Information in Terabytes.
        /// </summary>
        public double Terabytes => As(InformationUnit.Terabyte);

        #endregion

        #region Static

        public static Information Zero => new Information(0, BaseUnit);

        /// <summary>
        ///     Get Information from Bits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromBits(double bits)
#else
        public static Information FromBits(QuantityValueDecimal bits)
#endif
        {
            decimal value = (decimal) bits;
            return new Information(value, InformationUnit.Bit);
        }

        /// <summary>
        ///     Get Information from Bytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromBytes(double bytes)
#else
        public static Information FromBytes(QuantityValueDecimal bytes)
#endif
        {
            decimal value = (decimal) bytes;
            return new Information(value, InformationUnit.Byte);
        }

        /// <summary>
        ///     Get Information from Exabits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromExabits(double exabits)
#else
        public static Information FromExabits(QuantityValueDecimal exabits)
#endif
        {
            decimal value = (decimal) exabits;
            return new Information(value, InformationUnit.Exabit);
        }

        /// <summary>
        ///     Get Information from Exabytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromExabytes(double exabytes)
#else
        public static Information FromExabytes(QuantityValueDecimal exabytes)
#endif
        {
            decimal value = (decimal) exabytes;
            return new Information(value, InformationUnit.Exabyte);
        }

        /// <summary>
        ///     Get Information from Exbibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromExbibits(double exbibits)
#else
        public static Information FromExbibits(QuantityValueDecimal exbibits)
#endif
        {
            decimal value = (decimal) exbibits;
            return new Information(value, InformationUnit.Exbibit);
        }

        /// <summary>
        ///     Get Information from Exbibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromExbibytes(double exbibytes)
#else
        public static Information FromExbibytes(QuantityValueDecimal exbibytes)
#endif
        {
            decimal value = (decimal) exbibytes;
            return new Information(value, InformationUnit.Exbibyte);
        }

        /// <summary>
        ///     Get Information from Gibibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromGibibits(double gibibits)
#else
        public static Information FromGibibits(QuantityValueDecimal gibibits)
#endif
        {
            decimal value = (decimal) gibibits;
            return new Information(value, InformationUnit.Gibibit);
        }

        /// <summary>
        ///     Get Information from Gibibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromGibibytes(double gibibytes)
#else
        public static Information FromGibibytes(QuantityValueDecimal gibibytes)
#endif
        {
            decimal value = (decimal) gibibytes;
            return new Information(value, InformationUnit.Gibibyte);
        }

        /// <summary>
        ///     Get Information from Gigabits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromGigabits(double gigabits)
#else
        public static Information FromGigabits(QuantityValueDecimal gigabits)
#endif
        {
            decimal value = (decimal) gigabits;
            return new Information(value, InformationUnit.Gigabit);
        }

        /// <summary>
        ///     Get Information from Gigabytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromGigabytes(double gigabytes)
#else
        public static Information FromGigabytes(QuantityValueDecimal gigabytes)
#endif
        {
            decimal value = (decimal) gigabytes;
            return new Information(value, InformationUnit.Gigabyte);
        }

        /// <summary>
        ///     Get Information from Kibibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromKibibits(double kibibits)
#else
        public static Information FromKibibits(QuantityValueDecimal kibibits)
#endif
        {
            decimal value = (decimal) kibibits;
            return new Information(value, InformationUnit.Kibibit);
        }

        /// <summary>
        ///     Get Information from Kibibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromKibibytes(double kibibytes)
#else
        public static Information FromKibibytes(QuantityValueDecimal kibibytes)
#endif
        {
            decimal value = (decimal) kibibytes;
            return new Information(value, InformationUnit.Kibibyte);
        }

        /// <summary>
        ///     Get Information from Kilobits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromKilobits(double kilobits)
#else
        public static Information FromKilobits(QuantityValueDecimal kilobits)
#endif
        {
            decimal value = (decimal) kilobits;
            return new Information(value, InformationUnit.Kilobit);
        }

        /// <summary>
        ///     Get Information from Kilobytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromKilobytes(double kilobytes)
#else
        public static Information FromKilobytes(QuantityValueDecimal kilobytes)
#endif
        {
            decimal value = (decimal) kilobytes;
            return new Information(value, InformationUnit.Kilobyte);
        }

        /// <summary>
        ///     Get Information from Mebibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromMebibits(double mebibits)
#else
        public static Information FromMebibits(QuantityValueDecimal mebibits)
#endif
        {
            decimal value = (decimal) mebibits;
            return new Information(value, InformationUnit.Mebibit);
        }

        /// <summary>
        ///     Get Information from Mebibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromMebibytes(double mebibytes)
#else
        public static Information FromMebibytes(QuantityValueDecimal mebibytes)
#endif
        {
            decimal value = (decimal) mebibytes;
            return new Information(value, InformationUnit.Mebibyte);
        }

        /// <summary>
        ///     Get Information from Megabits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromMegabits(double megabits)
#else
        public static Information FromMegabits(QuantityValueDecimal megabits)
#endif
        {
            decimal value = (decimal) megabits;
            return new Information(value, InformationUnit.Megabit);
        }

        /// <summary>
        ///     Get Information from Megabytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromMegabytes(double megabytes)
#else
        public static Information FromMegabytes(QuantityValueDecimal megabytes)
#endif
        {
            decimal value = (decimal) megabytes;
            return new Information(value, InformationUnit.Megabyte);
        }

        /// <summary>
        ///     Get Information from Pebibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromPebibits(double pebibits)
#else
        public static Information FromPebibits(QuantityValueDecimal pebibits)
#endif
        {
            decimal value = (decimal) pebibits;
            return new Information(value, InformationUnit.Pebibit);
        }

        /// <summary>
        ///     Get Information from Pebibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromPebibytes(double pebibytes)
#else
        public static Information FromPebibytes(QuantityValueDecimal pebibytes)
#endif
        {
            decimal value = (decimal) pebibytes;
            return new Information(value, InformationUnit.Pebibyte);
        }

        /// <summary>
        ///     Get Information from Petabits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromPetabits(double petabits)
#else
        public static Information FromPetabits(QuantityValueDecimal petabits)
#endif
        {
            decimal value = (decimal) petabits;
            return new Information(value, InformationUnit.Petabit);
        }

        /// <summary>
        ///     Get Information from Petabytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromPetabytes(double petabytes)
#else
        public static Information FromPetabytes(QuantityValueDecimal petabytes)
#endif
        {
            decimal value = (decimal) petabytes;
            return new Information(value, InformationUnit.Petabyte);
        }

        /// <summary>
        ///     Get Information from Tebibits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromTebibits(double tebibits)
#else
        public static Information FromTebibits(QuantityValueDecimal tebibits)
#endif
        {
            decimal value = (decimal) tebibits;
            return new Information(value, InformationUnit.Tebibit);
        }

        /// <summary>
        ///     Get Information from Tebibytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromTebibytes(double tebibytes)
#else
        public static Information FromTebibytes(QuantityValueDecimal tebibytes)
#endif
        {
            decimal value = (decimal) tebibytes;
            return new Information(value, InformationUnit.Tebibyte);
        }

        /// <summary>
        ///     Get Information from Terabits.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromTerabits(double terabits)
#else
        public static Information FromTerabits(QuantityValueDecimal terabits)
#endif
        {
            decimal value = (decimal) terabits;
            return new Information(value, InformationUnit.Terabit);
        }

        /// <summary>
        ///     Get Information from Terabytes.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Information FromTerabytes(double terabytes)
#else
        public static Information FromTerabytes(QuantityValueDecimal terabytes)
#endif
        {
            decimal value = (decimal) terabytes;
            return new Information(value, InformationUnit.Terabyte);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Information from nullable Bits.
        /// </summary>
        public static Information? FromBits(QuantityValueDecimal? bits)
        {
            if (bits.HasValue)
            {
                return FromBits(bits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Bytes.
        /// </summary>
        public static Information? FromBytes(QuantityValueDecimal? bytes)
        {
            if (bytes.HasValue)
            {
                return FromBytes(bytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Exabits.
        /// </summary>
        public static Information? FromExabits(QuantityValueDecimal? exabits)
        {
            if (exabits.HasValue)
            {
                return FromExabits(exabits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Exabytes.
        /// </summary>
        public static Information? FromExabytes(QuantityValueDecimal? exabytes)
        {
            if (exabytes.HasValue)
            {
                return FromExabytes(exabytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Exbibits.
        /// </summary>
        public static Information? FromExbibits(QuantityValueDecimal? exbibits)
        {
            if (exbibits.HasValue)
            {
                return FromExbibits(exbibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Exbibytes.
        /// </summary>
        public static Information? FromExbibytes(QuantityValueDecimal? exbibytes)
        {
            if (exbibytes.HasValue)
            {
                return FromExbibytes(exbibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Gibibits.
        /// </summary>
        public static Information? FromGibibits(QuantityValueDecimal? gibibits)
        {
            if (gibibits.HasValue)
            {
                return FromGibibits(gibibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Gibibytes.
        /// </summary>
        public static Information? FromGibibytes(QuantityValueDecimal? gibibytes)
        {
            if (gibibytes.HasValue)
            {
                return FromGibibytes(gibibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Gigabits.
        /// </summary>
        public static Information? FromGigabits(QuantityValueDecimal? gigabits)
        {
            if (gigabits.HasValue)
            {
                return FromGigabits(gigabits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Gigabytes.
        /// </summary>
        public static Information? FromGigabytes(QuantityValueDecimal? gigabytes)
        {
            if (gigabytes.HasValue)
            {
                return FromGigabytes(gigabytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Kibibits.
        /// </summary>
        public static Information? FromKibibits(QuantityValueDecimal? kibibits)
        {
            if (kibibits.HasValue)
            {
                return FromKibibits(kibibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Kibibytes.
        /// </summary>
        public static Information? FromKibibytes(QuantityValueDecimal? kibibytes)
        {
            if (kibibytes.HasValue)
            {
                return FromKibibytes(kibibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Kilobits.
        /// </summary>
        public static Information? FromKilobits(QuantityValueDecimal? kilobits)
        {
            if (kilobits.HasValue)
            {
                return FromKilobits(kilobits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Kilobytes.
        /// </summary>
        public static Information? FromKilobytes(QuantityValueDecimal? kilobytes)
        {
            if (kilobytes.HasValue)
            {
                return FromKilobytes(kilobytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Mebibits.
        /// </summary>
        public static Information? FromMebibits(QuantityValueDecimal? mebibits)
        {
            if (mebibits.HasValue)
            {
                return FromMebibits(mebibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Mebibytes.
        /// </summary>
        public static Information? FromMebibytes(QuantityValueDecimal? mebibytes)
        {
            if (mebibytes.HasValue)
            {
                return FromMebibytes(mebibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Megabits.
        /// </summary>
        public static Information? FromMegabits(QuantityValueDecimal? megabits)
        {
            if (megabits.HasValue)
            {
                return FromMegabits(megabits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Megabytes.
        /// </summary>
        public static Information? FromMegabytes(QuantityValueDecimal? megabytes)
        {
            if (megabytes.HasValue)
            {
                return FromMegabytes(megabytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Pebibits.
        /// </summary>
        public static Information? FromPebibits(QuantityValueDecimal? pebibits)
        {
            if (pebibits.HasValue)
            {
                return FromPebibits(pebibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Pebibytes.
        /// </summary>
        public static Information? FromPebibytes(QuantityValueDecimal? pebibytes)
        {
            if (pebibytes.HasValue)
            {
                return FromPebibytes(pebibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Petabits.
        /// </summary>
        public static Information? FromPetabits(QuantityValueDecimal? petabits)
        {
            if (petabits.HasValue)
            {
                return FromPetabits(petabits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Petabytes.
        /// </summary>
        public static Information? FromPetabytes(QuantityValueDecimal? petabytes)
        {
            if (petabytes.HasValue)
            {
                return FromPetabytes(petabytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Tebibits.
        /// </summary>
        public static Information? FromTebibits(QuantityValueDecimal? tebibits)
        {
            if (tebibits.HasValue)
            {
                return FromTebibits(tebibits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Tebibytes.
        /// </summary>
        public static Information? FromTebibytes(QuantityValueDecimal? tebibytes)
        {
            if (tebibytes.HasValue)
            {
                return FromTebibytes(tebibytes.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Terabits.
        /// </summary>
        public static Information? FromTerabits(QuantityValueDecimal? terabits)
        {
            if (terabits.HasValue)
            {
                return FromTerabits(terabits.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Information from nullable Terabytes.
        /// </summary>
        public static Information? FromTerabytes(QuantityValueDecimal? terabytes)
        {
            if (terabytes.HasValue)
            {
                return FromTerabytes(terabytes.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="InformationUnit" /> to <see cref="Information" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Information unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Information From(double value, InformationUnit fromUnit)
#else
        public static Information From(QuantityValueDecimal value, InformationUnit fromUnit)
#endif
        {
            return new Information((decimal)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="InformationUnit" /> to <see cref="Information" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Information unit value.</returns>
        public static Information? From(QuantityValueDecimal? value, InformationUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Information((decimal)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(InformationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          InformationUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Information operator -(Information right)
        {
            return new Information(-right.Value, right.Unit);
        }

        public static Information operator +(Information left, Information right)
        {
            return new Information(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Information operator -(Information left, Information right)
        {
            return new Information(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Information operator *(decimal left, Information right)
        {
            return new Information(left * right.Value, right.Unit);
        }

        public static Information operator *(Information left, decimal right)
        {
            return new Information(left.Value * right, left.Unit);
        }

        public static Information operator /(Information left, decimal right)
        {
            return new Information(left.Value / right, left.Unit);
        }

        public static double operator /(Information left, Information right)
        {
            return left.Bits / right.Bits;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Information)) throw new ArgumentException("Expected type Information.", "obj");
            return CompareTo((Information) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Information other)
        {
            return AsBaseUnitBits().CompareTo(other.AsBaseUnitBits());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Information left, Information right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Information left, Information right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Information left, Information right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Information left, Information right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        public static bool operator ==(Information left, Information right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        public static bool operator !=(Information left, Information right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitBits().Equals(((Information) obj).AsBaseUnitBits());
        }

        /// <summary>
        ///     Compare equality to another Information by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Information other, Information maxError)
        {
            return Math.Abs(AsBaseUnitBits() - other.AsBaseUnitBits()) <= maxError.AsBaseUnitBits();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(InformationUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            decimal baseUnitValue = AsBaseUnitBits();

            switch (unit)
            {
                case InformationUnit.Bit: return Convert.ToDouble(baseUnitValue);
                case InformationUnit.Byte: return Convert.ToDouble(baseUnitValue/8m);
                case InformationUnit.Exabit: return Convert.ToDouble((baseUnitValue) / 1e18m);
                case InformationUnit.Exabyte: return Convert.ToDouble((baseUnitValue/8m) / 1e18m);
                case InformationUnit.Exbibit: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Exbibyte: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Gibibit: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024));
                case InformationUnit.Gibibyte: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024));
                case InformationUnit.Gigabit: return Convert.ToDouble((baseUnitValue) / 1e9m);
                case InformationUnit.Gigabyte: return Convert.ToDouble((baseUnitValue/8m) / 1e9m);
                case InformationUnit.Kibibit: return Convert.ToDouble((baseUnitValue) / 1024m);
                case InformationUnit.Kibibyte: return Convert.ToDouble((baseUnitValue/8m) / 1024m);
                case InformationUnit.Kilobit: return Convert.ToDouble((baseUnitValue) / 1e3m);
                case InformationUnit.Kilobyte: return Convert.ToDouble((baseUnitValue/8m) / 1e3m);
                case InformationUnit.Mebibit: return Convert.ToDouble((baseUnitValue) / (1024m * 1024));
                case InformationUnit.Mebibyte: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024));
                case InformationUnit.Megabit: return Convert.ToDouble((baseUnitValue) / 1e6m);
                case InformationUnit.Megabyte: return Convert.ToDouble((baseUnitValue/8m) / 1e6m);
                case InformationUnit.Pebibit: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Pebibyte: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Petabit: return Convert.ToDouble((baseUnitValue) / 1e15m);
                case InformationUnit.Petabyte: return Convert.ToDouble((baseUnitValue/8m) / 1e15m);
                case InformationUnit.Tebibit: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024));
                case InformationUnit.Tebibyte: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024));
                case InformationUnit.Terabit: return Convert.ToDouble((baseUnitValue) / 1e12m);
                case InformationUnit.Terabyte: return Convert.ToDouble((baseUnitValue/8m) / 1e12m);

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Information Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Information Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Information, InformationUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    InformationUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromBits(x.Bits + y.Bits));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Information result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Information result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Information);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static InformationUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static InformationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static InformationUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<InformationUnit>(str.Trim());

            if (unit == InformationUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized InformationUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is Bit
        /// </summary>
        public static InformationUnit ToStringDefaultUnit { get; set; } = InformationUnit.Bit;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(InformationUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          InformationUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            InformationUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            InformationUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Information
        /// </summary>
        public static Information MaxValue => new Information(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Information
        /// </summary>
        public static Information MinValue => new Information(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnitBits()
        {
			if (Unit == InformationUnit.Bit) { return _value; }

            switch (Unit)
            {
                case InformationUnit.Bit: return Convert.ToDecimal(_value);
                case InformationUnit.Byte: return Convert.ToDecimal(_value*8m);
                case InformationUnit.Exabit: return Convert.ToDecimal((_value) * 1e18m);
                case InformationUnit.Exabyte: return Convert.ToDecimal((_value*8m) * 1e18m);
                case InformationUnit.Exbibit: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Exbibyte: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Gibibit: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024));
                case InformationUnit.Gibibyte: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024));
                case InformationUnit.Gigabit: return Convert.ToDecimal((_value) * 1e9m);
                case InformationUnit.Gigabyte: return Convert.ToDecimal((_value*8m) * 1e9m);
                case InformationUnit.Kibibit: return Convert.ToDecimal((_value) * 1024m);
                case InformationUnit.Kibibyte: return Convert.ToDecimal((_value*8m) * 1024m);
                case InformationUnit.Kilobit: return Convert.ToDecimal((_value) * 1e3m);
                case InformationUnit.Kilobyte: return Convert.ToDecimal((_value*8m) * 1e3m);
                case InformationUnit.Mebibit: return Convert.ToDecimal((_value) * (1024m * 1024));
                case InformationUnit.Mebibyte: return Convert.ToDecimal((_value*8m) * (1024m * 1024));
                case InformationUnit.Megabit: return Convert.ToDecimal((_value) * 1e6m);
                case InformationUnit.Megabyte: return Convert.ToDecimal((_value*8m) * 1e6m);
                case InformationUnit.Pebibit: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Pebibyte: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024 * 1024));
                case InformationUnit.Petabit: return Convert.ToDecimal((_value) * 1e15m);
                case InformationUnit.Petabyte: return Convert.ToDecimal((_value*8m) * 1e15m);
                case InformationUnit.Tebibit: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024));
                case InformationUnit.Tebibyte: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024));
                case InformationUnit.Terabit: return Convert.ToDecimal((_value) * 1e12m);
                case InformationUnit.Terabyte: return Convert.ToDecimal((_value*8m) * 1e12m);
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private decimal AsBaseNumericType(InformationUnit unit) => Convert.ToDecimal(As(unit));
	}
}
