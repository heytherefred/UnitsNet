//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class Flow
#else
    public partial struct Flow : IComparable, IComparable<Flow>
#endif
    {
        private readonly double _value;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        public FlowUnit Unit { get; }

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public Flow() : this(0, BaseUnit)
        {
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public Flow(double cubicmeterspersecond)
        {
            _value = Convert.ToDouble(cubicmeterspersecond);
            Unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          Flow(double numericValue, FlowUnit unit)
        {
            _value = numericValue;
            Unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Flow(long cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        Flow(decimal cubicmeterspersecond) : this(Convert.ToDouble(cubicmeterspersecond), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.Flow;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static FlowUnit BaseUnit => FlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     All units of measurement for the Flow quantity.
        /// </summary>
        public static FlowUnit[] Units { get; } = Enum.GetValues(typeof(FlowUnit)).Cast<FlowUnit>().ToArray();
        /// <summary>
        ///     Get Flow in CentilitersPerMinute.
        /// </summary>
        public double CentilitersPerMinute => As(FlowUnit.CentilitersPerMinute);
        /// <summary>
        ///     Get Flow in CubicDecimetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicDecimetersPerMinute => As(FlowUnit.CubicDecimeterPerMinute);
        /// <summary>
        ///     Get Flow in CubicFeetPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerHour => As(FlowUnit.CubicFootPerHour);
        /// <summary>
        ///     Get Flow in CubicFeetPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerMinute => As(FlowUnit.CubicFootPerMinute);
        /// <summary>
        ///     Get Flow in CubicFeetPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicFeetPerSecond => As(FlowUnit.CubicFootPerSecond);
        /// <summary>
        ///     Get Flow in CubicMetersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerHour => As(FlowUnit.CubicMeterPerHour);
        /// <summary>
        ///     Get Flow in CubicMetersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerMinute => As(FlowUnit.CubicMeterPerMinute);
        /// <summary>
        ///     Get Flow in CubicMetersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicMetersPerSecond => As(FlowUnit.CubicMeterPerSecond);
        /// <summary>
        ///     Get Flow in CubicYardsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerHour => As(FlowUnit.CubicYardPerHour);
        /// <summary>
        ///     Get Flow in CubicYardsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerMinute => As(FlowUnit.CubicYardPerMinute);
        /// <summary>
        ///     Get Flow in CubicYardsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double CubicYardsPerSecond => As(FlowUnit.CubicYardPerSecond);
        /// <summary>
        ///     Get Flow in DecilitersPerMinute.
        /// </summary>
        public double DecilitersPerMinute => As(FlowUnit.DecilitersPerMinute);
        /// <summary>
        ///     Get Flow in KilolitersPerMinute.
        /// </summary>
        public double KilolitersPerMinute => As(FlowUnit.KilolitersPerMinute);
        /// <summary>
        ///     Get Flow in LitersPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerHour => As(FlowUnit.LitersPerHour);
        /// <summary>
        ///     Get Flow in LitersPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerMinute => As(FlowUnit.LitersPerMinute);
        /// <summary>
        ///     Get Flow in LitersPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double LitersPerSecond => As(FlowUnit.LitersPerSecond);
        /// <summary>
        ///     Get Flow in MicrolitersPerMinute.
        /// </summary>
        public double MicrolitersPerMinute => As(FlowUnit.MicrolitersPerMinute);
        /// <summary>
        ///     Get Flow in MillilitersPerMinute.
        /// </summary>
        public double MillilitersPerMinute => As(FlowUnit.MillilitersPerMinute);
        /// <summary>
        ///     Get Flow in MillionUsGallonsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double MillionUsGallonsPerDay => As(FlowUnit.MillionUsGallonsPerDay);
        /// <summary>
        ///     Get Flow in NanolitersPerMinute.
        /// </summary>
        public double NanolitersPerMinute => As(FlowUnit.NanolitersPerMinute);
        /// <summary>
        ///     Get Flow in OilBarrelsPerDay.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double OilBarrelsPerDay => As(FlowUnit.OilBarrelsPerDay);
        /// <summary>
        ///     Get Flow in UsGallonsPerHour.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerHour => As(FlowUnit.UsGallonsPerHour);
        /// <summary>
        ///     Get Flow in UsGallonsPerMinute.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerMinute => As(FlowUnit.UsGallonsPerMinute);
        /// <summary>
        ///     Get Flow in UsGallonsPerSecond.
        /// </summary>
        [System.Obsolete("Deprecated due to github issue #363, please use VolumeFlow instead")]
        public double UsGallonsPerSecond => As(FlowUnit.UsGallonsPerSecond);

        #endregion

        #region Static

        public static Flow Zero => new Flow(0, BaseUnit);

        /// <summary>
        ///     Get Flow from CentilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCentilitersPerMinute(double centilitersperminute)
#else
        public static Flow FromCentilitersPerMinute(QuantityValue centilitersperminute)
#endif
        {
            double value = (double) centilitersperminute;
            return new Flow(value, FlowUnit.CentilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicDecimetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicDecimetersPerMinute(double cubicdecimetersperminute)
#else
        public static Flow FromCubicDecimetersPerMinute(QuantityValue cubicdecimetersperminute)
#endif
        {
            double value = (double) cubicdecimetersperminute;
            return new Flow(value, FlowUnit.CubicDecimeterPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerHour(double cubicfeetperhour)
#else
        public static Flow FromCubicFeetPerHour(QuantityValue cubicfeetperhour)
#endif
        {
            double value = (double) cubicfeetperhour;
            return new Flow(value, FlowUnit.CubicFootPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerMinute(double cubicfeetperminute)
#else
        public static Flow FromCubicFeetPerMinute(QuantityValue cubicfeetperminute)
#endif
        {
            double value = (double) cubicfeetperminute;
            return new Flow(value, FlowUnit.CubicFootPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicFeetPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicFeetPerSecond(double cubicfeetpersecond)
#else
        public static Flow FromCubicFeetPerSecond(QuantityValue cubicfeetpersecond)
#endif
        {
            double value = (double) cubicfeetpersecond;
            return new Flow(value, FlowUnit.CubicFootPerSecond);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerHour(double cubicmetersperhour)
#else
        public static Flow FromCubicMetersPerHour(QuantityValue cubicmetersperhour)
#endif
        {
            double value = (double) cubicmetersperhour;
            return new Flow(value, FlowUnit.CubicMeterPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerMinute(double cubicmetersperminute)
#else
        public static Flow FromCubicMetersPerMinute(QuantityValue cubicmetersperminute)
#endif
        {
            double value = (double) cubicmetersperminute;
            return new Flow(value, FlowUnit.CubicMeterPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicMetersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicMetersPerSecond(double cubicmeterspersecond)
#else
        public static Flow FromCubicMetersPerSecond(QuantityValue cubicmeterspersecond)
#endif
        {
            double value = (double) cubicmeterspersecond;
            return new Flow(value, FlowUnit.CubicMeterPerSecond);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerHour(double cubicyardsperhour)
#else
        public static Flow FromCubicYardsPerHour(QuantityValue cubicyardsperhour)
#endif
        {
            double value = (double) cubicyardsperhour;
            return new Flow(value, FlowUnit.CubicYardPerHour);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerMinute(double cubicyardsperminute)
#else
        public static Flow FromCubicYardsPerMinute(QuantityValue cubicyardsperminute)
#endif
        {
            double value = (double) cubicyardsperminute;
            return new Flow(value, FlowUnit.CubicYardPerMinute);
        }

        /// <summary>
        ///     Get Flow from CubicYardsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromCubicYardsPerSecond(double cubicyardspersecond)
#else
        public static Flow FromCubicYardsPerSecond(QuantityValue cubicyardspersecond)
#endif
        {
            double value = (double) cubicyardspersecond;
            return new Flow(value, FlowUnit.CubicYardPerSecond);
        }

        /// <summary>
        ///     Get Flow from DecilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromDecilitersPerMinute(double decilitersperminute)
#else
        public static Flow FromDecilitersPerMinute(QuantityValue decilitersperminute)
#endif
        {
            double value = (double) decilitersperminute;
            return new Flow(value, FlowUnit.DecilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from KilolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromKilolitersPerMinute(double kilolitersperminute)
#else
        public static Flow FromKilolitersPerMinute(QuantityValue kilolitersperminute)
#endif
        {
            double value = (double) kilolitersperminute;
            return new Flow(value, FlowUnit.KilolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from LitersPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerHour(double litersperhour)
#else
        public static Flow FromLitersPerHour(QuantityValue litersperhour)
#endif
        {
            double value = (double) litersperhour;
            return new Flow(value, FlowUnit.LitersPerHour);
        }

        /// <summary>
        ///     Get Flow from LitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerMinute(double litersperminute)
#else
        public static Flow FromLitersPerMinute(QuantityValue litersperminute)
#endif
        {
            double value = (double) litersperminute;
            return new Flow(value, FlowUnit.LitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from LitersPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromLitersPerSecond(double literspersecond)
#else
        public static Flow FromLitersPerSecond(QuantityValue literspersecond)
#endif
        {
            double value = (double) literspersecond;
            return new Flow(value, FlowUnit.LitersPerSecond);
        }

        /// <summary>
        ///     Get Flow from MicrolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMicrolitersPerMinute(double microlitersperminute)
#else
        public static Flow FromMicrolitersPerMinute(QuantityValue microlitersperminute)
#endif
        {
            double value = (double) microlitersperminute;
            return new Flow(value, FlowUnit.MicrolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from MillilitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMillilitersPerMinute(double millilitersperminute)
#else
        public static Flow FromMillilitersPerMinute(QuantityValue millilitersperminute)
#endif
        {
            double value = (double) millilitersperminute;
            return new Flow(value, FlowUnit.MillilitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from MillionUsGallonsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromMillionUsGallonsPerDay(double millionusgallonsperday)
#else
        public static Flow FromMillionUsGallonsPerDay(QuantityValue millionusgallonsperday)
#endif
        {
            double value = (double) millionusgallonsperday;
            return new Flow(value, FlowUnit.MillionUsGallonsPerDay);
        }

        /// <summary>
        ///     Get Flow from NanolitersPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromNanolitersPerMinute(double nanolitersperminute)
#else
        public static Flow FromNanolitersPerMinute(QuantityValue nanolitersperminute)
#endif
        {
            double value = (double) nanolitersperminute;
            return new Flow(value, FlowUnit.NanolitersPerMinute);
        }

        /// <summary>
        ///     Get Flow from OilBarrelsPerDay.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromOilBarrelsPerDay(double oilbarrelsperday)
#else
        public static Flow FromOilBarrelsPerDay(QuantityValue oilbarrelsperday)
#endif
        {
            double value = (double) oilbarrelsperday;
            return new Flow(value, FlowUnit.OilBarrelsPerDay);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerHour.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerHour(double usgallonsperhour)
#else
        public static Flow FromUsGallonsPerHour(QuantityValue usgallonsperhour)
#endif
        {
            double value = (double) usgallonsperhour;
            return new Flow(value, FlowUnit.UsGallonsPerHour);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerMinute(double usgallonsperminute)
#else
        public static Flow FromUsGallonsPerMinute(QuantityValue usgallonsperminute)
#endif
        {
            double value = (double) usgallonsperminute;
            return new Flow(value, FlowUnit.UsGallonsPerMinute);
        }

        /// <summary>
        ///     Get Flow from UsGallonsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static Flow FromUsGallonsPerSecond(double usgallonspersecond)
#else
        public static Flow FromUsGallonsPerSecond(QuantityValue usgallonspersecond)
#endif
        {
            double value = (double) usgallonspersecond;
            return new Flow(value, FlowUnit.UsGallonsPerSecond);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable Flow from nullable CentilitersPerMinute.
        /// </summary>
        public static Flow? FromCentilitersPerMinute(QuantityValue? centilitersperminute)
        {
            if (centilitersperminute.HasValue)
            {
                return FromCentilitersPerMinute(centilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicDecimetersPerMinute.
        /// </summary>
        public static Flow? FromCubicDecimetersPerMinute(QuantityValue? cubicdecimetersperminute)
        {
            if (cubicdecimetersperminute.HasValue)
            {
                return FromCubicDecimetersPerMinute(cubicdecimetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicFeetPerHour.
        /// </summary>
        public static Flow? FromCubicFeetPerHour(QuantityValue? cubicfeetperhour)
        {
            if (cubicfeetperhour.HasValue)
            {
                return FromCubicFeetPerHour(cubicfeetperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicFeetPerMinute.
        /// </summary>
        public static Flow? FromCubicFeetPerMinute(QuantityValue? cubicfeetperminute)
        {
            if (cubicfeetperminute.HasValue)
            {
                return FromCubicFeetPerMinute(cubicfeetperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicFeetPerSecond.
        /// </summary>
        public static Flow? FromCubicFeetPerSecond(QuantityValue? cubicfeetpersecond)
        {
            if (cubicfeetpersecond.HasValue)
            {
                return FromCubicFeetPerSecond(cubicfeetpersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicMetersPerHour.
        /// </summary>
        public static Flow? FromCubicMetersPerHour(QuantityValue? cubicmetersperhour)
        {
            if (cubicmetersperhour.HasValue)
            {
                return FromCubicMetersPerHour(cubicmetersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicMetersPerMinute.
        /// </summary>
        public static Flow? FromCubicMetersPerMinute(QuantityValue? cubicmetersperminute)
        {
            if (cubicmetersperminute.HasValue)
            {
                return FromCubicMetersPerMinute(cubicmetersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicMetersPerSecond.
        /// </summary>
        public static Flow? FromCubicMetersPerSecond(QuantityValue? cubicmeterspersecond)
        {
            if (cubicmeterspersecond.HasValue)
            {
                return FromCubicMetersPerSecond(cubicmeterspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicYardsPerHour.
        /// </summary>
        public static Flow? FromCubicYardsPerHour(QuantityValue? cubicyardsperhour)
        {
            if (cubicyardsperhour.HasValue)
            {
                return FromCubicYardsPerHour(cubicyardsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicYardsPerMinute.
        /// </summary>
        public static Flow? FromCubicYardsPerMinute(QuantityValue? cubicyardsperminute)
        {
            if (cubicyardsperminute.HasValue)
            {
                return FromCubicYardsPerMinute(cubicyardsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable CubicYardsPerSecond.
        /// </summary>
        public static Flow? FromCubicYardsPerSecond(QuantityValue? cubicyardspersecond)
        {
            if (cubicyardspersecond.HasValue)
            {
                return FromCubicYardsPerSecond(cubicyardspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable DecilitersPerMinute.
        /// </summary>
        public static Flow? FromDecilitersPerMinute(QuantityValue? decilitersperminute)
        {
            if (decilitersperminute.HasValue)
            {
                return FromDecilitersPerMinute(decilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable KilolitersPerMinute.
        /// </summary>
        public static Flow? FromKilolitersPerMinute(QuantityValue? kilolitersperminute)
        {
            if (kilolitersperminute.HasValue)
            {
                return FromKilolitersPerMinute(kilolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable LitersPerHour.
        /// </summary>
        public static Flow? FromLitersPerHour(QuantityValue? litersperhour)
        {
            if (litersperhour.HasValue)
            {
                return FromLitersPerHour(litersperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable LitersPerMinute.
        /// </summary>
        public static Flow? FromLitersPerMinute(QuantityValue? litersperminute)
        {
            if (litersperminute.HasValue)
            {
                return FromLitersPerMinute(litersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable LitersPerSecond.
        /// </summary>
        public static Flow? FromLitersPerSecond(QuantityValue? literspersecond)
        {
            if (literspersecond.HasValue)
            {
                return FromLitersPerSecond(literspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable MicrolitersPerMinute.
        /// </summary>
        public static Flow? FromMicrolitersPerMinute(QuantityValue? microlitersperminute)
        {
            if (microlitersperminute.HasValue)
            {
                return FromMicrolitersPerMinute(microlitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable MillilitersPerMinute.
        /// </summary>
        public static Flow? FromMillilitersPerMinute(QuantityValue? millilitersperminute)
        {
            if (millilitersperminute.HasValue)
            {
                return FromMillilitersPerMinute(millilitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable MillionUsGallonsPerDay.
        /// </summary>
        public static Flow? FromMillionUsGallonsPerDay(QuantityValue? millionusgallonsperday)
        {
            if (millionusgallonsperday.HasValue)
            {
                return FromMillionUsGallonsPerDay(millionusgallonsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable NanolitersPerMinute.
        /// </summary>
        public static Flow? FromNanolitersPerMinute(QuantityValue? nanolitersperminute)
        {
            if (nanolitersperminute.HasValue)
            {
                return FromNanolitersPerMinute(nanolitersperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable OilBarrelsPerDay.
        /// </summary>
        public static Flow? FromOilBarrelsPerDay(QuantityValue? oilbarrelsperday)
        {
            if (oilbarrelsperday.HasValue)
            {
                return FromOilBarrelsPerDay(oilbarrelsperday.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable UsGallonsPerHour.
        /// </summary>
        public static Flow? FromUsGallonsPerHour(QuantityValue? usgallonsperhour)
        {
            if (usgallonsperhour.HasValue)
            {
                return FromUsGallonsPerHour(usgallonsperhour.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable UsGallonsPerMinute.
        /// </summary>
        public static Flow? FromUsGallonsPerMinute(QuantityValue? usgallonsperminute)
        {
            if (usgallonsperminute.HasValue)
            {
                return FromUsGallonsPerMinute(usgallonsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable Flow from nullable UsGallonsPerSecond.
        /// </summary>
        public static Flow? FromUsGallonsPerSecond(QuantityValue? usgallonspersecond)
        {
            if (usgallonspersecond.HasValue)
            {
                return FromUsGallonsPerSecond(usgallonspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="FlowUnit" /> to <see cref="Flow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Flow unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static Flow From(double value, FlowUnit fromUnit)
#else
        public static Flow From(QuantityValue value, FlowUnit fromUnit)
#endif
        {
            return new Flow((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="FlowUnit" /> to <see cref="Flow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Flow unit value.</returns>
        public static Flow? From(QuantityValue? value, FlowUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new Flow((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(FlowUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          FlowUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static Flow operator -(Flow right)
        {
            return new Flow(-right.Value, right.Unit);
        }

        public static Flow operator +(Flow left, Flow right)
        {
            return new Flow(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Flow operator -(Flow left, Flow right)
        {
            return new Flow(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static Flow operator *(double left, Flow right)
        {
            return new Flow(left * right.Value, right.Unit);
        }

        public static Flow operator *(Flow left, double right)
        {
            return new Flow(left.Value * right, left.Unit);
        }

        public static Flow operator /(Flow left, double right)
        {
            return new Flow(left.Value / right, left.Unit);
        }

        public static double operator /(Flow left, Flow right)
        {
            return left.CubicMetersPerSecond / right.CubicMetersPerSecond;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is Flow)) throw new ArgumentException("Expected type Flow.", "obj");
            return CompareTo((Flow) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(Flow other)
        {
            return AsBaseUnitCubicMetersPerSecond().CompareTo(other.AsBaseUnitCubicMetersPerSecond());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(Flow left, Flow right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(Flow left, Flow right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(Flow left, Flow right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(Flow left, Flow right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(Flow left, Flow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(Flow left, Flow right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitCubicMetersPerSecond().Equals(((Flow) obj).AsBaseUnitCubicMetersPerSecond());
        }

        /// <summary>
        ///     Compare equality to another Flow by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(Flow other, Flow maxError)
        {
            return Math.Abs(AsBaseUnitCubicMetersPerSecond() - other.AsBaseUnitCubicMetersPerSecond()) <= maxError.AsBaseUnitCubicMetersPerSecond();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(FlowUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitCubicMetersPerSecond();

            switch (unit)
            {
                case FlowUnit.CentilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-2d;
                case FlowUnit.CubicDecimeterPerMinute: return baseUnitValue*60000.00000;
                case FlowUnit.CubicFootPerHour: return baseUnitValue/7.8657907199999087346816086183876e-6;
                case FlowUnit.CubicFootPerMinute: return baseUnitValue*2118.88000326;
                case FlowUnit.CubicFootPerSecond: return baseUnitValue*35.314666721;
                case FlowUnit.CubicMeterPerHour: return baseUnitValue*3600;
                case FlowUnit.CubicMeterPerMinute: return baseUnitValue*60;
                case FlowUnit.CubicMeterPerSecond: return baseUnitValue;
                case FlowUnit.CubicYardPerHour: return baseUnitValue/2.1237634944E-4;
                case FlowUnit.CubicYardPerMinute: return baseUnitValue/0.0127425809664;
                case FlowUnit.CubicYardPerSecond: return baseUnitValue/0.764554857984;
                case FlowUnit.DecilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-1d;
                case FlowUnit.KilolitersPerMinute: return (baseUnitValue*60000.00000) / 1e3d;
                case FlowUnit.LitersPerHour: return baseUnitValue*3600000.000;
                case FlowUnit.LitersPerMinute: return baseUnitValue*60000.00000;
                case FlowUnit.LitersPerSecond: return baseUnitValue*1000;
                case FlowUnit.MicrolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-6d;
                case FlowUnit.MillilitersPerMinute: return (baseUnitValue*60000.00000) / 1e-3d;
                case FlowUnit.MillionUsGallonsPerDay: return baseUnitValue*22.824465227;
                case FlowUnit.NanolitersPerMinute: return (baseUnitValue*60000.00000) / 1e-9d;
                case FlowUnit.OilBarrelsPerDay: return baseUnitValue/1.8401307283333333333333333333333e-6;
                case FlowUnit.UsGallonsPerHour: return baseUnitValue*951019.38848933424;
                case FlowUnit.UsGallonsPerMinute: return baseUnitValue*15850.323141489;
                case FlowUnit.UsGallonsPerSecond: return baseUnitValue*264.1720523581484;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Flow Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Flow Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<Flow, FlowUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    FlowUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromCubicMetersPerSecond(x.CubicMetersPerSecond + y.CubicMetersPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out Flow result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out Flow result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(Flow);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static FlowUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static FlowUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static FlowUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<FlowUnit>(str.Trim());

            if (unit == FlowUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized FlowUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is CubicMeterPerSecond
        /// </summary>
        public static FlowUnit ToStringDefaultUnit { get; set; } = FlowUnit.CubicMeterPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(FlowUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          FlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            FlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            FlowUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of Flow
        /// </summary>
        public static Flow MaxValue => new Flow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Flow
        /// </summary>
        public static Flow MinValue => new Flow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitCubicMetersPerSecond()
        {
			if (Unit == FlowUnit.CubicMeterPerSecond) { return _value; }

            switch (Unit)
            {
                case FlowUnit.CentilitersPerMinute: return (_value/60000.00000) * 1e-2d;
                case FlowUnit.CubicDecimeterPerMinute: return _value/60000.00000;
                case FlowUnit.CubicFootPerHour: return _value*7.8657907199999087346816086183876e-6;
                case FlowUnit.CubicFootPerMinute: return _value/2118.88000326;
                case FlowUnit.CubicFootPerSecond: return _value/35.314666721;
                case FlowUnit.CubicMeterPerHour: return _value/3600;
                case FlowUnit.CubicMeterPerMinute: return _value/60;
                case FlowUnit.CubicMeterPerSecond: return _value;
                case FlowUnit.CubicYardPerHour: return _value*2.1237634944E-4;
                case FlowUnit.CubicYardPerMinute: return _value*0.0127425809664;
                case FlowUnit.CubicYardPerSecond: return _value*0.764554857984;
                case FlowUnit.DecilitersPerMinute: return (_value/60000.00000) * 1e-1d;
                case FlowUnit.KilolitersPerMinute: return (_value/60000.00000) * 1e3d;
                case FlowUnit.LitersPerHour: return _value/3600000.000;
                case FlowUnit.LitersPerMinute: return _value/60000.00000;
                case FlowUnit.LitersPerSecond: return _value/1000;
                case FlowUnit.MicrolitersPerMinute: return (_value/60000.00000) * 1e-6d;
                case FlowUnit.MillilitersPerMinute: return (_value/60000.00000) * 1e-3d;
                case FlowUnit.MillionUsGallonsPerDay: return _value/22.824465227;
                case FlowUnit.NanolitersPerMinute: return (_value/60000.00000) * 1e-9d;
                case FlowUnit.OilBarrelsPerDay: return _value*1.8401307283333333333333333333333e-6;
                case FlowUnit.UsGallonsPerHour: return _value/951019.38848933424;
                case FlowUnit.UsGallonsPerMinute: return _value/15850.323141489;
                case FlowUnit.UsGallonsPerSecond: return _value/264.1720523581484;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(FlowUnit unit) => Convert.ToDouble(As(unit));
	}
}
