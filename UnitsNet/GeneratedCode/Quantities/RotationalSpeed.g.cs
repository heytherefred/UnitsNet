//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Rotational speed (sometimes called speed of revolution) is the number of complete rotations, revolutions, cycles, or turns per time unit. Rotational speed is a cyclic frequency, measured in radians per second or in hertz in the SI System by scientists, or in revolutions per minute (rpm or min-1) or revolutions per second in everyday life. The symbol for rotational speed is ω (the Greek lowercase letter "omega").
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class RotationalSpeed
#else
    public partial struct RotationalSpeed : IComparable, IComparable<RotationalSpeed>
#endif
    {
        private readonly double _value;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public double Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        public RotationalSpeedUnit Unit { get; }

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public RotationalSpeed() : this(0, BaseUnit)
        {
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public RotationalSpeed(double radianspersecond)
        {
            _value = Convert.ToDouble(radianspersecond);
            Unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          RotationalSpeed(double numericValue, RotationalSpeedUnit unit)
        {
            _value = numericValue;
            Unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        RotationalSpeed(long radianspersecond) : this(Convert.ToDouble(radianspersecond), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        RotationalSpeed(decimal radianspersecond) : this(Convert.ToDouble(radianspersecond), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.RotationalSpeed;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static RotationalSpeedUnit BaseUnit => RotationalSpeedUnit.RadianPerSecond;

        /// <summary>
        ///     All units of measurement for the RotationalSpeed quantity.
        /// </summary>
        public static RotationalSpeedUnit[] Units { get; } = Enum.GetValues(typeof(RotationalSpeedUnit)).Cast<RotationalSpeedUnit>().ToArray();
        /// <summary>
        ///     Get RotationalSpeed in CentiradiansPerSecond.
        /// </summary>
        public double CentiradiansPerSecond => As(RotationalSpeedUnit.CentiradianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in DeciradiansPerSecond.
        /// </summary>
        public double DeciradiansPerSecond => As(RotationalSpeedUnit.DeciradianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in DegreesPerMinute.
        /// </summary>
        public double DegreesPerMinute => As(RotationalSpeedUnit.DegreePerMinute);
        /// <summary>
        ///     Get RotationalSpeed in DegreesPerSecond.
        /// </summary>
        public double DegreesPerSecond => As(RotationalSpeedUnit.DegreePerSecond);
        /// <summary>
        ///     Get RotationalSpeed in MicrodegreesPerSecond.
        /// </summary>
        public double MicrodegreesPerSecond => As(RotationalSpeedUnit.MicrodegreePerSecond);
        /// <summary>
        ///     Get RotationalSpeed in MicroradiansPerSecond.
        /// </summary>
        public double MicroradiansPerSecond => As(RotationalSpeedUnit.MicroradianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in MillidegreesPerSecond.
        /// </summary>
        public double MillidegreesPerSecond => As(RotationalSpeedUnit.MillidegreePerSecond);
        /// <summary>
        ///     Get RotationalSpeed in MilliradiansPerSecond.
        /// </summary>
        public double MilliradiansPerSecond => As(RotationalSpeedUnit.MilliradianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in NanodegreesPerSecond.
        /// </summary>
        public double NanodegreesPerSecond => As(RotationalSpeedUnit.NanodegreePerSecond);
        /// <summary>
        ///     Get RotationalSpeed in NanoradiansPerSecond.
        /// </summary>
        public double NanoradiansPerSecond => As(RotationalSpeedUnit.NanoradianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in RadiansPerSecond.
        /// </summary>
        public double RadiansPerSecond => As(RotationalSpeedUnit.RadianPerSecond);
        /// <summary>
        ///     Get RotationalSpeed in RevolutionsPerMinute.
        /// </summary>
        public double RevolutionsPerMinute => As(RotationalSpeedUnit.RevolutionPerMinute);
        /// <summary>
        ///     Get RotationalSpeed in RevolutionsPerSecond.
        /// </summary>
        public double RevolutionsPerSecond => As(RotationalSpeedUnit.RevolutionPerSecond);

        #endregion

        #region Static

        public static RotationalSpeed Zero => new RotationalSpeed(0, BaseUnit);

        /// <summary>
        ///     Get RotationalSpeed from CentiradiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromCentiradiansPerSecond(double centiradianspersecond)
#else
        public static RotationalSpeed FromCentiradiansPerSecond(QuantityValue centiradianspersecond)
#endif
        {
            double value = (double) centiradianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.CentiradianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from DeciradiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromDeciradiansPerSecond(double deciradianspersecond)
#else
        public static RotationalSpeed FromDeciradiansPerSecond(QuantityValue deciradianspersecond)
#endif
        {
            double value = (double) deciradianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.DeciradianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from DegreesPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromDegreesPerMinute(double degreesperminute)
#else
        public static RotationalSpeed FromDegreesPerMinute(QuantityValue degreesperminute)
#endif
        {
            double value = (double) degreesperminute;
            return new RotationalSpeed(value, RotationalSpeedUnit.DegreePerMinute);
        }

        /// <summary>
        ///     Get RotationalSpeed from DegreesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromDegreesPerSecond(double degreespersecond)
#else
        public static RotationalSpeed FromDegreesPerSecond(QuantityValue degreespersecond)
#endif
        {
            double value = (double) degreespersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.DegreePerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from MicrodegreesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromMicrodegreesPerSecond(double microdegreespersecond)
#else
        public static RotationalSpeed FromMicrodegreesPerSecond(QuantityValue microdegreespersecond)
#endif
        {
            double value = (double) microdegreespersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.MicrodegreePerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from MicroradiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromMicroradiansPerSecond(double microradianspersecond)
#else
        public static RotationalSpeed FromMicroradiansPerSecond(QuantityValue microradianspersecond)
#endif
        {
            double value = (double) microradianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.MicroradianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from MillidegreesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromMillidegreesPerSecond(double millidegreespersecond)
#else
        public static RotationalSpeed FromMillidegreesPerSecond(QuantityValue millidegreespersecond)
#endif
        {
            double value = (double) millidegreespersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.MillidegreePerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from MilliradiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromMilliradiansPerSecond(double milliradianspersecond)
#else
        public static RotationalSpeed FromMilliradiansPerSecond(QuantityValue milliradianspersecond)
#endif
        {
            double value = (double) milliradianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.MilliradianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from NanodegreesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromNanodegreesPerSecond(double nanodegreespersecond)
#else
        public static RotationalSpeed FromNanodegreesPerSecond(QuantityValue nanodegreespersecond)
#endif
        {
            double value = (double) nanodegreespersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.NanodegreePerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from NanoradiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromNanoradiansPerSecond(double nanoradianspersecond)
#else
        public static RotationalSpeed FromNanoradiansPerSecond(QuantityValue nanoradianspersecond)
#endif
        {
            double value = (double) nanoradianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.NanoradianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from RadiansPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromRadiansPerSecond(double radianspersecond)
#else
        public static RotationalSpeed FromRadiansPerSecond(QuantityValue radianspersecond)
#endif
        {
            double value = (double) radianspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.RadianPerSecond);
        }

        /// <summary>
        ///     Get RotationalSpeed from RevolutionsPerMinute.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromRevolutionsPerMinute(double revolutionsperminute)
#else
        public static RotationalSpeed FromRevolutionsPerMinute(QuantityValue revolutionsperminute)
#endif
        {
            double value = (double) revolutionsperminute;
            return new RotationalSpeed(value, RotationalSpeedUnit.RevolutionPerMinute);
        }

        /// <summary>
        ///     Get RotationalSpeed from RevolutionsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static RotationalSpeed FromRevolutionsPerSecond(double revolutionspersecond)
#else
        public static RotationalSpeed FromRevolutionsPerSecond(QuantityValue revolutionspersecond)
#endif
        {
            double value = (double) revolutionspersecond;
            return new RotationalSpeed(value, RotationalSpeedUnit.RevolutionPerSecond);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable RotationalSpeed from nullable CentiradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromCentiradiansPerSecond(QuantityValue? centiradianspersecond)
        {
            if (centiradianspersecond.HasValue)
            {
                return FromCentiradiansPerSecond(centiradianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DeciradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromDeciradiansPerSecond(QuantityValue? deciradianspersecond)
        {
            if (deciradianspersecond.HasValue)
            {
                return FromDeciradiansPerSecond(deciradianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DegreesPerMinute.
        /// </summary>
        public static RotationalSpeed? FromDegreesPerMinute(QuantityValue? degreesperminute)
        {
            if (degreesperminute.HasValue)
            {
                return FromDegreesPerMinute(degreesperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable DegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromDegreesPerSecond(QuantityValue? degreespersecond)
        {
            if (degreespersecond.HasValue)
            {
                return FromDegreesPerSecond(degreespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MicrodegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMicrodegreesPerSecond(QuantityValue? microdegreespersecond)
        {
            if (microdegreespersecond.HasValue)
            {
                return FromMicrodegreesPerSecond(microdegreespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MicroradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMicroradiansPerSecond(QuantityValue? microradianspersecond)
        {
            if (microradianspersecond.HasValue)
            {
                return FromMicroradiansPerSecond(microradianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MillidegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMillidegreesPerSecond(QuantityValue? millidegreespersecond)
        {
            if (millidegreespersecond.HasValue)
            {
                return FromMillidegreesPerSecond(millidegreespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable MilliradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromMilliradiansPerSecond(QuantityValue? milliradianspersecond)
        {
            if (milliradianspersecond.HasValue)
            {
                return FromMilliradiansPerSecond(milliradianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable NanodegreesPerSecond.
        /// </summary>
        public static RotationalSpeed? FromNanodegreesPerSecond(QuantityValue? nanodegreespersecond)
        {
            if (nanodegreespersecond.HasValue)
            {
                return FromNanodegreesPerSecond(nanodegreespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable NanoradiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromNanoradiansPerSecond(QuantityValue? nanoradianspersecond)
        {
            if (nanoradianspersecond.HasValue)
            {
                return FromNanoradiansPerSecond(nanoradianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RadiansPerSecond.
        /// </summary>
        public static RotationalSpeed? FromRadiansPerSecond(QuantityValue? radianspersecond)
        {
            if (radianspersecond.HasValue)
            {
                return FromRadiansPerSecond(radianspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RevolutionsPerMinute.
        /// </summary>
        public static RotationalSpeed? FromRevolutionsPerMinute(QuantityValue? revolutionsperminute)
        {
            if (revolutionsperminute.HasValue)
            {
                return FromRevolutionsPerMinute(revolutionsperminute.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable RotationalSpeed from nullable RevolutionsPerSecond.
        /// </summary>
        public static RotationalSpeed? FromRevolutionsPerSecond(QuantityValue? revolutionspersecond)
        {
            if (revolutionspersecond.HasValue)
            {
                return FromRevolutionsPerSecond(revolutionspersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalSpeedUnit" /> to <see cref="RotationalSpeed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalSpeed unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static RotationalSpeed From(double value, RotationalSpeedUnit fromUnit)
#else
        public static RotationalSpeed From(QuantityValue value, RotationalSpeedUnit fromUnit)
#endif
        {
            return new RotationalSpeed((double)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalSpeedUnit" /> to <see cref="RotationalSpeed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalSpeed unit value.</returns>
        public static RotationalSpeed? From(QuantityValue? value, RotationalSpeedUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new RotationalSpeed((double)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(RotationalSpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          RotationalSpeedUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static RotationalSpeed operator -(RotationalSpeed right)
        {
            return new RotationalSpeed(-right.Value, right.Unit);
        }

        public static RotationalSpeed operator +(RotationalSpeed left, RotationalSpeed right)
        {
            return new RotationalSpeed(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static RotationalSpeed operator -(RotationalSpeed left, RotationalSpeed right)
        {
            return new RotationalSpeed(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static RotationalSpeed operator *(double left, RotationalSpeed right)
        {
            return new RotationalSpeed(left * right.Value, right.Unit);
        }

        public static RotationalSpeed operator *(RotationalSpeed left, double right)
        {
            return new RotationalSpeed(left.Value * right, left.Unit);
        }

        public static RotationalSpeed operator /(RotationalSpeed left, double right)
        {
            return new RotationalSpeed(left.Value / right, left.Unit);
        }

        public static double operator /(RotationalSpeed left, RotationalSpeed right)
        {
            return left.RadiansPerSecond / right.RadiansPerSecond;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is RotationalSpeed)) throw new ArgumentException("Expected type RotationalSpeed.", "obj");
            return CompareTo((RotationalSpeed) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(RotationalSpeed other)
        {
            return AsBaseUnitRadiansPerSecond().CompareTo(other.AsBaseUnitRadiansPerSecond());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(RotationalSpeed left, RotationalSpeed right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator ==(RotationalSpeed left, RotationalSpeed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public static bool operator !=(RotationalSpeed left, RotationalSpeed right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        [Obsolete("It is not safe to compare equality due to using System.Double as the internal representation. It is very easy to get slightly different values due to floating point operations. Instead use Equals(other, maxError) to provide the max allowed error.")]
        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitRadiansPerSecond().Equals(((RotationalSpeed) obj).AsBaseUnitRadiansPerSecond());
        }

        /// <summary>
        ///     Compare equality to another RotationalSpeed by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(RotationalSpeed other, RotationalSpeed maxError)
        {
            return Math.Abs(AsBaseUnitRadiansPerSecond() - other.AsBaseUnitRadiansPerSecond()) <= maxError.AsBaseUnitRadiansPerSecond();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(RotationalSpeedUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            double baseUnitValue = AsBaseUnitRadiansPerSecond();

            switch (unit)
            {
                case RotationalSpeedUnit.CentiradianPerSecond: return (baseUnitValue) / 1e-2d;
                case RotationalSpeedUnit.DeciradianPerSecond: return (baseUnitValue) / 1e-1d;
                case RotationalSpeedUnit.DegreePerMinute: return (180*60/Math.PI)*baseUnitValue;
                case RotationalSpeedUnit.DegreePerSecond: return (180/Math.PI)*baseUnitValue;
                case RotationalSpeedUnit.MicrodegreePerSecond: return ((180/Math.PI)*baseUnitValue) / 1e-6d;
                case RotationalSpeedUnit.MicroradianPerSecond: return (baseUnitValue) / 1e-6d;
                case RotationalSpeedUnit.MillidegreePerSecond: return ((180/Math.PI)*baseUnitValue) / 1e-3d;
                case RotationalSpeedUnit.MilliradianPerSecond: return (baseUnitValue) / 1e-3d;
                case RotationalSpeedUnit.NanodegreePerSecond: return ((180/Math.PI)*baseUnitValue) / 1e-9d;
                case RotationalSpeedUnit.NanoradianPerSecond: return (baseUnitValue) / 1e-9d;
                case RotationalSpeedUnit.RadianPerSecond: return baseUnitValue;
                case RotationalSpeedUnit.RevolutionPerMinute: return (baseUnitValue/6.2831853072)*60;
                case RotationalSpeedUnit.RevolutionPerSecond: return baseUnitValue/6.2831853072;

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static RotationalSpeed Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static RotationalSpeed Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<RotationalSpeed, RotationalSpeedUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    RotationalSpeedUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromRadiansPerSecond(x.RadiansPerSecond + y.RadiansPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out RotationalSpeed result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out RotationalSpeed result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(RotationalSpeed);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RotationalSpeedUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static RotationalSpeedUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static RotationalSpeedUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<RotationalSpeedUnit>(str.Trim());

            if (unit == RotationalSpeedUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized RotationalSpeedUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is RadianPerSecond
        /// </summary>
        public static RotationalSpeedUnit ToStringDefaultUnit { get; set; } = RotationalSpeedUnit.RadianPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(RotationalSpeedUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          RotationalSpeedUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            RotationalSpeedUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            RotationalSpeedUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of RotationalSpeed
        /// </summary>
        public static RotationalSpeed MaxValue => new RotationalSpeed(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of RotationalSpeed
        /// </summary>
        public static RotationalSpeed MinValue => new RotationalSpeed(double.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnitRadiansPerSecond()
        {
			if (Unit == RotationalSpeedUnit.RadianPerSecond) { return _value; }

            switch (Unit)
            {
                case RotationalSpeedUnit.CentiradianPerSecond: return (_value) * 1e-2d;
                case RotationalSpeedUnit.DeciradianPerSecond: return (_value) * 1e-1d;
                case RotationalSpeedUnit.DegreePerMinute: return (Math.PI/(180*60))*_value;
                case RotationalSpeedUnit.DegreePerSecond: return (Math.PI/180)*_value;
                case RotationalSpeedUnit.MicrodegreePerSecond: return ((Math.PI/180)*_value) * 1e-6d;
                case RotationalSpeedUnit.MicroradianPerSecond: return (_value) * 1e-6d;
                case RotationalSpeedUnit.MillidegreePerSecond: return ((Math.PI/180)*_value) * 1e-3d;
                case RotationalSpeedUnit.MilliradianPerSecond: return (_value) * 1e-3d;
                case RotationalSpeedUnit.NanodegreePerSecond: return ((Math.PI/180)*_value) * 1e-9d;
                case RotationalSpeedUnit.NanoradianPerSecond: return (_value) * 1e-9d;
                case RotationalSpeedUnit.RadianPerSecond: return _value;
                case RotationalSpeedUnit.RevolutionPerMinute: return (_value*6.2831853072)/60;
                case RotationalSpeedUnit.RevolutionPerSecond: return _value*6.2831853072;
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private double AsBaseNumericType(RotationalSpeedUnit unit) => Convert.ToDouble(As(unit));
	}
}
