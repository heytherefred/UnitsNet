//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyUnit.extra.cs files to add code to generated quantities.
//     Add Extensions\MyUnitExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyUnit.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In telecommunications and computing, bit rate is the number of bits that are conveyed or processed per unit of time.
    /// </summary>
    // ReSharper disable once PartialTypeWithSinglePart

    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
#if WINDOWS_UWP
    public sealed partial class BitRate
#else
    public partial struct BitRate : IComparable, IComparable<BitRate>
#endif
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly decimal _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly BitRateUnit? _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
#if WINDOWS_UWP
        public double Value => Convert.ToDouble(_value);
#else
        public decimal Value => _value;
#endif

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public BitRateUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        // Windows Runtime Component requires a default constructor
#if WINDOWS_UWP
        public BitRate()
        {
            _value = 0;
            _unit = BaseUnit;
        }
#endif

        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public BitRate(double bitspersecond)
        {
            _value = Convert.ToDecimal(bitspersecond);
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="numericValue">Numeric value.</param>
        /// <param name="unit">Unit representation.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
#if WINDOWS_UWP
        private
#else
        public 
#endif
          BitRate(decimal numericValue, BitRateUnit unit)
        {
            _value = numericValue;
            _unit = unit;
         }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit BitPerSecond.
        /// </summary>
        /// <param name="bitspersecond">Value assuming base unit BitPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        BitRate(long bitspersecond) : this(Convert.ToDecimal(bitspersecond), BaseUnit) { }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        // Windows Runtime Component does not support decimal type
        /// <summary>
        ///     Creates the quantity with the given value assuming the base unit BitPerSecond.
        /// </summary>
        /// <param name="bitspersecond">Value assuming base unit BitPerSecond.</param>
#if WINDOWS_UWP
        private
#else
        [Obsolete("Use the constructor that takes a unit parameter. This constructor will be removed in a future version.")]
        public
#endif
        BitRate(decimal bitspersecond) : this(Convert.ToDecimal(bitspersecond), BaseUnit) { }

        #region Properties

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType => QuantityType.BitRate;

        /// <summary>
        ///     The base unit representation of this quantity for the numeric value stored internally. All conversions go via this value.
        /// </summary>
        public static BitRateUnit BaseUnit => BitRateUnit.BitPerSecond;

        /// <summary>
        ///     All units of measurement for the BitRate quantity.
        /// </summary>
        public static BitRateUnit[] Units { get; } = Enum.GetValues(typeof(BitRateUnit)).Cast<BitRateUnit>().ToArray();
        /// <summary>
        ///     Get BitRate in BitsPerSecond.
        /// </summary>
        public double BitsPerSecond => As(BitRateUnit.BitPerSecond);
        /// <summary>
        ///     Get BitRate in BytesPerSecond.
        /// </summary>
        public double BytesPerSecond => As(BitRateUnit.BytePerSecond);
        /// <summary>
        ///     Get BitRate in ExabitsPerSecond.
        /// </summary>
        public double ExabitsPerSecond => As(BitRateUnit.ExabitPerSecond);
        /// <summary>
        ///     Get BitRate in ExabytesPerSecond.
        /// </summary>
        public double ExabytesPerSecond => As(BitRateUnit.ExabytePerSecond);
        /// <summary>
        ///     Get BitRate in ExbibitsPerSecond.
        /// </summary>
        public double ExbibitsPerSecond => As(BitRateUnit.ExbibitPerSecond);
        /// <summary>
        ///     Get BitRate in ExbibytesPerSecond.
        /// </summary>
        public double ExbibytesPerSecond => As(BitRateUnit.ExbibytePerSecond);
        /// <summary>
        ///     Get BitRate in GibibitsPerSecond.
        /// </summary>
        public double GibibitsPerSecond => As(BitRateUnit.GibibitPerSecond);
        /// <summary>
        ///     Get BitRate in GibibytesPerSecond.
        /// </summary>
        public double GibibytesPerSecond => As(BitRateUnit.GibibytePerSecond);
        /// <summary>
        ///     Get BitRate in GigabitsPerSecond.
        /// </summary>
        public double GigabitsPerSecond => As(BitRateUnit.GigabitPerSecond);
        /// <summary>
        ///     Get BitRate in GigabytesPerSecond.
        /// </summary>
        public double GigabytesPerSecond => As(BitRateUnit.GigabytePerSecond);
        /// <summary>
        ///     Get BitRate in KibibitsPerSecond.
        /// </summary>
        public double KibibitsPerSecond => As(BitRateUnit.KibibitPerSecond);
        /// <summary>
        ///     Get BitRate in KibibytesPerSecond.
        /// </summary>
        public double KibibytesPerSecond => As(BitRateUnit.KibibytePerSecond);
        /// <summary>
        ///     Get BitRate in KilobitsPerSecond.
        /// </summary>
        public double KilobitsPerSecond => As(BitRateUnit.KilobitPerSecond);
        /// <summary>
        ///     Get BitRate in KilobytesPerSecond.
        /// </summary>
        public double KilobytesPerSecond => As(BitRateUnit.KilobytePerSecond);
        /// <summary>
        ///     Get BitRate in MebibitsPerSecond.
        /// </summary>
        public double MebibitsPerSecond => As(BitRateUnit.MebibitPerSecond);
        /// <summary>
        ///     Get BitRate in MebibytesPerSecond.
        /// </summary>
        public double MebibytesPerSecond => As(BitRateUnit.MebibytePerSecond);
        /// <summary>
        ///     Get BitRate in MegabitsPerSecond.
        /// </summary>
        public double MegabitsPerSecond => As(BitRateUnit.MegabitPerSecond);
        /// <summary>
        ///     Get BitRate in MegabytesPerSecond.
        /// </summary>
        public double MegabytesPerSecond => As(BitRateUnit.MegabytePerSecond);
        /// <summary>
        ///     Get BitRate in PebibitsPerSecond.
        /// </summary>
        public double PebibitsPerSecond => As(BitRateUnit.PebibitPerSecond);
        /// <summary>
        ///     Get BitRate in PebibytesPerSecond.
        /// </summary>
        public double PebibytesPerSecond => As(BitRateUnit.PebibytePerSecond);
        /// <summary>
        ///     Get BitRate in PetabitsPerSecond.
        /// </summary>
        public double PetabitsPerSecond => As(BitRateUnit.PetabitPerSecond);
        /// <summary>
        ///     Get BitRate in PetabytesPerSecond.
        /// </summary>
        public double PetabytesPerSecond => As(BitRateUnit.PetabytePerSecond);
        /// <summary>
        ///     Get BitRate in TebibitsPerSecond.
        /// </summary>
        public double TebibitsPerSecond => As(BitRateUnit.TebibitPerSecond);
        /// <summary>
        ///     Get BitRate in TebibytesPerSecond.
        /// </summary>
        public double TebibytesPerSecond => As(BitRateUnit.TebibytePerSecond);
        /// <summary>
        ///     Get BitRate in TerabitsPerSecond.
        /// </summary>
        public double TerabitsPerSecond => As(BitRateUnit.TerabitPerSecond);
        /// <summary>
        ///     Get BitRate in TerabytesPerSecond.
        /// </summary>
        public double TerabytesPerSecond => As(BitRateUnit.TerabytePerSecond);

        #endregion

        #region Static

        public static BitRate Zero => new BitRate(0, BaseUnit);

        /// <summary>
        ///     Get BitRate from BitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromBitsPerSecond(double bitspersecond)
#else
        public static BitRate FromBitsPerSecond(QuantityValueDecimal bitspersecond)
#endif
        {
            decimal value = (decimal) bitspersecond;
            return new BitRate(value, BitRateUnit.BitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from BytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromBytesPerSecond(double bytespersecond)
#else
        public static BitRate FromBytesPerSecond(QuantityValueDecimal bytespersecond)
#endif
        {
            decimal value = (decimal) bytespersecond;
            return new BitRate(value, BitRateUnit.BytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from ExabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExabitsPerSecond(double exabitspersecond)
#else
        public static BitRate FromExabitsPerSecond(QuantityValueDecimal exabitspersecond)
#endif
        {
            decimal value = (decimal) exabitspersecond;
            return new BitRate(value, BitRateUnit.ExabitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from ExabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExabytesPerSecond(double exabytespersecond)
#else
        public static BitRate FromExabytesPerSecond(QuantityValueDecimal exabytespersecond)
#endif
        {
            decimal value = (decimal) exabytespersecond;
            return new BitRate(value, BitRateUnit.ExabytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from ExbibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExbibitsPerSecond(double exbibitspersecond)
#else
        public static BitRate FromExbibitsPerSecond(QuantityValueDecimal exbibitspersecond)
#endif
        {
            decimal value = (decimal) exbibitspersecond;
            return new BitRate(value, BitRateUnit.ExbibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from ExbibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromExbibytesPerSecond(double exbibytespersecond)
#else
        public static BitRate FromExbibytesPerSecond(QuantityValueDecimal exbibytespersecond)
#endif
        {
            decimal value = (decimal) exbibytespersecond;
            return new BitRate(value, BitRateUnit.ExbibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from GibibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGibibitsPerSecond(double gibibitspersecond)
#else
        public static BitRate FromGibibitsPerSecond(QuantityValueDecimal gibibitspersecond)
#endif
        {
            decimal value = (decimal) gibibitspersecond;
            return new BitRate(value, BitRateUnit.GibibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from GibibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGibibytesPerSecond(double gibibytespersecond)
#else
        public static BitRate FromGibibytesPerSecond(QuantityValueDecimal gibibytespersecond)
#endif
        {
            decimal value = (decimal) gibibytespersecond;
            return new BitRate(value, BitRateUnit.GibibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from GigabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGigabitsPerSecond(double gigabitspersecond)
#else
        public static BitRate FromGigabitsPerSecond(QuantityValueDecimal gigabitspersecond)
#endif
        {
            decimal value = (decimal) gigabitspersecond;
            return new BitRate(value, BitRateUnit.GigabitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from GigabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromGigabytesPerSecond(double gigabytespersecond)
#else
        public static BitRate FromGigabytesPerSecond(QuantityValueDecimal gigabytespersecond)
#endif
        {
            decimal value = (decimal) gigabytespersecond;
            return new BitRate(value, BitRateUnit.GigabytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from KibibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKibibitsPerSecond(double kibibitspersecond)
#else
        public static BitRate FromKibibitsPerSecond(QuantityValueDecimal kibibitspersecond)
#endif
        {
            decimal value = (decimal) kibibitspersecond;
            return new BitRate(value, BitRateUnit.KibibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from KibibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKibibytesPerSecond(double kibibytespersecond)
#else
        public static BitRate FromKibibytesPerSecond(QuantityValueDecimal kibibytespersecond)
#endif
        {
            decimal value = (decimal) kibibytespersecond;
            return new BitRate(value, BitRateUnit.KibibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from KilobitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKilobitsPerSecond(double kilobitspersecond)
#else
        public static BitRate FromKilobitsPerSecond(QuantityValueDecimal kilobitspersecond)
#endif
        {
            decimal value = (decimal) kilobitspersecond;
            return new BitRate(value, BitRateUnit.KilobitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from KilobytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromKilobytesPerSecond(double kilobytespersecond)
#else
        public static BitRate FromKilobytesPerSecond(QuantityValueDecimal kilobytespersecond)
#endif
        {
            decimal value = (decimal) kilobytespersecond;
            return new BitRate(value, BitRateUnit.KilobytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from MebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMebibitsPerSecond(double mebibitspersecond)
#else
        public static BitRate FromMebibitsPerSecond(QuantityValueDecimal mebibitspersecond)
#endif
        {
            decimal value = (decimal) mebibitspersecond;
            return new BitRate(value, BitRateUnit.MebibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from MebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMebibytesPerSecond(double mebibytespersecond)
#else
        public static BitRate FromMebibytesPerSecond(QuantityValueDecimal mebibytespersecond)
#endif
        {
            decimal value = (decimal) mebibytespersecond;
            return new BitRate(value, BitRateUnit.MebibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from MegabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMegabitsPerSecond(double megabitspersecond)
#else
        public static BitRate FromMegabitsPerSecond(QuantityValueDecimal megabitspersecond)
#endif
        {
            decimal value = (decimal) megabitspersecond;
            return new BitRate(value, BitRateUnit.MegabitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from MegabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromMegabytesPerSecond(double megabytespersecond)
#else
        public static BitRate FromMegabytesPerSecond(QuantityValueDecimal megabytespersecond)
#endif
        {
            decimal value = (decimal) megabytespersecond;
            return new BitRate(value, BitRateUnit.MegabytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from PebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPebibitsPerSecond(double pebibitspersecond)
#else
        public static BitRate FromPebibitsPerSecond(QuantityValueDecimal pebibitspersecond)
#endif
        {
            decimal value = (decimal) pebibitspersecond;
            return new BitRate(value, BitRateUnit.PebibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from PebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPebibytesPerSecond(double pebibytespersecond)
#else
        public static BitRate FromPebibytesPerSecond(QuantityValueDecimal pebibytespersecond)
#endif
        {
            decimal value = (decimal) pebibytespersecond;
            return new BitRate(value, BitRateUnit.PebibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from PetabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPetabitsPerSecond(double petabitspersecond)
#else
        public static BitRate FromPetabitsPerSecond(QuantityValueDecimal petabitspersecond)
#endif
        {
            decimal value = (decimal) petabitspersecond;
            return new BitRate(value, BitRateUnit.PetabitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from PetabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromPetabytesPerSecond(double petabytespersecond)
#else
        public static BitRate FromPetabytesPerSecond(QuantityValueDecimal petabytespersecond)
#endif
        {
            decimal value = (decimal) petabytespersecond;
            return new BitRate(value, BitRateUnit.PetabytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from TebibitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTebibitsPerSecond(double tebibitspersecond)
#else
        public static BitRate FromTebibitsPerSecond(QuantityValueDecimal tebibitspersecond)
#endif
        {
            decimal value = (decimal) tebibitspersecond;
            return new BitRate(value, BitRateUnit.TebibitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from TebibytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTebibytesPerSecond(double tebibytespersecond)
#else
        public static BitRate FromTebibytesPerSecond(QuantityValueDecimal tebibytespersecond)
#endif
        {
            decimal value = (decimal) tebibytespersecond;
            return new BitRate(value, BitRateUnit.TebibytePerSecond);
        }

        /// <summary>
        ///     Get BitRate from TerabitsPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTerabitsPerSecond(double terabitspersecond)
#else
        public static BitRate FromTerabitsPerSecond(QuantityValueDecimal terabitspersecond)
#endif
        {
            decimal value = (decimal) terabitspersecond;
            return new BitRate(value, BitRateUnit.TerabitPerSecond);
        }

        /// <summary>
        ///     Get BitRate from TerabytesPerSecond.
        /// </summary>
#if WINDOWS_UWP
        [Windows.Foundation.Metadata.DefaultOverload]
        public static BitRate FromTerabytesPerSecond(double terabytespersecond)
#else
        public static BitRate FromTerabytesPerSecond(QuantityValueDecimal terabytespersecond)
#endif
        {
            decimal value = (decimal) terabytespersecond;
            return new BitRate(value, BitRateUnit.TerabytePerSecond);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Get nullable BitRate from nullable BitsPerSecond.
        /// </summary>
        public static BitRate? FromBitsPerSecond(QuantityValueDecimal? bitspersecond)
        {
            if (bitspersecond.HasValue)
            {
                return FromBitsPerSecond(bitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable BytesPerSecond.
        /// </summary>
        public static BitRate? FromBytesPerSecond(QuantityValueDecimal? bytespersecond)
        {
            if (bytespersecond.HasValue)
            {
                return FromBytesPerSecond(bytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExabitsPerSecond.
        /// </summary>
        public static BitRate? FromExabitsPerSecond(QuantityValueDecimal? exabitspersecond)
        {
            if (exabitspersecond.HasValue)
            {
                return FromExabitsPerSecond(exabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExabytesPerSecond.
        /// </summary>
        public static BitRate? FromExabytesPerSecond(QuantityValueDecimal? exabytespersecond)
        {
            if (exabytespersecond.HasValue)
            {
                return FromExabytesPerSecond(exabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExbibitsPerSecond.
        /// </summary>
        public static BitRate? FromExbibitsPerSecond(QuantityValueDecimal? exbibitspersecond)
        {
            if (exbibitspersecond.HasValue)
            {
                return FromExbibitsPerSecond(exbibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable ExbibytesPerSecond.
        /// </summary>
        public static BitRate? FromExbibytesPerSecond(QuantityValueDecimal? exbibytespersecond)
        {
            if (exbibytespersecond.HasValue)
            {
                return FromExbibytesPerSecond(exbibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GibibitsPerSecond.
        /// </summary>
        public static BitRate? FromGibibitsPerSecond(QuantityValueDecimal? gibibitspersecond)
        {
            if (gibibitspersecond.HasValue)
            {
                return FromGibibitsPerSecond(gibibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GibibytesPerSecond.
        /// </summary>
        public static BitRate? FromGibibytesPerSecond(QuantityValueDecimal? gibibytespersecond)
        {
            if (gibibytespersecond.HasValue)
            {
                return FromGibibytesPerSecond(gibibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GigabitsPerSecond.
        /// </summary>
        public static BitRate? FromGigabitsPerSecond(QuantityValueDecimal? gigabitspersecond)
        {
            if (gigabitspersecond.HasValue)
            {
                return FromGigabitsPerSecond(gigabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable GigabytesPerSecond.
        /// </summary>
        public static BitRate? FromGigabytesPerSecond(QuantityValueDecimal? gigabytespersecond)
        {
            if (gigabytespersecond.HasValue)
            {
                return FromGigabytesPerSecond(gigabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KibibitsPerSecond.
        /// </summary>
        public static BitRate? FromKibibitsPerSecond(QuantityValueDecimal? kibibitspersecond)
        {
            if (kibibitspersecond.HasValue)
            {
                return FromKibibitsPerSecond(kibibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KibibytesPerSecond.
        /// </summary>
        public static BitRate? FromKibibytesPerSecond(QuantityValueDecimal? kibibytespersecond)
        {
            if (kibibytespersecond.HasValue)
            {
                return FromKibibytesPerSecond(kibibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KilobitsPerSecond.
        /// </summary>
        public static BitRate? FromKilobitsPerSecond(QuantityValueDecimal? kilobitspersecond)
        {
            if (kilobitspersecond.HasValue)
            {
                return FromKilobitsPerSecond(kilobitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable KilobytesPerSecond.
        /// </summary>
        public static BitRate? FromKilobytesPerSecond(QuantityValueDecimal? kilobytespersecond)
        {
            if (kilobytespersecond.HasValue)
            {
                return FromKilobytesPerSecond(kilobytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MebibitsPerSecond.
        /// </summary>
        public static BitRate? FromMebibitsPerSecond(QuantityValueDecimal? mebibitspersecond)
        {
            if (mebibitspersecond.HasValue)
            {
                return FromMebibitsPerSecond(mebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MebibytesPerSecond.
        /// </summary>
        public static BitRate? FromMebibytesPerSecond(QuantityValueDecimal? mebibytespersecond)
        {
            if (mebibytespersecond.HasValue)
            {
                return FromMebibytesPerSecond(mebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MegabitsPerSecond.
        /// </summary>
        public static BitRate? FromMegabitsPerSecond(QuantityValueDecimal? megabitspersecond)
        {
            if (megabitspersecond.HasValue)
            {
                return FromMegabitsPerSecond(megabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable MegabytesPerSecond.
        /// </summary>
        public static BitRate? FromMegabytesPerSecond(QuantityValueDecimal? megabytespersecond)
        {
            if (megabytespersecond.HasValue)
            {
                return FromMegabytesPerSecond(megabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PebibitsPerSecond.
        /// </summary>
        public static BitRate? FromPebibitsPerSecond(QuantityValueDecimal? pebibitspersecond)
        {
            if (pebibitspersecond.HasValue)
            {
                return FromPebibitsPerSecond(pebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PebibytesPerSecond.
        /// </summary>
        public static BitRate? FromPebibytesPerSecond(QuantityValueDecimal? pebibytespersecond)
        {
            if (pebibytespersecond.HasValue)
            {
                return FromPebibytesPerSecond(pebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PetabitsPerSecond.
        /// </summary>
        public static BitRate? FromPetabitsPerSecond(QuantityValueDecimal? petabitspersecond)
        {
            if (petabitspersecond.HasValue)
            {
                return FromPetabitsPerSecond(petabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable PetabytesPerSecond.
        /// </summary>
        public static BitRate? FromPetabytesPerSecond(QuantityValueDecimal? petabytespersecond)
        {
            if (petabytespersecond.HasValue)
            {
                return FromPetabytesPerSecond(petabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TebibitsPerSecond.
        /// </summary>
        public static BitRate? FromTebibitsPerSecond(QuantityValueDecimal? tebibitspersecond)
        {
            if (tebibitspersecond.HasValue)
            {
                return FromTebibitsPerSecond(tebibitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TebibytesPerSecond.
        /// </summary>
        public static BitRate? FromTebibytesPerSecond(QuantityValueDecimal? tebibytespersecond)
        {
            if (tebibytespersecond.HasValue)
            {
                return FromTebibytesPerSecond(tebibytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TerabitsPerSecond.
        /// </summary>
        public static BitRate? FromTerabitsPerSecond(QuantityValueDecimal? terabitspersecond)
        {
            if (terabitspersecond.HasValue)
            {
                return FromTerabitsPerSecond(terabitspersecond.Value);
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        ///     Get nullable BitRate from nullable TerabytesPerSecond.
        /// </summary>
        public static BitRate? FromTerabytesPerSecond(QuantityValueDecimal? terabytespersecond)
        {
            if (terabytespersecond.HasValue)
            {
                return FromTerabytesPerSecond(terabytespersecond.Value);
            }
            else
            {
                return null;
            }
        }

#endif

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="BitRateUnit" /> to <see cref="BitRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>BitRate unit value.</returns>
#if WINDOWS_UWP
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static BitRate From(double value, BitRateUnit fromUnit)
#else
        public static BitRate From(QuantityValueDecimal value, BitRateUnit fromUnit)
#endif
        {
            return new BitRate((decimal)value, fromUnit);
        }

        // Windows Runtime Component does not support nullable types (double?): https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="BitRateUnit" /> to <see cref="BitRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>BitRate unit value.</returns>
        public static BitRate? From(QuantityValueDecimal? value, BitRateUnit fromUnit)
        {
            if (!value.HasValue)
            {
                return null;
            }

            return new BitRate((decimal)value.Value, fromUnit);
        }
#endif

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(BitRateUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>Unit abbreviation string.</returns>
        [UsedImplicitly]
        public static string GetAbbreviation(
          BitRateUnit unit,
#if WINDOWS_UWP
          [CanBeNull] string cultureName)
#else
          [CanBeNull] IFormatProvider provider)
#endif
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return UnitSystem.GetCached(provider).GetDefaultAbbreviation(unit);
        }

        #endregion

        #region Arithmetic Operators

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static BitRate operator -(BitRate right)
        {
            return new BitRate(-right.Value, right.Unit);
        }

        public static BitRate operator +(BitRate left, BitRate right)
        {
            return new BitRate(left.Value + right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static BitRate operator -(BitRate left, BitRate right)
        {
            return new BitRate(left.Value - right.AsBaseNumericType(left.Unit), left.Unit);
        }

        public static BitRate operator *(decimal left, BitRate right)
        {
            return new BitRate(left * right.Value, right.Unit);
        }

        public static BitRate operator *(BitRate left, decimal right)
        {
            return new BitRate(left.Value * right, left.Unit);
        }

        public static BitRate operator /(BitRate left, decimal right)
        {
            return new BitRate(left.Value / right, left.Unit);
        }

        public static double operator /(BitRate left, BitRate right)
        {
            return left.BitsPerSecond / right.BitsPerSecond;
        }
#endif

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj == null) throw new ArgumentNullException("obj");
            if (!(obj is BitRate)) throw new ArgumentException("Expected type BitRate.", "obj");
            return CompareTo((BitRate) obj);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        int CompareTo(BitRate other)
        {
            return AsBaseUnitBitsPerSecond().CompareTo(other.AsBaseUnitBitsPerSecond());
        }

        // Windows Runtime Component does not allow operator overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
        public static bool operator <=(BitRate left, BitRate right)
        {
            return left.Value <= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >=(BitRate left, BitRate right)
        {
            return left.Value >= right.AsBaseNumericType(left.Unit);
        }

        public static bool operator <(BitRate left, BitRate right)
        {
            return left.Value < right.AsBaseNumericType(left.Unit);
        }

        public static bool operator >(BitRate left, BitRate right)
        {
            return left.Value > right.AsBaseNumericType(left.Unit);
        }

        public static bool operator ==(BitRate left, BitRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value == right.AsBaseNumericType(left.Unit);
        }

        public static bool operator !=(BitRate left, BitRate right)
        {
            // ReSharper disable once CompareOfFloatsByEqualityOperator
            return left.Value != right.AsBaseNumericType(left.Unit);
        }
#endif

        public override bool Equals(object obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }

            return AsBaseUnitBitsPerSecond().Equals(((BitRate) obj).AsBaseUnitBitsPerSecond());
        }

        /// <summary>
        ///     Compare equality to another BitRate by specifying a max allowed difference.
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        /// </summary>
        /// <param name="other">Other quantity to compare to.</param>
        /// <param name="maxError">Max error allowed.</param>
        /// <returns>True if the difference between the two values is not greater than the specified max.</returns>
        public bool Equals(BitRate other, BitRate maxError)
        {
            return Math.Abs(AsBaseUnitBitsPerSecond() - other.AsBaseUnitBitsPerSecond()) <= maxError.AsBaseUnitBitsPerSecond();
        }

        public override int GetHashCode()
        {
			return new { Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(BitRateUnit unit)
        {
            if (Unit == unit)
            {
                return (double)Value;
            }

            decimal baseUnitValue = AsBaseUnitBitsPerSecond();

            switch (unit)
            {
                case BitRateUnit.BitPerSecond: return Convert.ToDouble(baseUnitValue);
                case BitRateUnit.BytePerSecond: return Convert.ToDouble(baseUnitValue/8m);
                case BitRateUnit.ExabitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e18m);
                case BitRateUnit.ExabytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e18m);
                case BitRateUnit.ExbibitPerSecond: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.ExbibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.GibibitPerSecond: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024));
                case BitRateUnit.GibibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024));
                case BitRateUnit.GigabitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e9m);
                case BitRateUnit.GigabytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e9m);
                case BitRateUnit.KibibitPerSecond: return Convert.ToDouble((baseUnitValue) / 1024m);
                case BitRateUnit.KibibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1024m);
                case BitRateUnit.KilobitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e3m);
                case BitRateUnit.KilobytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e3m);
                case BitRateUnit.MebibitPerSecond: return Convert.ToDouble((baseUnitValue) / (1024m * 1024));
                case BitRateUnit.MebibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024));
                case BitRateUnit.MegabitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e6m);
                case BitRateUnit.MegabytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e6m);
                case BitRateUnit.PebibitPerSecond: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.PebibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.PetabitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e15m);
                case BitRateUnit.PetabytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e15m);
                case BitRateUnit.TebibitPerSecond: return Convert.ToDouble((baseUnitValue) / (1024m * 1024 * 1024 * 1024));
                case BitRateUnit.TebibytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / (1024m * 1024 * 1024 * 1024));
                case BitRateUnit.TerabitPerSecond: return Convert.ToDouble((baseUnitValue) / 1e12m);
                case BitRateUnit.TerabytePerSecond: return Convert.ToDouble((baseUnitValue/8m) / 1e12m);

                default:
                    throw new NotImplementedException("unit: " + unit);
            }
        }

        #endregion

        #region Parsing

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static BitRate Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static BitRate Parse(
            string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            if (str == null) throw new ArgumentNullException("str");

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            return QuantityParser.Parse<BitRate, BitRateUnit>(str, provider,
                delegate(string value, string unit, IFormatProvider formatProvider2)
                {
                    double parsedValue = double.Parse(value, formatProvider2);
                    BitRateUnit parsedUnit = ParseUnit(unit, formatProvider2);
                    return From(parsedValue, parsedUnit);
                }, (x, y) => FromBitsPerSecond(x.BitsPerSecond + y.BitsPerSecond));
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out BitRate result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(
            [CanBeNull] string str,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
          out BitRate result)
        {
#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif
            try
            {

                result = Parse(
                  str,
#if WINDOWS_UWP
                  cultureName);
#else
                  provider);
#endif

                return true;
            }
            catch
            {
                result = default(BitRate);
                return false;
            }
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static BitRateUnit ParseUnit(string str)
        {
            return ParseUnit(str, (IFormatProvider)null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="UnitSystem" />'s default culture.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        [Obsolete("Use overload that takes IFormatProvider instead of culture name. This method was only added to support WindowsRuntimeComponent and will be removed from other .NET targets.")]
        public static BitRateUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            return ParseUnit(str, cultureName == null ? null : new CultureInfo(cultureName));
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
#if WINDOWS_UWP
        internal
#else
        public
#endif
        static BitRateUnit ParseUnit(string str, IFormatProvider provider = null)
        {
            if (str == null) throw new ArgumentNullException("str");

            var unitSystem = UnitSystem.GetCached(provider);
            var unit = unitSystem.Parse<BitRateUnit>(str.Trim());

            if (unit == BitRateUnit.Undefined)
            {
                var newEx = new UnitsNetException("Error parsing string. The unit is not a recognized BitRateUnit.");
                newEx.Data["input"] = str;
                newEx.Data["provider"] = provider?.ToString() ?? "(null)";
                throw newEx;
            }

            return unit;
        }

        #endregion

        [Obsolete("This is no longer used since we will instead use the quantity's Unit value as default.")]
        /// <summary>
        ///     Set the default unit used by ToString(). Default is BitPerSecond
        /// </summary>
        public static BitRateUnit ToStringDefaultUnit { get; set; } = BitRateUnit.BitPerSecond;

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(Unit);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using current UI culture and two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
        /// <returns>String representation.</returns>
        public string ToString(BitRateUnit unit)
        {
            return ToString(unit, null, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <returns>String representation.</returns>
        public string ToString(
          BitRateUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName)
#else
            [CanBeNull] IFormatProvider provider)
#endif
        {
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="unit">Unit representation to use.</param>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            BitRateUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            int significantDigitsAfterRadix)
        {
            double value = As(unit);
            string format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(
              unit,
#if WINDOWS_UWP
              cultureName,
#else
              provider,
#endif
              format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
#if WINDOWS_UWP
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="UnitSystem" />'s default culture.</param>
#else
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="UnitSystem.DefaultCulture" />.</param>
#endif
        /// <param name="unit">Unit representation to use.</param>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implictly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        [UsedImplicitly]
        public string ToString(
            BitRateUnit unit,
#if WINDOWS_UWP
            [CanBeNull] string cultureName,
#else
            [CanBeNull] IFormatProvider provider,
#endif
            [NotNull] string format,
            [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

#if WINDOWS_UWP
            // Windows Runtime Component does not support CultureInfo and IFormatProvider types, so we use culture name for public methods: https://msdn.microsoft.com/en-us/library/br230301.aspx
            IFormatProvider provider = cultureName == null ? UnitSystem.DefaultCulture : new CultureInfo(cultureName);
#else
            provider = provider ?? UnitSystem.DefaultCulture;
#endif

            double value = As(unit);
            object[] formatArgs = UnitFormatter.GetFormatArgs(unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <summary>
        /// Represents the largest possible value of BitRate
        /// </summary>
        public static BitRate MaxValue => new BitRate(decimal.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of BitRate
        /// </summary>
        public static BitRate MinValue => new BitRate(decimal.MinValue, BaseUnit);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private decimal AsBaseUnitBitsPerSecond()
        {
			if (Unit == BitRateUnit.BitPerSecond) { return _value; }

            switch (Unit)
            {
                case BitRateUnit.BitPerSecond: return Convert.ToDecimal(_value);
                case BitRateUnit.BytePerSecond: return Convert.ToDecimal(_value*8m);
                case BitRateUnit.ExabitPerSecond: return Convert.ToDecimal((_value) * 1e18m);
                case BitRateUnit.ExabytePerSecond: return Convert.ToDecimal((_value*8m) * 1e18m);
                case BitRateUnit.ExbibitPerSecond: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.ExbibytePerSecond: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.GibibitPerSecond: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024));
                case BitRateUnit.GibibytePerSecond: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024));
                case BitRateUnit.GigabitPerSecond: return Convert.ToDecimal((_value) * 1e9m);
                case BitRateUnit.GigabytePerSecond: return Convert.ToDecimal((_value*8m) * 1e9m);
                case BitRateUnit.KibibitPerSecond: return Convert.ToDecimal((_value) * 1024m);
                case BitRateUnit.KibibytePerSecond: return Convert.ToDecimal((_value*8m) * 1024m);
                case BitRateUnit.KilobitPerSecond: return Convert.ToDecimal((_value) * 1e3m);
                case BitRateUnit.KilobytePerSecond: return Convert.ToDecimal((_value*8m) * 1e3m);
                case BitRateUnit.MebibitPerSecond: return Convert.ToDecimal((_value) * (1024m * 1024));
                case BitRateUnit.MebibytePerSecond: return Convert.ToDecimal((_value*8m) * (1024m * 1024));
                case BitRateUnit.MegabitPerSecond: return Convert.ToDecimal((_value) * 1e6m);
                case BitRateUnit.MegabytePerSecond: return Convert.ToDecimal((_value*8m) * 1e6m);
                case BitRateUnit.PebibitPerSecond: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.PebibytePerSecond: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024 * 1024));
                case BitRateUnit.PetabitPerSecond: return Convert.ToDecimal((_value) * 1e15m);
                case BitRateUnit.PetabytePerSecond: return Convert.ToDecimal((_value*8m) * 1e15m);
                case BitRateUnit.TebibitPerSecond: return Convert.ToDecimal((_value) * (1024m * 1024 * 1024 * 1024));
                case BitRateUnit.TebibytePerSecond: return Convert.ToDecimal((_value*8m) * (1024m * 1024 * 1024 * 1024));
                case BitRateUnit.TerabitPerSecond: return Convert.ToDecimal((_value) * 1e12m);
                case BitRateUnit.TerabytePerSecond: return Convert.ToDecimal((_value*8m) * 1e12m);
                default:
                    throw new NotImplementedException("Unit not implemented: " + Unit);
			}
		}

		/// <summary>Convenience method for working with internal numeric type.</summary>
        private decimal AsBaseNumericType(BitRateUnit unit) => Convert.ToDecimal(As(unit));
	}
}
